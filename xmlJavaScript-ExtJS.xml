<?xml version="1.0"?><!-- Copyright MPSOFTWARE -->
<javascript>
  <modules>
    <module name="ExtJS" disabled="False">
      <interfaces>
        <interface name="Array" private="False" extends="Object">
          <description>
          </description>
          <functions>
            <function name="indexOf" returns="Number">
              <description>Checks whether or not the specified object exists in the array.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>The object to check for</description>
                </param>
              </params>
            </function>
            <function name="remove" returns="Array">
              <description>Removes the specified object from the array.  If the object is not found nothing happens.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Date" private="False" extends="Object">
          <description>The date parsing and format syntax is a subset of
PHP's date() function, and the formats that are
supported will provide results equivalent to their PHP versions.
The following is a list of all currently supported formats:
Format  Description                                                               Example returned values
------  -----------------------------------------------------------------------   -----------------------
  d     Day of the month, 2 digits with leading zeros                             01 to 31
  D     A short textual representation of the day of the week                     Mon to Sun
  j     Day of the month without leading zeros                                    1 to 31
  l     A full textual representation of the day of the week                      Sunday to Saturday
  N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
  S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
  w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
  z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
  W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
  F     A full textual representation of a month, such as January or March        January to December
  m     Numeric representation of a month, with leading zeros                     01 to 12
  M     A short textual representation of a month                                 Jan to Dec
  n     Numeric representation of a month, without leading zeros                  1 to 12
  t     Number of days in the given month                                         28 to 31
  L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
  o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
        belongs to the previous or next year, that year is used instead)
  Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
  y     A two digit representation of a year                                      Examples: 99 or 03
  a     Lowercase Ante meridiem and Post meridiem                                 am or pm
  A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
  g     12-hour format of an hour without leading zeros                           1 to 12
  G     24-hour format of an hour without leading zeros                           0 to 23
  h     12-hour format of an hour with leading zeros                              01 to 12
  H     24-hour format of an hour with leading zeros                              00 to 23
  i     Minutes, with leading zeros                                               00 to 59
  s     Seconds, with leading zeros                                               00 to 59
  u     Decimal fraction of a second                                              Examples:
        (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
                                                                                  100 (i.e. 0.100s) or
                                                                                  999 (i.e. 0.999s) or
                                                                                  999876543210 (i.e. 0.999876543210s)
  O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
  P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
  T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
  Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
  c     ISO 8601 date (note: the decimal fraction of a second, if specified,      Examples:
        must contain at least 1 digit. There is no limit on the maximum number    2007-04-17T15:19:21+08:00 or
        of digits allowed. see http://www.w3.org/TR/NOTE-datetime for more info)  2008-03-16T16:18:22Z or
                                                                                  2009-02-15T17:17:23.9+01:00 or
                                                                                  2010-01-14T18:16:24,999876543-07:00
  U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
// Sample date:
// 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
document.write(dt.format('Y-m-d'));                           // 2007-01-10
document.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm
document.write(dt.format('l, \\t\\he jS \\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM
Here are some standard date/time patterns that you might find helpful.  They
are not part of the source of Date.js, but to use them you can simply copy this
block of code into any script that is included after Date.js and they will also become
globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
Date.patterns = {
    ISO8601Long:"Y-m-d H:i:s",
    ISO8601Short:"Y-m-d",
    ShortDate: "n/j/Y",
    LongDate: "l, F d, Y",
    FullDateTime: "l, F d, Y g:i:s A",
    MonthDay: "F d",
    ShortTime: "g:i A",
    LongTime: "g:i:s A",
    SortableDateTime: "Y-m-d\\TH:i:s",
    UniversalSortableDateTime: "Y-m-d H:i:sO",
    YearMonth: "F, Y"
};
Example usage:
var dt = new Date();
document.write(dt.format(Date.patterns.ShortDate));</description>
          <attributes>
            <attribute name="DAY" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="HOUR" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="MILLI" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="MINUTE" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="MONTH" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="SECOND" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="YEAR" type="String" readonly="False">
              <description>&lt;static&gt; Date interval constant</description>
            </attribute>
            <attribute name="dayNames" type="Array" readonly="False">
              <description>&lt;static&gt; An array of textual day names.
Override these values for international dates.
Example:
Date.dayNames = [
      'SundayInYourLang',
      'MondayInYourLang',
      ...
    ];</description>
            </attribute>
            <attribute name="formatCodes" type="Object" readonly="False">
              <description>&lt;static&gt; The base format-code to formatting-function hashmap used by the format method.
Formatting functions are strings (or functions which return strings) which
will return the appropriate value when evaluated in the context of the Date object
from which the format method is called.
Add to / override these mappings for custom date formatting.
Note: Date.format() treats characters as literals if an appropriate mapping cannot be found.
Example:
    Date.formatCodes.x = "String.leftPad(this.getDate(), 2, '0')";
    (new Date()).format("X"); // returns the current day of the month</description>
            </attribute>
            <attribute name="monthNames" type="Array" readonly="False">
              <description>&lt;static&gt; An array of textual month names.
Override these values for international dates.
Example:
Date.monthNames = [
      'JanInYourLang',
      'FebInYourLang',
      ...
    ];</description>
            </attribute>
            <attribute name="monthNumbers" type="Object" readonly="False">
              <description>&lt;static&gt; An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).
Override these values for international dates.
Example:
Date.monthNumbers = {
      'ShortJanNameInYourLang':0,
      'ShortFebNameInYourLang':1,
      ...
    };</description>
            </attribute>
          </attributes>
          <functions>
            <function name="add" returns="Date">
              <description>Provides a convenient method of performing basic date arithmetic.  This method
does not modify the Date instance being called - it creates and returns
a new Date instance containing the resulting date value.
Examples:
//Basic usage:
    var dt = new Date('10/29/2006').add(Date.DAY, 5);
    document.write(dt); //returns 'Fri Oct 06 2006 00:00:00'

    //Negative values will subtract correctly:
    var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
    document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

    //You can even chain several calls together in one line!
    var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
    document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'</description>
              <params>
                <param name="interval" type="String" optional="False">
                  <description>A valid date interval enum value.</description>
                </param>
                <param name="value" type="Number" optional="False">
                  <description>A valid date interval enum value.</description>
                </param>
              </params>
            </function>
            <function name="between" returns="Boolean">
              <description>Checks if this date falls on or between the given start and end dates.</description>
              <params>
                <param name="start" type="Date" optional="False">
                  <description>End date</description>
                </param>
                <param name="end" type="Date" optional="False">
                  <description>End date</description>
                </param>
              </params>
            </function>
            <function name="clearTime" returns="Date">
              <description>Clears any time information from this date.</description>
              <params>
                <param name="clone" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clone" returns="Date">
              <description>Creates and returns a new Date instance with the exact same date value as the called instance.
Dates are copied and passed by reference, so if a copied date variable is modified later, the original
variable will also be changed.  When the intention is to create a new variable that will not
modify the original instance, you should create a clone.
Example of correctly cloning a date:
//wrong way:
    var orig = new Date('10/1/2006');
    var copy = orig;
    copy.setDate(5);
    document.write(orig);  //returns 'Thu Oct 05 2006'!

    //correct way:
    var orig = new Date('10/1/2006');
    var copy = orig.clone();
    copy.setDate(5);
    document.write(orig);  //returns 'Thu Oct 01 2006'</description>
            </function>
            <function name="format" returns="String">
              <description>Formats a date given the supplied format string.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDayOfYear" returns="Number">
              <description>Get the numeric day number of the year, adjusted for leap year.</description>
            </function>
            <function name="getDaysInMonth" returns="Number">
              <description>Get the number of days in the current month, adjusted for leap year.</description>
            </function>
            <function name="getElapsed" returns="Number">
              <description>Returns the number of milliseconds between this date and date</description>
              <params>
                <param name="date" type="Date" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFirstDateOfMonth" returns="Date">
              <description>Get the date of the first day of the month in which this date resides.</description>
            </function>
            <function name="getFirstDayOfMonth" returns="Number">
              <description>Get the first day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the monthNames array to retrieve the textual day name.
Example:
var dt = new Date('1/10/2007');
    document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'</description>
            </function>
            <function name="getGMTOffset" returns="String">
              <description>Get the offset from GMT of the current date (equivalent to the format specifier 'O').</description>
              <params>
                <param name="colon" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLastDateOfMonth" returns="Date">
              <description>Get the date of the last day of the month in which this date resides.</description>
            </function>
            <function name="getLastDayOfMonth" returns="Number">
              <description>Get the last day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the monthNames array to retrieve the textual day name.
Example:
var dt = new Date('1/10/2007');
    document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'</description>
            </function>
            <function name="getMonthNumber" returns="Number">
              <description>&lt;static&gt; Get the zero-based javascript month number for the given short/full month name.
Override this function for international dates.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getShortDayName" returns="String">
              <description>&lt;static&gt; Get the short day name for the given day number.
Override this function for international dates.</description>
              <params>
                <param name="day" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getShortMonthName" returns="String">
              <description>&lt;static&gt; Get the short month name for the given month number.
Override this function for international dates.</description>
              <params>
                <param name="month" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSuffix" returns="String">
              <description>Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').</description>
            </function>
            <function name="getTimezone" returns="String">
              <description>Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
Note: The date string returned by the javascript Date object's toString() method varies
between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
For a given date string e.g. "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)",
getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
(which may or may not be present), failing which it proceeds to get the timezone abbreviation
from the GMT offset portion of the date string.</description>
            </function>
            <function name="getWeekOfYear" returns="Number">
              <description>Get the numeric ISO-8601 week number of the year.
(equivalent to the format specifier 'W', but without a leading zero).</description>
            </function>
            <function name="isLeapYear" returns="Boolean">
              <description>Whether or not the current date is in a leap year.</description>
            </function>
            <function name="parseDate" returns="Date">
              <description>&lt;static&gt; Parses the passed string using the specified format. Note that this function expects dates in normal calendar
format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of
the date format that is not specified will default to the current date value for that part.  Time parts can also
be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format
string or the parse operation will fail.
Example Usage:
//dt = Fri May 25 2007 (current date)
    var dt = new Date();

    //dt = Thu May 25 2006 (today's month/day in 2006)
    dt = Date.parseDate("2006", "Y");

    //dt = Sun Jan 15 2006 (all date parts specified)
    dt = Date.parseDate("2006-01-15", "Y-m-d");

    //dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)
    dt = Date.parseDate("2006-01-15 3:20:01 PM", "Y-m-d h:i:s A" );</description>
              <params>
                <param name="input" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext" private="False" extends="Object">
          <description>Ext core utilities and functions.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="BLANK_IMAGE_URL" type="String" readonly="False">
              <description>URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. (Defaults to
"http://extjs.com/s.gif" and you should change this to a URL on your server).</description>
            </attribute>
            <attribute name="SSL_SECURE_URL" type="String" readonly="False">
              <description>URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
the IE insecure content warning (defaults to javascript:false).</description>
            </attribute>
            <attribute name="emptyFn" type="Function" readonly="False">
              <description>A reusable empty function</description>
            </attribute>
            <attribute name="enableGarbageCollector" type="Boolean" readonly="False">
              <description>True to automatically uncache orphaned Ext.Elements periodically (defaults to true)</description>
            </attribute>
            <attribute name="enableListenerCollection" type="Boolean" readonly="False">
              <description>True to automatically purge event listeners after uncaching an element (defaults to false).
Note: this only happens if enableGarbageCollector is true.</description>
            </attribute>
            <attribute name="isAir" type="Boolean" readonly="False">
              <description>True if the detected platform is Adobe Air.</description>
            </attribute>
            <attribute name="isBorderBox" type="Boolean" readonly="False">
              <description>True if the detected browser is Internet Explorer running in non-strict mode.</description>
            </attribute>
            <attribute name="isChrome" type="Boolean" readonly="False">
              <description>True if the detected browser is Chrome.</description>
            </attribute>
            <attribute name="isGecko" type="Boolean" readonly="False">
              <description>True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).</description>
            </attribute>
            <attribute name="isGecko2" type="Boolean" readonly="False">
              <description>True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x).</description>
            </attribute>
            <attribute name="isGecko3" type="Boolean" readonly="False">
              <description>True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).</description>
            </attribute>
            <attribute name="isIE" type="Boolean" readonly="False">
              <description>True if the detected browser is Internet Explorer.</description>
            </attribute>
            <attribute name="isIE6" type="Boolean" readonly="False">
              <description>True if the detected browser is Internet Explorer 6.x.</description>
            </attribute>
            <attribute name="isIE7" type="Boolean" readonly="False">
              <description>True if the detected browser is Internet Explorer 7.x.</description>
            </attribute>
            <attribute name="isIE8" type="Boolean" readonly="False">
              <description>True if the detected browser is Internet Explorer 8.x.</description>
            </attribute>
            <attribute name="isLinux" type="Boolean" readonly="False">
              <description>True if the detected platform is Linux.</description>
            </attribute>
            <attribute name="isMac" type="Boolean" readonly="False">
              <description>True if the detected platform is Mac OS.</description>
            </attribute>
            <attribute name="isOpera" type="Boolean" readonly="False">
              <description>True if the detected browser is Opera.</description>
            </attribute>
            <attribute name="isReady" type="Boolean" readonly="False">
              <description>True when the document is fully initialized and ready for action</description>
            </attribute>
            <attribute name="isSafari" type="Boolean" readonly="False">
              <description>True if the detected browser is Safari.</description>
            </attribute>
            <attribute name="isSafari2" type="Boolean" readonly="False">
              <description>True if the detected browser is Safari 2.x.</description>
            </attribute>
            <attribute name="isSafari3" type="Boolean" readonly="False">
              <description>True if the detected browser is Safari 3.x.</description>
            </attribute>
            <attribute name="isSecure" type="Boolean" readonly="False">
              <description>True if the page is running over SSL</description>
            </attribute>
            <attribute name="isStrict" type="Boolean" readonly="False">
              <description>True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode</description>
            </attribute>
            <attribute name="isWindows" type="Boolean" readonly="False">
              <description>True if the detected platform is Windows.</description>
            </attribute>
            <attribute name="useShims" type="Boolean" readonly="False">
              <description>By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,
you may want to set this to true.</description>
            </attribute>
            <attribute name="Action" type="Ext.Action" readonly="True" />
            <attribute name="Ajax" type="Ext.Ajax" readonly="True" />
            <attribute name="BoxComponent" type="Ext.BoxComponent" readonly="True" />
            <attribute name="Button" type="Ext.Button" readonly="True" />
            <attribute name="ColorPalette" type="Ext.ColorPalette" readonly="True" />
            <attribute name="Component" type="Ext.Component" readonly="True" />
            <attribute name="ComponentMgr" type="Ext.ComponentMgr" readonly="True" />
            <attribute name="CompositeElement" type="Ext.CompositeElement" readonly="True" />
            <attribute name="CompositeElementLite" type="Ext.CompositeElementLite" readonly="True" />
            <attribute name="Container" type="Ext.Container" readonly="True" />
            <attribute name="CycleButton" type="Ext.CycleButton" readonly="True" />
            <attribute name="DataView" type="Ext.DataView" readonly="True" />
            <attribute name="DatePicker" type="Ext.DatePicker" readonly="True" />
            <attribute name="DomHelper" type="Ext.DomHelper" readonly="True" />
            <attribute name="DomQuery" type="Ext.DomQuery" readonly="True" />
            <attribute name="Editor" type="Ext.Editor" readonly="True" />
            <attribute name="Element" type="Ext.Element" readonly="True" />
            <attribute name="EventManager" type="Ext.EventManager" readonly="True" />
            <attribute name="EventObject" type="Ext.EventObject" readonly="True" />
            <attribute name="Fx" type="Ext.Fx" readonly="True" />
            <attribute name="History" type="Ext.History" readonly="True" />
            <attribute name="KeyMap" type="Ext.KeyMap" readonly="True" />
            <attribute name="KeyNav" type="Ext.KeyNav" readonly="True" />
            <attribute name="Layer" type="Ext.Layer" readonly="True" />
            <attribute name="LoadMask" type="Ext.LoadMask" readonly="True" />
            <attribute name="MessageBox" type="Ext.MessageBox" readonly="True" />
            <attribute name="PagingToolbar" type="Ext.PagingToolbar" readonly="True" />
            <attribute name="Panel" type="Ext.Panel" readonly="True" />
            <attribute name="ProgressBar" type="Ext.ProgressBar" readonly="True" />
            <attribute name="QuickTip" type="Ext.QuickTip" readonly="True" />
            <attribute name="QuickTips" type="Ext.QuickTips" readonly="True" />
            <attribute name="Resizable" type="Ext.Resizable" readonly="True" />
            <attribute name="Shadow" type="Ext.Shadow" readonly="True" />
            <attribute name="Slider" type="Ext.Slider" readonly="True" />
            <attribute name="SplitBar" type="Ext.SplitBar" readonly="True" />
            <attribute name="SplitButton" type="Ext.SplitButton" readonly="True" />
            <attribute name="StatusBar" type="Ext.StatusBar" readonly="True" />
            <attribute name="StoreMgr" type="Ext.StoreMgr" readonly="True" />
            <attribute name="TabPanel" type="Ext.TabPanel" readonly="True" />
            <attribute name="TaskMgr" type="Ext.TaskMgr" readonly="True" />
            <attribute name="Template" type="Ext.Template" readonly="True" />
            <attribute name="Tip" type="Ext.Tip" readonly="True" />
            <attribute name="Toolbar" type="Ext.Toolbar" readonly="True" />
            <attribute name="ToolTip" type="Ext.ToolTip" readonly="True" />
            <attribute name="Updater" type="Ext.Updater" readonly="True" />
            <attribute name="Viewport" type="Ext.Viewport" readonly="True" />
            <attribute name="Window" type="Ext.Window" readonly="True" />
            <attribute name="WindowGroup" type="Ext.WindowGroup" readonly="True" />
            <attribute name="WindowMgr" type="Ext.WindowMgr" readonly="True" />
            <attribute name="XTemplate" type="Ext.XTemplate" readonly="True" />
            <attribute name="air" type="Ext.air" readonly="True" />
            <attribute name="data" type="Ext.data" readonly="True" />
            <attribute name="dd" type="Ext.dd" readonly="True" />
            <attribute name="form" type="Ext.form" readonly="True" />
            <attribute name="grid" type="Ext.grid" readonly="True" />
            <attribute name="layout" type="Ext.layout" readonly="True" />
            <attribute name="menu" type="Ext.menu" readonly="True" />
            <attribute name="sql" type="Ext.sql" readonly="True" />
            <attribute name="state" type="Ext.state" readonly="True" />
            <attribute name="tree" type="Ext.tree" readonly="True" />
            <attribute name="util" type="Ext.util" readonly="True" />
          </attributes>
          <functions>
            <function name="addBehaviors" returns="void">
              <description>Applies event listeners to elements by selectors when the document is ready.
The event name is specified with an @ suffix.
Ext.addBehaviors({
   // add a listener for click on all anchors in element with id foo
   '#foo a@click' : function(e, t){
       // do something
   },

   // add the same listener to multiple selectors (separated by comma BEFORE the @)
   '#foo a, #bar span.some-class@mouseover' : function(){
       // do something
   }
});</description>
              <params>
                <param name="obj" type="Object" optional="False">
                  <description>The list of behaviors to apply</description>
                </param>
              </params>
            </function>
            <function name="apply" returns="Object">
              <description>Copies all the properties of config to obj.</description>
              <params>
                <param name="obj" type="Object" optional="False">
                  <description>The source of the properties</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The source of the properties</description>
                </param>
                <param name="defaults" type="Object" optional="False">
                  <description>The source of the properties</description>
                </param>
              </params>
            </function>
            <function name="applyIf" returns="Object">
              <description>Copies all the properties of config to obj if they don't already exist.</description>
              <params>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="decode" returns="Object">
              <description>Shorthand for Ext.util.JSON.decode</description>
              <params>
                <param name="json" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
intended for arguments of type Ext.Element and Ext.Component, but any subclass of
Ext.util.Observable can be passed in.  Any number of elements and/or components can be
passed into this function in a single call as separate arguments.</description>
              <params>
                <param name="arg1" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="arg2" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="etc..." type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="each" returns="void">
              <description>Iterates an array calling the passed function with each item, stopping if your function returns false. If the
passed array is not really an array, your function is called once with it.
The supplied function is called with (Object item, Number index, Array allItems).</description>
              <params>
                <param name="array" type="Array/NodeList/Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="encode" returns="String">
              <description>Shorthand for Ext.util.JSON.encode</description>
              <params>
                <param name="o" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="escapeRe" returns="String">
              <description>Escapes the passed string for use in a regular expression</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="extend" returns="subclass">
              <description>Extends one class with another class and optionally overrides members with the passed literal. This class
also adds the function "override()" to the class that can be used to override
members on an instance.

This function also supports a 2-argument call in which the subclass's constructor is
not passed as an argument. In this form, the parameters are as follows:

For example, to create a subclass of the Ext GridPanel:
MyGridPanel = Ext.extend(Ext.grid.GridPanel, {
        constructor: function(config) {
            // Your preprocessing here
        	MyGridPanel.superclass.constructor.apply(this, arguments);
            // Your postprocessing here
        },

        yourMethod: function() {
            // etc.
        }
    });

        Parameters:
        subclass : FunctionThe class inheriting the functionalitysuperclass : FunctionThe class being extendedoverrides : Object(optional) A literal with members which are copied into the subclass's
prototype, and are therefore shared between all instances of the new class.
        Returns:

            FunctionThe subclass constructor.</description>
              <params>
                <param name="superclass" type="" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fly" returns="Element">
              <description>&lt;static&gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code.
Shorthand of Ext.Element.fly</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="named" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="Element">
              <description>Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
Automatically fixes if an object was recreated with the same id via AJAX or DOM.
Shorthand of Ext.Element.get</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBody" returns="Ext.Element">
              <description>Returns the current document body as an Ext.Element.</description>
            </function>
            <function name="getCmp" returns="Ext.Component">
              <description>Shorthand for Ext.ComponentMgr.get</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDoc" returns="Ext.Element">
              <description>Returns the current HTML document object as an Ext.Element.</description>
            </function>
            <function name="getDom" returns="HTMLElement">
              <description>Return the dom node for the passed string (id), dom node, or Ext.Element</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="id" returns="String">
              <description>Generates unique ids. If the element already has an id, it is unchanged</description>
              <params>
                <param name="el" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="prefix" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isArray" returns="Boolean">
              <description>Returns true if the passed object is a JavaScript array, otherwise false.</description>
              <params>
                <param name="The" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isDate" returns="Boolean">
              <description>Returns true if the passed object is a JavaScript date object, otherwise false.</description>
              <params>
                <param name="The" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isEmpty" returns="Boolean">
              <description>Returns true if the passed value is null, undefined or an empty string.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="allowBlank" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="namespace" returns="void">
              <description>Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:
Ext.namespace('Company', 'Company.data');
Company.Widget = function() { ... }
Company.data.CustomStore = function(config) { ... }</description>
              <params>
                <param name="namespace1" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="namespace2" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="etc" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="num" returns="Number">
              <description>Utility method for validating that a value is numeric, returning the specified default value if it is not.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onReady" returns="void">
              <description>Fires when the document is ready (before onload and before images are loaded).  Shorthand of Ext.EventManager.onDocumentReady.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="override" returns="void">
              <description>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Usage:Ext.override(MyClass, {
    newMethod1: function(){
        // etc.
    },
    newMethod2: function(foo){
        // etc.
    }
});</description>
              <params>
                <param name="origclass" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="query" returns="Array">
              <description>Selects an array of DOM nodes by CSS/XPath selector. Shorthand of Ext.DomQuery.select</description>
              <params>
                <param name="path" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="Node" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reg" returns="void">
              <description>Shorthand for Ext.ComponentMgr.registerType</description>
              <params>
                <param name="xtype" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cls" type="Constructor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeNode" returns="void">
              <description>Removes a DOM node from the document.  The body node will be ignored if passed in.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="CompositeElementLite/CompositeElement">
              <description>Selects elements based on the passed CSS selector to enable working on them as 1.</description>
              <params>
                <param name="selector" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="unique" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="root" type="HTMLElement/String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="type" returns="String">
              <description>Returns the type of object that is passed in. If the object passed in is null or undefined it
return false otherwise it returns one of the following values:
string: If the object passed is a string
number: If the object passed is a number
boolean: If the object passed is a boolean value
date: If the object passed is a Date object
function: If the object passed is a function reference
object: If the object passed is an object
array: If the object passed is an array
regexp: If the object passed is a regular expression
element: If the object passed is a DOM Element
nodelist: If the object passed is a DOM NodeList
textnode: If the object passed is a DOM text node and contains something other than whitespace
whitespace: If the object passed is a DOM text node and contains only whitespace</description>
              <params>
                <param name="object" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="urlDecode" returns="Object">
              <description>Takes an encoded URL and and converts it to an object. e.g. Ext.urlDecode("foo=1&amp;bar=2"); would return {foo: "1", bar: "2"}
or Ext.urlDecode("foo=1&amp;bar=2&amp;bar=3&amp;bar=4", false); would return {foo: "1", bar: ["2", "3", "4"]}.</description>
              <params>
                <param name="string" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overwrite" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="urlEncode" returns="String">
              <description>Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&amp;bar=2".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="value" returns="Mixed">
              <description>Utility method for validating that a value is non-empty (i.e. i) not null, ii) not undefined, and iii) not an empty string),
returning the specified default value if it is.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="allowBlank" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Action" private="True" extends="Object">
          <description>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
updates across any components that support the Action interface (primarily Ext.Toolbar, Ext.Button
and Ext.menu.Menu components).
Aside from supporting the config object interface, any component that needs to use Actions must also support
the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),
setDisabled(boolean), setVisible(boolean) and setHandler(function).
Example usage:
// Define the shared action.  Each component below will have the same
// display text and icon, and will display the same message on click.
var action = new Ext.Action({
    text: 'Do something',
    handler: function(){
        Ext.Msg.alert('Click', 'You did something.');
    },
    iconCls: 'do-something'
});

var panel = new Ext.Panel({
    title: 'Actions',
    width:500,
    height:300,
    tbar: [
        // Add the action directly to a toolbar as a menu button
        action, {
            text: 'Action Menu',
            // Add the action to a menu as a text item
            menu: [action]
        }
    ],
    items: [
        // Add the action to the panel body as a standard button
        new Ext.Button(action)
    ],
    renderTo: Ext.getBody()
});

// Change the text for all components using the action
action.setText('Something else');</description>
          <attributes>
            <attribute name="isDisabled" type="Object" readonly="True">
              <description>Returns true if the components using this action are currently disabled, else returns false.  Read-only.</description>
            </attribute>
            <attribute name="isHidden" type="Object" readonly="True">
              <description>Returns true if the components using this action are currently hidden, else returns false.  Read-only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Action" returns="Action">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disables all components using this action.</description>
            </function>
            <function name="each" returns="void">
              <description>Executes the specified function once for each component currently tied to this action.  The function passed
in should accept a single argument that will be an object that supports the basic Action config/method interface.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="enable" returns="void">
              <description>Enables all components using this action.</description>
            </function>
            <function name="execute" returns="void">
              <description>Executes this action manually using the default handler specified in the original config object.  Any arguments
passed to this function will be passed on to the handler function.</description>
              <params>
                <param name="arg1" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="arg2" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="etc..." type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getIconClass" returns="void">
              <description>Gets the icon CSS class currently used by all components using this action.</description>
            </function>
            <function name="getText" returns="void">
              <description>Gets the text currently displayed by all components using this action.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides all components using this action.</description>
            </function>
            <function name="setDisabled" returns="void">
              <description>Sets the disabled state of all components using this action.  Shortcut method
for enable and disable.</description>
              <params>
                <param name="disabled" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHandler" returns="void">
              <description>Sets the function that will be called by each component using this action when its primary event is triggered.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHidden" returns="void">
              <description>Sets the hidden state of all components using this action.  Shortcut method
for hide and show.</description>
              <params>
                <param name="hidden" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setIconClass" returns="void">
              <description>Sets the icon CSS class for all components using this action.  The class should supply
a background image that will be used as the icon image.</description>
              <params>
                <param name="cls" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setText" returns="void">
              <description>Sets the text to be displayed by all components using this action.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows all components using this action.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.Clipboard" private="True" extends="Object">
          <description>*This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="clear" returns="void">
              <description>Clear the clipboard for all formats.</description>
            </function>
            <function name="clearData" returns="void">
              <description>Clear the data for a particular format.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getData" returns="void">
              <description>Get the data for a particular format.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="transferMode" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasData" returns="void">
              <description>Determine if there is any data in a particular format clipboard.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setData" returns="void">
              <description>Set the data for a particular format clipboard.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDataHandler" returns="void">
              <description>Set the data handler for a particular format clipboard.</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.DragType" private="True" extends="Object">
          <description>Drag drop type constantsThis class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="BITMAP" type="Object" readonly="False">
              <description>Constant for bitmap data</description>
            </attribute>
            <attribute name="FILES" type="Object" readonly="False">
              <description>Constant for file list data</description>
            </attribute>
            <attribute name="HTML" type="Object" readonly="False">
              <description>Constant for html data</description>
            </attribute>
            <attribute name="TEXT" type="Object" readonly="False">
              <description>Constant for text data</description>
            </attribute>
            <attribute name="URL" type="Object" readonly="False">
              <description>Constant for url data</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="Ext.air.FileProvider" private="True" extends="Ext.state.Provider">
          <description>An Ext state provider implementation for Adobe AIR that stores state in the application
storage directory.</description>
          <functions>
            <function name="FileProvider" returns="FileProvider">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.NativeObservable" private="True" extends="Ext.util.Observable">
          <description>Adds ability for Ext Observable functionality to proxy events for native (AIR) object wrappers</description>
          <functions>
            <function name="NativeObservable" returns="NativeObservable">
              <description>
              </description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.NativeWindow" private="True" extends="Ext.air.NativeObservable">
          <description>Wraps the AIR NativeWindow class to give an Ext friendly API. This class also adds
automatic state management (position and size) for the window (by id) and it can be used
for easily creating "minimize to system tray" for the main window in your application.
Note: Many of the config options for this class can only be applied to NEW windows. Passing
in an existing instance of a window along with those config options will have no effect.</description>
          <attributes>
            <attribute name="id" type="String" readonly="False">
              <description>
              </description>
            </attribute>
          </attributes>
          <functions>
            <function name="NativeWindow" returns="NativeWindow">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="NativeWindow.getRootHtmlWindow" returns="Window">
              <description>&lt;static&gt; Returns the javascript "window" object of the first opened window in your application</description>
            </function>
            <function name="NativeWindow.getRootWindow" returns="air.NativeWindow">
              <description>&lt;static&gt; Returns the first opened window in your application</description>
            </function>
            <function name="activate" returns="void">
              <description>Shows and activates the window</description>
            </function>
            <function name="close" returns="void">
              <description>Closes the window</description>
            </function>
            <function name="fullscreen" returns="void">
              <description>Enter full-screen mode for the window.</description>
              <params>
                <param name="nonInteractive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCenterXY" returns="x:">
              <description>Returns the x/y coordinates for centering the windw on the screen</description>
            </function>
            <function name="getNative" returns="air.NativeWindow">
              <description>Returns the air.NativeWindow instance</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the window</description>
            </function>
            <function name="isMaximized" returns="Boolean">
              <description>Returns true if this window is maximized</description>
            </function>
            <function name="isMinimized" returns="Boolean">
              <description>Returns true if this window is minimized</description>
            </function>
            <function name="moveTo" returns="void">
              <description>Moves the window to the passed xy and y coordinates</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resize" returns="void">
              <description>
              </description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows the window</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.NativeWindowGroup" private="True" extends="Object">
          <description>A collection of NativeWindows.</description>
          <functions>
            <function name="closeAll" returns="void">
              <description>Closes all windows</description>
            </function>
            <function name="each" returns="void">
              <description>Executes the specified function once for every window in the group, passing each
window as the only parameter. Returning false from the function will stop the iteration.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>(optional) The scope in which to execute the function</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) The scope in which to execute the function</description>
                </param>
              </params>
            </function>
            <function name="get" returns="void">
              <description>
              </description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>
              </description>
              <params>
                <param name="win" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>
              </description>
              <params>
                <param name="win" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.NativeWindowManager" private="True" extends="Ext.air.NativeWindowGroup">
          <description>Collection of all NativeWindows created.This class is a singleton and cannot be created directly.</description>
        </interface>
        <interface name="Ext.air.Sound" private="True" extends="Object">
          <description>*This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="play" returns="void">
              <description>Play a sound.</description>
              <params>
                <param name="file" type="String" optional="False">
                  <description>The file to be played. The path is resolved against applicationDirectory</description>
                </param>
                <param name="startAt" type="Number" optional="True">
                  <description>The file to be played. The path is resolved against applicationDirectory</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.SystemMenu" private="True" extends="Object">
          <description>Provides platform independent handling of adding item to the application menu, creating the menu or
items as needed.
This class also provides the ability to bind standard Ext.Action instances with NativeMenuItemsThis class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="add" returns="air.NativeMenu">
              <description>Add items to one of the application menus</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>The application menu to add the actions to (e.g. 'File' or 'Edit').</description>
                </param>
                <param name="actions" type="Array" optional="False">
                  <description>The application menu to add the actions to (e.g. 'File' or 'Edit').</description>
                </param>
                <param name="mindex" type="Number" optional="False">
                  <description>The application menu to add the actions to (e.g. 'File' or 'Edit').</description>
                </param>
              </params>
            </function>
            <function name="get" returns="void">
              <description>Returns the application menu</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.SystemTray" private="True" extends="Object">
          <description>*This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="bounce" returns="void">
              <description>Bounce the OS X dock icon. Accepts a priority to notify the user
whether the event which has just occurred is informational (single bounce)
or critcal (continual bounce).</description>
              <params>
                <param name="{air.NotificationType}" type="priority" optional="False">
                  <description>The priorities are air.NotificationType.INFORMATIONAL and air.NotificationType.CRITICAL.</description>
                </param>
              </params>
            </function>
            <function name="hideIcon" returns="void">
              <description>Hide the custom icon</description>
            </function>
            <function name="setIcon" returns="void">
              <description>Sets the Icon and tooltip for the currently running application in the
SystemTray or Dock depending on the operating system.</description>
              <params>
                <param name="icon" type="String" optional="False">
                  <description>Boolean to initialize with icon immediately</description>
                </param>
                <param name="tooltip" type="String" optional="False">
                  <description>Boolean to initialize with icon immediately</description>
                </param>
                <param name="initWithIcon" type="Boolean" optional="False">
                  <description>Boolean to initialize with icon immediately</description>
                </param>
              </params>
            </function>
            <function name="setMenu" returns="void">
              <description>Sets a menu for the icon</description>
              <params>
                <param name="actions" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showIcon" returns="void">
              <description>Show the custom icon</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air.VideoPanel" private="True" extends="Ext.Panel">
          <description>
          </description>
        </interface>
        <interface name="Ext.Ajax" private="True" extends="Ext.data.Connection">
          <description>Global Ajax request class.  Provides a simple way to make Ajax requests with maximum flexibility.  Example usage:
// Basic request
Ext.Ajax.request({
   url: 'foo.php',
   success: someFn,
   failure: otherFn,
   headers: {
       'my-header': 'foo'
   },
   params: { foo: 'bar' }
});

// Simple ajax form submission
Ext.Ajax.request({
    form: 'some-form',
    params: 'foo=bar'
});

// Default headers to pass in every request
Ext.Ajax.defaultHeaders = {
    'Powered-By': 'Ext'
};

// Global Ajax events can be handled on every request!
Ext.Ajax.on('beforerequest', this.showSpinner, this);This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="autoAbort" type="Boolean" readonly="False">
              <description>Whether a new request should abort any pending requests. (defaults to false)</description>
            </attribute>
            <attribute name="defaultHeaders" type="Object" readonly="False">
              <description>An object containing request headers which are added to each request made by this object. (defaults to undefined)</description>
            </attribute>
            <attribute name="disableCaching" type="Boolean" readonly="False">
              <description>True to add a unique cache-buster param to GET requests. (defaults to true)</description>
            </attribute>
            <attribute name="extraParams" type="Object" readonly="False">
              <description>An object containing properties which are used as
extra parameters to each request made by this object. (defaults to undefined)</description>
            </attribute>
            <attribute name="method" type="String" readonly="False">
              <description>The default HTTP method to be used for requests. Note that this is case-sensitive and should be all caps (defaults
to undefined; if not set but parms are present will use "POST," otherwise "GET.")</description>
            </attribute>
            <attribute name="timeout" type="Number" readonly="False">
              <description>The timeout in milliseconds to be used for requests. (defaults to 30000)</description>
            </attribute>
            <attribute name="url" type="String" readonly="False">
              <description>The default URL to be used for requests to the server. (defaults to undefined)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="serializeForm" returns="String">
              <description>Serialize the passed form into a url encoded string</description>
              <params>
                <param name="form" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.BoxComponent" private="True" extends="Ext.Component">
          <description>Base class for any visual Ext.Component that uses a box container.  BoxComponent provides automatic box
model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All
container classes should subclass BoxComponent so that they will work consistently when nested within other Ext
layout containers.
A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing
element, or one that is created to your specifications at render time. Usually, to participate in layouts,
a Component will need to be a BoxComponent in order to have its width and height managed.
To use a pre-existing element as a BoxComponent, configure it so that you preset the el property to the
element to reference:var pageHeader = new Ext.BoxComponent({
    el: 'my-header-div'
});
This may then be added to a Container as a child item.
To create a BoxComponent based around a HTML element to be created at render time, use the
autoEl config option which takes the form of a
DomHelper specification:var myImage = new Ext.BoxComponent({
    autoEl: {
        tag: 'img',
        src: '/images/my-image.jpg'
    }
});</description>
          <functions>
            <function name="BoxComponent" returns="BoxComponent">
              <description>
              </description>
              <params>
                <param name="config" type="Ext.Element/String/Object" optional="False">
                  <description>The configuration options.</description>
                </param>
              </params>
            </function>
            <function name="getBox" returns="Object">
              <description>Gets the current box measurements of the component's underlying element.</description>
              <params>
                <param name="local" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPosition" returns="Array">
              <description>Gets the current XY position of the component's underlying element.</description>
              <params>
                <param name="local" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSize" returns="Object">
              <description>Gets the current size of the component's underlying element.</description>
            </function>
            <function name="setHeight" returns="Ext.BoxComponent">
              <description>Sets the height of the component.  This method fires the resize event.</description>
              <params>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPagePosition" returns="Ext.BoxComponent">
              <description>Sets the page XY position of the component.  To set the left and top instead, use setPosition.
This method fires the move event.</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPosition" returns="Ext.BoxComponent">
              <description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description>
              <params>
                <param name="left" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="top" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSize" returns="Ext.BoxComponent">
              <description>Sets the width and height of the component.  This method fires the resize event.  This method can accept
either width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.</description>
              <params>
                <param name="width" type="Number/Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setWidth" returns="Ext.BoxComponent">
              <description>Sets the width of the component.  This method fires the resize event.</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="syncSize" returns="Ext.BoxComponent">
              <description>Force the component's size to recalculate based on the underlying element's current height and width.</description>
            </function>
            <function name="updateBox" returns="Ext.BoxComponent">
              <description>Sets the current box measurements of the component's underlying element.</description>
              <params>
                <param name="box" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Button" private="True" extends="Ext.Component">
          <description>Simple Button class</description>
          <attributes>
            <attribute name="disabled" type="Boolean" readonly="True">
              <description>Read-only. True if this button is disabled</description>
            </attribute>
            <attribute name="hidden" type="Boolean" readonly="True">
              <description>Read-only. True if this button is hidden</description>
            </attribute>
            <attribute name="ownerCt" type="Ext.Panel" readonly="True">
              <description>The Button's owner Ext.Panel (defaults to undefined, and is set automatically when
the Button is added to a container).  Read-only.</description>
            </attribute>
            <attribute name="pressed" type="Boolean" readonly="True">
              <description>Read-only. True if this button is pressed (only if enableToggle = true)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Button" returns="Button">
              <description>Create a new button</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Focus the button</description>
            </function>
            <function name="getText" returns="String">
              <description>Gets the text for this button</description>
            </function>
            <function name="hasVisibleMenu" returns="Boolean">
              <description>Returns true if the button has a menu and it is visible</description>
            </function>
            <function name="hideMenu" returns="void">
              <description>Hide this button's menu (if it has one)</description>
            </function>
            <function name="initComponent" returns="void">
              <description>
              </description>
            </function>
            <function name="setHandler" returns="void">
              <description>Assigns this button's click handler</description>
              <params>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setIconClass" returns="void">
              <description>Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
the value of the iconCls config internally.</description>
              <params>
                <param name="cls" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setText" returns="void">
              <description>Sets this button's text</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showMenu" returns="void">
              <description>Show this button's menu (if it has one)</description>
            </function>
            <function name="toggle" returns="void">
              <description>If a state it passed, it becomes the pressed state otherwise the current state is toggled.</description>
              <params>
                <param name="state" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.ColorPalette" private="True" extends="Ext.Component">
          <description>Simple color palette class for choosing colors.  The palette can be rendered to any container.
Here's an example of typical usage:
var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color
cp.render('my-div');

cp.on('select', function(palette, selColor){
    // do something with selColor
});</description>
          <attributes>
            <attribute name="colors" type="Array" readonly="False">
              <description>An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number
of colors, and each hex code should be unique.  The width of the palette is controlled via CSS by adjusting
the width property of the 'x-color-palette' class (or assigning a custom class), so you can balance the number
of colors with the width setting until the box is symmetrical.
You can override individual colors if needed:
var cp = new Ext.ColorPalette();
cp.colors[0] = "FF0000";  // change the first box to red

Or you can provide a custom array of your own for complete control:
var cp = new Ext.ColorPalette();
cp.colors = ["000000", "993300", "333300"];</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ColorPalette" returns="ColorPalette">
              <description>Create a new ColorPalette</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="select" returns="void">
              <description>Selects the specified color in the palette (fires the select event)</description>
              <params>
                <param name="color" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Component" private="True" extends="Ext.util.Observable">
          <description>Base class for all Ext components.  All subclasses of Component can automatically participate in the standard
Ext component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show
and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any Ext.Container and
to be automatically registered with the Ext.ComponentMgr so that it can be referenced at any time via
Ext.getCmp.  All visual widgets that require rendering into a layout should subclass Component (or
Ext.BoxComponent if managed box model handling is required).
Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
xtype like getXType and isXType. This is the list of all valid xtypes:
xtype            Class
-------------    ------------------
box              Ext.BoxComponent
button           Ext.Button
colorpalette     Ext.ColorPalette
component        Ext.Component
container        Ext.Container
cycle            Ext.CycleButton
dataview         Ext.DataView
datepicker       Ext.DatePicker
editor           Ext.Editor
editorgrid       Ext.grid.EditorGridPanel
grid             Ext.grid.GridPanel
paging           Ext.PagingToolbar
panel            Ext.Panel
progress         Ext.ProgressBar
propertygrid     Ext.grid.PropertyGrid
slider           Ext.Slider
splitbutton      Ext.SplitButton
statusbar        Ext.StatusBar
tabpanel         Ext.TabPanel
treepanel        Ext.tree.TreePanel
viewport         Ext.Viewport
window           Ext.Window

Toolbar components
---------------------------------------
toolbar          Ext.Toolbar
tbbutton         Ext.Toolbar.Button
tbfill           Ext.Toolbar.Fill
tbitem           Ext.Toolbar.Item
tbseparator      Ext.Toolbar.Separator
tbspacer         Ext.Toolbar.Spacer
tbsplit          Ext.Toolbar.SplitButton
tbtext           Ext.Toolbar.TextItem

Form components
---------------------------------------
form             Ext.FormPanel
checkbox         Ext.form.Checkbox
combo            Ext.form.ComboBox
datefield        Ext.form.DateField
field            Ext.form.Field
fieldset         Ext.form.FieldSet
hidden           Ext.form.Hidden
htmleditor       Ext.form.HtmlEditor
label            Ext.form.Label
numberfield      Ext.form.NumberField
radio            Ext.form.Radio
textarea         Ext.form.TextArea
textfield        Ext.form.TextField
timefield        Ext.form.TimeField
trigger          Ext.form.TriggerField</description>
          <attributes>
            <attribute name="disabled" type="Boolean" readonly="True">
              <description>True if this component is disabled. Read-only.</description>
            </attribute>
            <attribute name="hidden" type="Boolean" readonly="True">
              <description>True if this component is hidden. Read-only.</description>
            </attribute>
            <attribute name="initialConfig" type="Object" readonly="True">
              <description>This Component's initial configuration specification. Read-only.</description>
            </attribute>
            <attribute name="ownerCt" type="Ext.Container" readonly="True">
              <description>The component's owner Ext.Container (defaults to undefined, and is set automatically when
the component is added to a container).  Read-only.</description>
            </attribute>
            <attribute name="rendered" type="Boolean" readonly="True">
              <description>True if this component has been rendered. Read-only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Component" returns="Component">
              <description>
              </description>
              <params>
                <param name="config" type="Ext.Element/String/Object" optional="False">
                  <description>The configuration options. If an element is passed, it is set as the internal
element and its id used as the component id. If a string is passed, it is assumed to be the id of an existing element
and is used as the component id. Otherwise, it is assumed to be a standard config object and is applied to the component.</description>
                </param>
              </params>
            </function>
            <function name="addClass" returns="void">
              <description>Adds a CSS class to the component's underlying element.</description>
              <params>
                <param name="cls" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyToMarkup" returns="void">
              <description>Apply this component to existing markup that is valid. With this function, no call to render() is required.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cloneConfig" returns="Ext.Component">
              <description>Clone the current component using the original config values passed into this instance by default.</description>
              <params>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys this component by purging any event listeners, removing the component's element from the DOM,
removing the component from its Ext.Container (if applicable) and unregistering it from
Ext.ComponentMgr.  Destruction is generally handled automatically by the framework and this method
should usually not need to be called directly.</description>
            </function>
            <function name="disable" returns="Ext.Component">
              <description>Disable this component.</description>
            </function>
            <function name="enable" returns="Ext.Component">
              <description>Enable this component.</description>
            </function>
            <function name="findParentBy" returns="Ext.Container">
              <description>Find a container above this component at any level by a custom function. If the passed function returns
true, the container will be returned. The passed function is called with the arguments (container, this component).</description>
              <params>
                <param name="fcn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findParentByType" returns="Ext.Container">
              <description>Find a container above this component at any level by xtype or class</description>
              <params>
                <param name="xtype" type="String/Class" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="Ext.Component">
              <description>Try to focus this component.</description>
              <params>
                <param name="selectText" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="delay" type="Boolean/Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Ext.Element">
              <description>Returns the underlying Ext.Element.</description>
            </function>
            <function name="getId" returns="String">
              <description>Returns the id of this component.</description>
            </function>
            <function name="getItemId" returns="String">
              <description>Returns the item id of this component.</description>
            </function>
            <function name="getXType" returns="String">
              <description>Gets the xtype for this component as registered with Ext.ComponentMgr. For a list of all
available xtypes, see the Ext.Component header. Example usage:
var t = new Ext.form.TextField();
alert(t.getXType());  // alerts 'textfield'</description>
            </function>
            <function name="getXTypes" returns="String">
              <description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:

var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description>
            </function>
            <function name="hide" returns="Ext.Component">
              <description>Hide this component.</description>
            </function>
            <function name="isVisible" returns="void">
              <description>Returns true if this component is visible.</description>
            </function>
            <function name="isXType" returns="void">
              <description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description>
              <params>
                <param name="xtype" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="shallow" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeClass" returns="void">
              <description>Removes a CSS class from the component's underlying element.</description>
              <params>
                <param name="cls" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="void">
              <description>Render this Component into the passed HTML element.
If you are using a Container object to house this Component, then
do not use the render method.
A Container's child Components are rendered by that Container's
layout manager when the Container is first rendered.
Certain layout managers allow dynamic addition of child components. Those that do
include Ext.layout.CardLayout, Ext.layout.AnchorLayout,
Ext.layout.FormLayout, Ext.layout.TableLayout.
If the Container is already rendered when a new child Component is added, you may need to call
the Container's doLayout to refresh the view which causes any
unrendered child Components to be rendered. This is required so that you can add multiple
child components if needed while only refreshing the layout once.
When creating complex UIs, it is important to remember that sizing and positioning
of child items is the responsibility of the Container's layout manager.
If you expect child items to be sized in response to user interactions, you must
configure the Container with a layout manager which creates and manages the type of layout you
have in mind.
Omitting the Container's layout config means that a basic
layout manager is used which does nothing but render child components sequentially into the
Container. No sizing or positioning will be performed in this situation.</description>
              <params>
                <param name="container" type="Element/HTMLElement/String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="position" type="String/Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDisabled" returns="void">
              <description>Convenience function for setting disabled/enabled by boolean.</description>
              <params>
                <param name="disabled" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setVisible" returns="Ext.Component">
              <description>Convenience function to hide or show this component by boolean.</description>
              <params>
                <param name="visible" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="Ext.Component">
              <description>Show this component.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.ComponentMgr" private="True" extends="Object">
          <description>Provides a registry of all Components (instances of Ext.Component or any subclass
thereof) on a page so that they can be easily accessed by component id (see get, or
the convenience method Ext.getCmp).
This object also provides a registry of available Component classes
indexed by a mnemonic code known as the Component's xtype.
The xtype provides a way to avoid instantiating child Components
when creating a full, nested config object for a complete Ext page.
A child Component may be specified simply as a config object
as long as the correct xtype is specified so that if and when the Component
needs rendering, the correct type can be looked up for lazy instantiation.
For a list of all available xtypes, see Ext.Component.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="all" type="MixedCollection" readonly="True">
              <description>The MixedCollection used internally for the component cache. An example usage may be subscribing to
events on the MixedCollection to monitor addition or removal.  Read-only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="create" returns="Ext.Component">
              <description>Creates a new Component from the specified config object using the
config object's xtype to determine the class to instantiate.</description>
              <params>
                <param name="{Object}" type="config" optional="False">
                  <description>A configuration object for the Component you wish to create.</description>
                </param>
                <param name="{Constructor}" type="defaultType" optional="False">
                  <description>A configuration object for the Component you wish to create.</description>
                </param>
              </params>
            </function>
            <function name="get" returns="Ext.Component">
              <description>Returns a component by id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onAvailable" returns="void">
              <description>Registers a function that will be called when a specified component is added to ComponentMgr</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>The scope of the callback</description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>The scope of the callback</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The scope of the callback</description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Registers a component.</description>
              <params>
                <param name="c" type="Ext.Component" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerType" returns="void">
              <description>Registers a new Component constructor, keyed by a new
Ext.Component.xtype.
Use this method to register new subclasses of Ext.Component so
that lazy instantiation may be used when specifying child Components.
see Ext.Container.items</description>
              <params>
                <param name="xtype" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cls" type="Constructor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>Unregisters a component.</description>
              <params>
                <param name="c" type="Ext.Component" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.CompositeElement" private="True" extends="Object">
          <description>Standard composite class. Creates a Ext.Element for every element in the collection.

NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.

All methods return this and can be chained.
 var els = Ext.select("#some-el div.some-class", true);
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class', true);

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);</description>
          <functions>
            <function name="add" returns="CompositeElement">
              <description>Adds elements to this composite.</description>
              <params>
                <param name="els" type="String/Array" optional="False">
                  <description>A string CSS selector, an array of elements or an element</description>
                </param>
              </params>
            </function>
            <function name="clear" returns="void">
              <description>Removes all elements.</description>
            </function>
            <function name="contains" returns="Boolean">
              <description>Returns true if this composite contains the passed element</description>
              <params>
                <param name="{Mixed}" type="el" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="each" returns="CompositeElement">
              <description>Calls the passed function passing (el, this, index) for each element in this composite.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fill" returns="CompositeElement">
              <description>Clears this composite and adds the elements returned by the passed selector.</description>
              <params>
                <param name="els" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter" returns="CompositeElement">
              <description>Filters this composite to only elements that match the passed selector.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="first" returns="Ext.Element">
              <description>Returns the first Element</description>
            </function>
            <function name="getCount" returns="Number">
              <description>Returns the number of elements in this composite</description>
            </function>
            <function name="indexOf" returns="Number">
              <description>Find the index of the passed element within the composite collection.</description>
              <params>
                <param name="{Mixed}" type="el" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="item" returns="Ext.Element">
              <description>Returns the Element object at the specified index</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="last" returns="Ext.Element">
              <description>Returns the last Element</description>
            </function>
            <function name="removeElement" returns="CompositeElement">
              <description>Removes the specified element(s).</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="removeDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceElement" returns="CompositeElement">
              <description>Replaces the specified element with the passed element.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="replacement" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="domReplace" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.CompositeElementLite" private="True" extends="Ext.CompositeElement">
          <description>Flyweight composite class. Reuses the same Ext.Element for element operations.
 var els = Ext.select("#some-el div.some-class");
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class');

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);
NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.</description>
          <functions>
            <function name="each" returns="CompositeElement">
              <description>Calls the passed function passing (el, this, index) for each element in this composite. The element
passed is the flyweight (shared) Ext.Element instance, so if you require a
a reference to the dom node, use el.dom.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>The function to call</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The function to call</description>
                </param>
              </params>
            </function>
            <function name="item" returns="Ext.Element">
              <description>Returns a flyweight Element of the dom element object at the specified index</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Container" private="True" extends="Ext.BoxComponent">
          <description>Base class for any Ext.BoxComponent that can contain other components. The most commonly
used Container classes are Ext.Panel, Ext.Window and Ext.TabPanel, but you can
create a lightweight Container to encapsulate an HTML element that is created to your
specifications at render time by using the autoEl config option
which takes the form of a DomHelper specification. If you do not need
the capabilities offered by the above mentioned classes, for instance embedded
column layouts inside FormPanels, then this is a useful technique.
The code below illustrates both how to explicitly create a Container, and how to implicitly
create one using the 'container' xtype:var embeddedColumns = new Ext.Container({
    autoEl: {},
    layout: 'column',
    defaults: {
        xtype: 'container',
        autoEl: {},
        layout: 'form',
        columnWidth: 0.5,
        style: {
            padding: '10px'
        }
    },
    items: [{
        items: {
            xtype: 'datefield',
            name: 'startDate',
            fieldLabel: 'Start date'
        }
    }, {
        items: {
            xtype: 'datefield',
            name: 'endDate',
            fieldLabel: 'End date'
        }
    }]
});
Containers handle the basic behavior of containing items, namely adding, inserting and removing them.
The specific layout logic required to visually render contained items is delegated to any one of the different
layout classes available.
When either specifying child items of a Container, or dynamically adding components to a Container,
remember to consider how you wish the Container to arrange those child elements, and whether those child elements
need to be sized using one of Ext's built-in layout schemes.
By default, Containers use the ContainerLayout scheme. This simply renders
child components, appending them one after the other inside the Container, and does not apply any sizing at all.
This is a common source of confusion when widgets like GridPanels or TreePanels are added to Containers for
which no layout has been specified. If a Container is left to use the ContainerLayout scheme, none of its child
components will be resized, or changed in any way when the Container is resized.
A very common example of this is where a developer will attempt to add a GridPanel to a TabPanel by wrapping
the GridPanel inside a wrapping Panel and add that wrapping Panel to the TabPanel. This misses the point that
Ext's inheritance means that a GridPanel is a Component which can be added unadorned into a Container. If
that wrapping Panel has no layout configuration, then the GridPanel will not be sized as expected.
Below is an example of adding a newly created GridPanel to a TabPanel. A TabPanel uses Ext.layout.CardLayout
as its layout manager which means all its child items are sized to fit exactly into its client area. The following
code requires prior knowledge of how to create GridPanels. See Ext.grid.GridPanel, Ext.data.Store
and Ext.data.JsonReader as well as the grid examples in the Ext installation's examples/grid
directory.//  Create the GridPanel.
myGrid = new Ext.grid.GridPanel({
    store: myStore,
    columns: myColumnModel,
    title: 'Results',
});

myTabPanel.add(myGrid);
myTabPanel.setActiveTab(myGrid);</description>
          <attributes>
            <attribute name="items" type="MixedCollection" readonly="False">
              <description>The collection of components in this container as a Ext.util.MixedCollection</description>
            </attribute>
          </attributes>
          <functions>
            <function name="add" returns="Ext.Component">
              <description>Adds a Component to this Container. Fires the beforeadd event before
adding, then fires the add event after the component has been added.
You will never call the render method of a child Component when using a Container.
Child Components are rendered by this Container's layout manager when
this Container is first rendered.
Certain layout managers allow dynamic addition of child components. Those that do
include Ext.layout.CardLayout, Ext.layout.AnchorLayout,
Ext.layout.FormLayout, Ext.layout.TableLayout.
If the Container is already rendered when add is called, you may need to call
doLayout to refresh the view which causes any unrendered child Components
to be rendered. This is required so that you can add multiple child components if needed
while only refreshing the layout once.
When creating complex UIs, it is important to remember that sizing and positioning
of child items is the responsibility of the Container's layout manager. If
you expect child items to be sized in response to user interactions, you must
specify a layout manager which creates and manages the type of layout you have in mind.
Omitting the layout config means that a basic layout manager is
used which does nothnig but render child components sequentially into the Container.
No sizing or positioning will be performed in this situation.</description>
              <params>
                <param name="component" type="Ext.Component/Object" optional="False">
                  <description>The Component to add.
Ext uses lazy rendering, and will only render the added Component should
it become necessary, that is: when the Container is layed out either on first render
or in response to a doLayout call.
A Component config object may be passed instead of an instantiated Component object.
The type of Component created from a config object is determined by the xtype
config property. If no xtype is configured, the Container's defaultType
is used.
For a list of all available xtypes, see Ext.Component.</description>
                </param>
              </params>
            </function>
            <function name="bubble" returns="void">
              <description>Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of
function call will be the scope provided or the current component. The arguments to the function
will be the args provided or the current component. If the function returns false at any point,
the bubble is stopped.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>(optional) The scope of the function (defaults to current node)</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) The scope of the function (defaults to current node)</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>(optional) The scope of the function (defaults to current node)</description>
                </param>
              </params>
            </function>
            <function name="cascade" returns="void">
              <description>Cascades down the component/container heirarchy from this component (called first), calling the specified function with
each component. The scope (this) of
function call will be the scope provided or the current component. The arguments to the function
will be the args provided or the current component. If the function returns false at any point,
the cascade is stopped on that branch.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>(optional) The args to call the function with (defaults to passing the current component)</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) The args to call the function with (defaults to passing the current component)</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>(optional) The args to call the function with (defaults to passing the current component)</description>
                </param>
              </params>
            </function>
            <function name="doLayout" returns="void">
              <description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description>
              <params>
                <param name="shallow" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="find" returns="Array">
              <description>Find a component under this container at any level by property</description>
              <params>
                <param name="prop" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findBy" returns="Array">
              <description>Find a component under this container at any level by a custom function. If the passed function returns
true, the component will be included in the results. The passed function is called with the arguments (component, this container).</description>
              <params>
                <param name="fcn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findById" returns="Ext.Component">
              <description>Find a component under this container at any level by id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findByType" returns="Array">
              <description>Find a component under this container at any level by xtype or class</description>
              <params>
                <param name="xtype" type="String/Class" optional="False">
                  <description>
                  </description>
                </param>
                <param name="shallow" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getComponent" returns="Ext.Component">
              <description>Gets a direct child Component by id, or by index.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLayout" returns="ContainerLayout">
              <description>Returns the layout currently in use by the container.  If the container does not currently have a layout
set, a default Ext.layout.ContainerLayout will be created and set as the container's layout.</description>
            </function>
            <function name="getLayoutTarget" returns="Ext.Element">
              <description>Returns the Element to be used to contain the child Components of this Container.
An implementation is provided which returns the Container's Element, but
if there is a more complex structure to a Container, this may be overridden to return
the element into which the layout renders child Components.</description>
            </function>
            <function name="insert" returns="Ext.Component">
              <description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="component" type="Ext.Component" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="Ext.Component">
              <description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description>
              <params>
                <param name="component" type="Component/String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="autoDestroy" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeAll" returns="Array">
              <description>Removes all components from this container.</description>
              <params>
                <param name="autoDestroy" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.CycleButton" private="True" extends="Ext.SplitButton">
          <description>A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements.  The button automatically
cycles through each menu item on click, raising the button's change event (or calling the button's
changeHandler function, if supplied) for the active menu item. Clicking on the arrow section of the
button displays the dropdown menu just like a normal SplitButton.  Example usage:
var btn = new Ext.CycleButton({
    showText: true,
    prependText: 'View as ',
    items: [{
        text:'text only',
        iconCls:'view-text',
        checked:true
    },{
        text:'HTML',
        iconCls:'view-html'
    }],
    changeHandler:function(btn, item){
        Ext.Msg.alert('Change View', item.text);
    }
});</description>
          <functions>
            <function name="CycleButton" returns="CycleButton">
              <description>Create a new split button</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="getActiveItem" returns="Ext.menu.CheckItem">
              <description>Gets the currently active menu item.</description>
            </function>
            <function name="setActiveItem" returns="void">
              <description>Sets the button's active menu item.</description>
              <params>
                <param name="item" type="Ext.menu.CheckItem" optional="False">
                  <description>
                  </description>
                </param>
                <param name="suppressEvent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggleSelected" returns="void">
              <description>This is normally called internally on button click, but can be called externally to advance the button's
active item programmatically to the next one in the menu.  If the current item is the last one in the menu
the active item will be set to the first item in the menu.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.ArrayReader" private="True" extends="Ext.data.JsonReader">
          <description>Data reader class to create an Array of Ext.data.Record objects from an Array.
Each element of that Array represents a row of data fields. The
fields are pulled into a Record object using as a subscript, the mapping property
of the field definition if it exists, or the field's ordinal position in the definition.

Example code:.
var Employee = Ext.data.Record.create([
    {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
    {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
]);
var myReader = new Ext.data.ArrayReader({
    id: 0                     // The subscript within row Array that provides an ID for the Record (optional)
}, Employee);

This would consume an Array like this:
[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]</description>
          <functions>
            <function name="ArrayReader" returns="ArrayReader">
              <description>Create a new ArrayReader</description>
              <params>
                <param name="meta" type="Object" optional="False">
                  <description>Metadata configuration options.</description>
                </param>
                <param name="recordType" type="Object" optional="False">
                  <description>Metadata configuration options.</description>
                </param>
              </params>
            </function>
            <function name="readRecords" returns="Object">
              <description>Create a data block containing Ext.data.Records from an Array.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Connection" private="True" extends="Ext.util.Observable">
          <description>The class encapsulates a connection to the page's originating domain, allowing requests to be made
either to a configured URL, or to a URL specified at request time.
Requests made by this class are asynchronous, and will return immediately. No data from
the server will be available to the statement immediately following the request call.
To process returned data, use a
success callback
in the request options object,
or an event listener.
File UploadsFile uploads are not performed using normal "Ajax" techniques, that
is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard
manner with the DOM &lt;form&gt; element temporarily modified to have its
target set to refer
to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document
but removed after the return data has been gathered.
The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
Content-Type header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.
Characters which are significant to an HTML parser must be sent as HTML entities, so encode
"&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.
The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a responseText property in order to conform to the
requirements of event handlers and callbacks.
Be aware that file upload packets are sent with the content type multipart/form
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</description>
          <functions>
            <function name="Connection" returns="Connection">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>a configuration object.</description>
                </param>
              </params>
            </function>
            <function name="abort" returns="void">
              <description>Aborts any outstanding request.</description>
              <params>
                <param name="transactionId" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLoading" returns="Boolean">
              <description>Determine whether this object has a request outstanding.</description>
              <params>
                <param name="transactionId" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="request" returns="Number">
              <description>Sends an HTTP request to a remote server.
Important: Ajax server requests are asynchronous, and this call will
return before the response has been received. Process any returned data
in a callback function.
To execute a callback function in the correct scope, use the scope option.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.DataProxy" private="True" extends="Ext.util.Observable">
          <description>This class is an abstract base class for implementations which provide retrieval of
unformatted data objects.

DataProxy implementations are usually used in conjunction with an implementation of Ext.data.DataReader
(of the appropriate type which knows how to parse the data object) to provide a block of
Ext.data.Records to an Ext.data.Store.

Custom implementations must implement the load method as described in
Ext.data.HttpProxy.load.</description>
        </interface>
        <interface name="Ext.data.DataReader" private="True" extends="Object">
          <description>Abstract base class for reading structured data from a data source and converting
it into an object containing Ext.data.Record objects and metadata for use
by an Ext.data.Store.  This class is intended to be extended and should not
be created directly. For existing implementations, see Ext.data.ArrayReader,
Ext.data.JsonReader and Ext.data.XmlReader.</description>
          <attributes>
            <attribute name="meta" type="Mixed" readonly="False">
              <description>This DataReader's configured metadata as passed to the constructor.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DataReader" returns="DataReader">
              <description>Create a new DataReader</description>
              <params>
                <param name="meta" type="Object" optional="False">
                  <description>Metadata configuration options (implementation-specific)</description>
                </param>
                <param name="recordType" type="Object" optional="False">
                  <description>Metadata configuration options (implementation-specific)</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Field" private="True" extends="Object">
          <description>This class encpasulates the field definition information specified in the field definition objects
passed to Ext.data.Record.create.
Developers do not need to instantiate this class. Instances are created by Ext.data.Record.create
and cached in the fields property of the created Record constructor's prototype.</description>
        </interface>
        <interface name="Ext.data.GroupingStore" private="True" extends="Ext.data.Store">
          <description>A specialized store implementation that provides for grouping records by one of the available fields. This
is usually used in conjunction with an Ext.grid.GroupingView to proved the data model for
a grouped GridPanel.</description>
          <functions>
            <function name="GroupingStore" returns="GroupingStore">
              <description>Creates a new GroupingStore.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A config object containing the objects needed for the Store to access data,
and read the data into Records.</description>
                </param>
              </params>
            </function>
            <function name="clearGrouping" returns="void">
              <description>Clears any existing grouping and refreshes the data using the default sort.</description>
            </function>
            <function name="groupBy" returns="void">
              <description>Groups the data by the specified field.</description>
              <params>
                <param name="field" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="forceRegroup" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.HttpProxy" private="True" extends="Ext.data.DataProxy">
          <description>An implementation of Ext.data.DataProxy that reads a data object from a Connection object
configured to reference a certain URL.

Note that this class cannot be used to retrieve data from a domain other than the domain
from which the running page was served.

For cross-domain access to remote data, use a ScriptTagProxy.

Be aware that to enable the browser to parse an XML document, the server must set
the Content-Type header in the HTTP response to "text/xml".</description>
          <attributes>
            <attribute name="conn" type="Object" readonly="False">
              <description>The Connection object (Or options parameter to Ext.Ajax.request) which this HttpProxy uses to make requests to the server.
Properties of this object may be changed dynamically to change the way data is requested.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="HttpProxy" returns="HttpProxy">
              <description>
              </description>
              <params>
                <param name="conn" type="Object" optional="False">
                  <description>an Ext.data.Connection object, or options parameter to Ext.Ajax.request.
If an options parameter is passed, the singleton Ext.Ajax object will be used to make the request.</description>
                </param>
              </params>
            </function>
            <function name="getConnection" returns="Connection">
              <description>Return the Ext.data.Connection object being used by this Proxy.</description>
            </function>
            <function name="load" returns="void">
              <description>Load data from the configured Ext.data.Connection, read the data object into
a block of Ext.data.Records using the passed Ext.data.DataReader implementation, and
process that block using the passed callback.</description>
              <params>
                <param name="params" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="reader" type="Ext.data.DataReader" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="arg" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.JsonReader" private="True" extends="Ext.data.DataReader">
          <description>Data reader class to create an Array of Ext.data.Record objects from a JSON response
based on mappings in a provided Ext.data.Record constructor.

Example code:
var Employee = Ext.data.Record.create([
    {name: 'firstname'},                  // Map the Record's "firstname" field to the row object's key of the same name
    {name: 'job', mapping: 'occupation'}  // Map the "job" field to the row object's "occupation" key
]);
var myReader = new Ext.data.JsonReader({
    totalProperty: "results",             // The property which contains the total dataset size (optional)
    root: "rows",                         // The property which contains an Array of row objects
    id: "id"                              // The property within each row object that provides an ID for the record (optional)
}, Employee);

This would consume a JSON object of the form:
{
    results: 2,
    rows: [
        { id: 1, firstname: 'Bill', occupation: 'Gardener' },         // a row object
        { id: 2, firstname: 'Ben' , occupation: 'Horticulturalist' }  // another row object
    ]
}
It is possible to change a JsonReader's metadata at any time by including a
metaData property in the data object. If this is detected in the
object, a Store object using this Reader will reconfigure
itself to use the newly provided field definition and fire its
metachange event. In
undergoing this change, the Store sets its sortInfo property
from the sortInfo property in the new metadata. Note that reconfiguring a Store
potentially invalidates objects which may refer to Fields or Records which no longer exist.
The metaData property may contain any of the configuration
options for this class. Additionally, it may contain a fields
property which the JsonReader will use as an argument to Ext.data.Record.create
to configure the layout of the Records which it will produce.
Using the metaData property, and the Store's metachange event,
it is possible to have a Store-driven control initialize itself. The metachange
event handler may interrogate the metaData property (which
may contain any user-defined properties needed) and the metaData.fields
property to perform any configuration required.
To use this facility to send the same data as the above example without
having to code the creation of the Record constructor, you would create the
JsonReader like this:var myReader = new Ext.data.JsonReader();
The first data packet from the server would configure the reader by
containing a metaData property as well as the data:{
    metaData: {
        totalProperty: 'results',
        root: 'rows',
        id: 'id',
        fields: [
            {name: 'name'},
            {name: 'occupation'}
        ]
    },
    results: 2,
    rows: [
        { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },
        { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' }
    ]
}</description>
          <attributes>
            <attribute name="jsonData" type="Object" readonly="False">
              <description>After any data loads, the raw JSON data is available for further custom processing.  If no data is
loaded or there is a load exception this property will be undefined.</description>
            </attribute>
            <attribute name="meta" type="Mixed" readonly="False">
              <description>This JsonReader's metadata as passed to the constructor, or as passed in
the last data packet's metaData property.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="JsonReader" returns="JsonReader">
              <description>Create a new JsonReader</description>
              <params>
                <param name="meta" type="Object" optional="False">
                  <description>Metadata configuration options.</description>
                </param>
                <param name="recordType" type="Object" optional="False">
                  <description>Metadata configuration options.</description>
                </param>
              </params>
            </function>
            <function name="read" returns="Object">
              <description>This method is only used by a DataProxy which has retrieved data from a remote server.</description>
              <params>
                <param name="response" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="readRecords" returns="Object">
              <description>Create a data block containing Ext.data.Records from a JSON object.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.JsonStore" private="True" extends="Ext.data.Store">
          <description>Small helper class to make creating Stores for remotely-loaded JSON data easier. JsonStore is pre-configured
with a built-in Ext.data.HttpProxy and Ext.data.JsonReader.  If you require some other proxy/reader
combination then you'll have to create a basic Ext.data.Store configured as needed.
var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
});
This would consume a returned object of the form:
{
    images: [
        {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
        {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
    ]
}
An object literal of this form could also be used as the data config option.
Note: Although they are not listed, this class inherits all of the config options of Store,
JsonReader.</description>
          <functions>
            <function name="JsonStore" returns="JsonStore">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.MemoryProxy" private="True" extends="Ext.data.DataProxy">
          <description>An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
to the Reader when its load method is called.</description>
          <functions>
            <function name="MemoryProxy" returns="MemoryProxy">
              <description>
              </description>
              <params>
                <param name="data" type="Object" optional="False">
                  <description>The data object which the Reader uses to construct a block of Ext.data.Records.</description>
                </param>
              </params>
            </function>
            <function name="load" returns="void">
              <description>Load data from the requested source (in this case an in-memory
data object passed to the constructor), read the data object into
a block of Ext.data.Records using the passed Ext.data.DataReader implementation, and
process that block using the passed callback.</description>
              <params>
                <param name="params" type="Object" optional="False">
                  <description>The Reader object which converts the data
object into a block of Ext.data.Records.</description>
                </param>
                <param name="reader" type="Ext.data.DataReader" optional="False">
                  <description>The Reader object which converts the data
object into a block of Ext.data.Records.</description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>The Reader object which converts the data
object into a block of Ext.data.Records.</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The Reader object which converts the data
object into a block of Ext.data.Records.</description>
                </param>
                <param name="arg" type="Object" optional="False">
                  <description>The Reader object which converts the data
object into a block of Ext.data.Records.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Node" private="True" extends="Ext.util.Observable">
          <description>
          </description>
          <attributes>
            <attribute name="attributes" type="Object" readonly="False">
              <description>The attributes supplied for the node. You can use this property to access any custom attributes you supplied.</description>
            </attribute>
            <attribute name="childNodes" type="Array" readonly="False">
              <description>All child nodes of this node.</description>
            </attribute>
            <attribute name="firstChild" type="Node" readonly="False">
              <description>The first direct child node of this node, or null if this node has no child nodes.</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The node id.</description>
            </attribute>
            <attribute name="lastChild" type="Node" readonly="False">
              <description>The last direct child node of this node, or null if this node has no child nodes.</description>
            </attribute>
            <attribute name="nextSibling" type="Node" readonly="False">
              <description>The node immediately following this node in the tree, or null if there is no sibling node.</description>
            </attribute>
            <attribute name="parentNode" type="Node" readonly="False">
              <description>The parent node for this node.</description>
            </attribute>
            <attribute name="previousSibling" type="Node" readonly="False">
              <description>The node immediately preceding this node in the tree, or null if there is no sibling node.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Node" returns="Node">
              <description>
              </description>
              <params>
                <param name="attributes" type="Object" optional="False">
                  <description>The attributes/config for the node</description>
                </param>
              </params>
            </function>
            <function name="appendChild" returns="Node">
              <description>Insert node(s) as the last child node of this node.</description>
              <params>
                <param name="node" type="Node/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="bubble" returns="void">
              <description>Bubbles up the tree from this node, calling the specified function with each node. The scope (this) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the bubble is stopped.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>(optional) The args to call the function with (default to passing the current node)</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) The args to call the function with (default to passing the current node)</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>(optional) The args to call the function with (default to passing the current node)</description>
                </param>
              </params>
            </function>
            <function name="cascade" returns="void">
              <description>Cascades down the tree from this node, calling the specified function with each node. The scope (this) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the cascade is stopped on that branch.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="contains" returns="Boolean">
              <description>Returns true if this node is an ancestor (at any point) of the passed node.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="eachChild" returns="void">
              <description>Iterates the child nodes of this node, calling the specified function with each node. The scope (this) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the iteration stops.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findChild" returns="Node">
              <description>Finds the first child that has the attribute with the specified value.</description>
              <params>
                <param name="attribute" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findChildBy" returns="Node">
              <description>Finds the first child by a custom function. The child matches if the function passed
returns true.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDepth" returns="Number">
              <description>Returns depth of this node (the root node has a depth of 0)</description>
            </function>
            <function name="getOwnerTree" returns="Tree">
              <description>Returns the tree this node is in.</description>
            </function>
            <function name="getPath" returns="String">
              <description>Returns the path for this node. The path can be used to expand or select this node programmatically.</description>
              <params>
                <param name="attr" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasChildNodes" returns="Boolean">
              <description>Returns true if this node has one or more child nodes, else false.</description>
            </function>
            <function name="indexOf" returns="Number">
              <description>Returns the index of a child node</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="Node">
              <description>Inserts the first node before the second node in this nodes childNodes collection.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="refNode" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isAncestor" returns="Boolean">
              <description>Returns true if the passed node is an ancestor (at any point) of this node.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isExpandable" returns="Boolean">
              <description>Returns true if this node has one or more child nodes, or if the expandable
node attribute is explicitly specified as true (see attributes), otherwise returns false.</description>
            </function>
            <function name="isFirst" returns="Boolean">
              <description>Returns true if this node is the first child of its parent</description>
            </function>
            <function name="isLast" returns="Boolean">
              <description>Returns true if this node is the last child of its parent</description>
            </function>
            <function name="isLeaf" returns="Boolean">
              <description>Returns true if this node is a leaf</description>
            </function>
            <function name="item" returns="Node">
              <description>Returns the child node at the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="Node">
              <description>Removes this node from it's parent</description>
            </function>
            <function name="removeChild" returns="Node">
              <description>Removes a child node from this node.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceChild" returns="Node">
              <description>Replaces one child node in this node with another.</description>
              <params>
                <param name="newChild" type="Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oldChild" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sort" returns="void">
              <description>Sorts this nodes children using the supplied sort function</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Record" private="True" extends="Object">
          <description>Instances of this class encapsulate both Record definition information, and Record
value information for use in Ext.data.Store objects, or any code which needs
to access Records cached in an Ext.data.Store object.
Constructors for this class are generated by passing an Array of field definition objects to create.
Instances are usually only created by Ext.data.Reader implementations when processing unformatted data
objects.
Note that an instance of a Record class may only belong to one Store at a time.
In order to copy data from one Store to another, use the copy method to create an exact
copy of the Record, and insert the new instance into the other Store.
When serializing a Record for submission to the server, be aware that it contains many private
properties, and also a reference to its owning Store which in turn holds references to its Records.
This means that a Record may not be encoded using Ext.util.JSON.encode. Instead, use the
data and id properties.
Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</description>
          <attributes>
            <attribute name="data" type="Object" readonly="False">
              <description>An object hash representing the data for this Record. Every field name in the Record definition
is represented by a property of that name in this object. Note that unless you specified a field
with name "id" in the Record definition, this will not contain an id property.</description>
            </attribute>
            <attribute name="dirty" type="Boolean" readonly="False">
              <description>Readonly flag - true if this Record has been modified.</description>
            </attribute>
            <attribute name="fields" type="Ext.util.MixedCollection" readonly="True">
              <description>This property is stored in the Record definition's prototype
A MixedCollection containing the defined Fields for this Record.  Read-only.</description>
            </attribute>
            <attribute name="id" type="Object" readonly="False">
              <description>The unique ID of the Record as specified at construction time.</description>
            </attribute>
            <attribute name="modified" type="Object" readonly="False">
              <description>This object contains a key and value storing the original values of all modified fields or is null if no fields have been modified.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Record" returns="Record">
              <description>This constructor should not be used to create Record objects. Instead, use the constructor generated by
create. The parameters are the same.</description>
              <params>
                <param name="data" type="Array" optional="False">
                  <description>An object, the properties of which provide values for the new Record's fields.</description>
                </param>
                <param name="id" type="Object" optional="False">
                  <description>An object, the properties of which provide values for the new Record's fields.</description>
                </param>
              </params>
            </function>
            <function name="beginEdit" returns="void">
              <description>Begin an edit. While in edit mode, no events are relayed to the containing store.</description>
            </function>
            <function name="cancelEdit" returns="void">
              <description>Cancels all changes made in the current edit operation.</description>
            </function>
            <function name="commit" returns="void">
              <description>Usually called by the Ext.data.Store which owns the Record.
Commits all changes made to the Record since either creation, or the last commit operation.

Developers should subscribe to the Ext.data.Store.update event to have their code notified
of commit operations.</description>
              <params>
                <param name="silent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="copy" returns="Record">
              <description>Creates a copy of this Record.</description>
              <params>
                <param name="id" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="create" returns="function">
              <description>&lt;static&gt; Generate a constructor for a specific Record layout.</description>
              <params>
                <param name="o" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="endEdit" returns="void">
              <description>End an edit. If any data was modified, the containing store is notified.</description>
            </function>
            <function name="get" returns="Object">
              <description>Get the value of the named field.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getChanges" returns="Object">
              <description>Gets a hash of only the fields that have been modified since this Record was created or commited.</description>
            </function>
            <function name="isModified" returns="Boolean">
              <description>Returns true if the field passed has been modified since the load or last commit.</description>
              <params>
                <param name="fieldName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reject" returns="void">
              <description>Usually called by the Ext.data.Store which owns the Record.
Rejects all changes made to the Record since either creation, or the last commit operation.
Modified fields are reverted to their original values.

Developers should subscribe to the Ext.data.Store.update event to have their code notified
of reject operations.</description>
              <params>
                <param name="silent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="void">
              <description>Set the named field to the specified value.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.ScriptTagProxy" private="True" extends="Ext.data.DataProxy">
          <description>An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
other than the originating domain of the running page.

Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
of the running page, you must use this class, rather than HttpProxy.

The content passed back from a server resource requested by a ScriptTagProxy must be executable JavaScript
source code because it is used as the source inside a &lt;script&gt; tag.

In order for the browser to process the returned data, the server must wrap the data object
with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
depending on whether the callback name was passed:

boolean scriptTag = false;
String cb = request.getParameter("callback");
if (cb != null) {
    scriptTag = true;
    response.setContentType("text/javascript");
} else {
    response.setContentType("application/x-json");
}
Writer out = response.getWriter();
if (scriptTag) {
    out.write(cb + "(");
}
out.print(dataBlock.toJsonString());
if (scriptTag) {
    out.write(");");
}</description>
          <functions>
            <function name="ScriptTagProxy" returns="ScriptTagProxy">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A configuration object.</description>
                </param>
              </params>
            </function>
            <function name="abort" returns="void">
              <description>Abort the current server request.</description>
            </function>
            <function name="load" returns="void">
              <description>Load data from the configured URL, read the data object into
a block of Ext.data.Records using the passed Ext.data.DataReader implementation, and
process that block using the passed callback.</description>
              <params>
                <param name="params" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="reader" type="Ext.data.DataReader" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
                <param name="arg" type="Object" optional="False">
                  <description>The function into which to pass the block of Ext.data.Records.
The function must be passed
The Record block object
The "arg" argument from the load function
A boolean success indicator</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.SimpleStore" private="True" extends="Ext.data.Store">
          <description>Small helper class to make creating Stores from Array data easier.</description>
          <functions>
            <function name="SimpleStore" returns="SimpleStore">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.SortTypes" private="True" extends="Object">
          <description>*This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="stripTagsRE" type="RegExp" readonly="False">
              <description>The regular expression used to strip tags</description>
            </attribute>
          </attributes>
          <functions>
            <function name="asDate" returns="Number">
              <description>Date sorting</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>The value being converted</description>
                </param>
              </params>
            </function>
            <function name="asFloat" returns="Float">
              <description>Float sorting</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="asInt" returns="Number">
              <description>Integer sorting</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="asText" returns="String">
              <description>Strips all HTML tags to sort on text only</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="asUCString" returns="String">
              <description>Case insensitive string</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="asUCText" returns="String">
              <description>Strips all HTML tags to sort on text only - Case insensitive</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="none" returns="Mixed">
              <description>Default sort that does nothing</description>
              <params>
                <param name="s" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Store" private="True" extends="Ext.util.Observable">
          <description>The Store class encapsulates a client side cache of Record
objects which provide input data for Components such as the GridPanel,
the ComboBox, or the DataView
A Store object uses its configured implementation of DataProxy
to access a data object unless you call loadData directly and pass in your data.
A Store object has no knowledge of the format of the data returned by the Proxy.
A Store object uses its configured implementation of DataReader
to create Record instances from the data object. These Records
are cached and made available through accessor functions.</description>
          <attributes>
            <attribute name="baseParams" type="Object" readonly="False">
              <description>An object containing properties which are used as parameters on any HTTP request.
This property can be changed after creating the Store to send different parameters.</description>
            </attribute>
            <attribute name="fields" type="Ext.util.MixedCollection" readonly="True">
              <description>A MixedCollection containing the defined Fields for the Records stored in this Store.  Read-only.</description>
            </attribute>
            <attribute name="lastOptions" type="Object" readonly="False">
              <description>Contains the last options object used as the parameter to the load method. See load
for the details of what this may contain. This may be useful for accessing any params which
were used to load the current Record cache.</description>
            </attribute>
            <attribute name="paramNames" type="Object" readonly="False">
              <description>An object containing properties which specify the names of the paging and
sorting parameters passed to remote servers when loading blocks of data. By default, this
object takes the following form:{
    start : "start",    // The parameter name which specifies the start row
    limit : "limit",    // The parameter name which specifies number of rows to return
    sort : "sort",      // The parameter name which specifies the column to sort on
    dir : "dir"         // The parameter name which specifies the sort direction
}
The server must produce the requested data block upon receipt of these parameter names.
If different parameter names are required, this property can be overriden using a configuration
property.
A PagingToolbar bound to this grid uses this property to determine
the parameter names to use in its requests.</description>
            </attribute>
            <attribute name="recordType" type="Function" readonly="True">
              <description>The Record constructor as supplied to (or created by) the Reader.  Read-only.
If the Reader was constructed by passing in an Array of field definition objects, instead of an created
Record constructor it will have created a constructor from that Array.
This property may be used to create new Records of the type held in this Store.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Store" returns="Store">
              <description>Creates a new Store.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A config object containing the objects needed for the Store to access data,
and read the data into Records.</description>
                </param>
              </params>
            </function>
            <function name="add" returns="void">
              <description>Add Records to the Store and fires the add event.</description>
              <params>
                <param name="records" type="Ext.data.Record[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addSorted" returns="void">
              <description>(Local sort only) Inserts the passed Record into the Store at the index where it
should go based on the current sort information.</description>
              <params>
                <param name="record" type="Ext.data.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearFilter" returns="void">
              <description>Revert to a view of the Record cache with no filtering applied.</description>
              <params>
                <param name="suppressEvent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collect" returns="Array">
              <description>Collects unique values for a particular dataIndex from this store.</description>
              <params>
                <param name="dataIndex" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="allowNull" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="bypassFilter" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="commitChanges" returns="void">
              <description>Commit all Records with outstanding changes. To handle updates for changes, subscribe to the
Store's "update" event, and perform updating when the third parameter is Ext.data.Record.COMMIT.</description>
            </function>
            <function name="each" returns="void">
              <description>Calls the specified function for each of the Records in the cache.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter" returns="void">
              <description>Filter the records by a specified property.</description>
              <params>
                <param name="field" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/RegExp" optional="False">
                  <description>
                  </description>
                </param>
                <param name="anyMatch" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="caseSensitive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filterBy" returns="void">
              <description>Filter by a function. The specified function will be called for each
Record in this Store. If the function returns true the Record is included,
otherwise it is filtered out.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="find" returns="Number">
              <description>Finds the index of the first matching record in this store by a specific property/value.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/RegExp" optional="False">
                  <description>
                  </description>
                </param>
                <param name="startIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="anyMatch" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="caseSensitive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findBy" returns="Number">
              <description>Find the index of the first matching Record in this Store by a function.
If the function returns true it is considered a match.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="startIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAt" returns="Ext.data.Record">
              <description>Get the Record at the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getById" returns="Ext.data.Record">
              <description>Get the Record with the specified id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCount" returns="Number">
              <description>Gets the number of cached records.
If using paging, this may not be the total size of the dataset. If the data object
used by the Reader contains the dataset size, then the getTotalCount function returns
the dataset size.</description>
            </function>
            <function name="getModifiedRecords" returns="Ext.data.Record[]">
              <description>Gets all records modified since the last commit.  Modified records are persisted across load operations
(e.g., during paging).</description>
            </function>
            <function name="getRange" returns="Ext.data.Record[]">
              <description>Returns a range of Records between specified indices.</description>
              <params>
                <param name="startIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="endIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSortState" returns="Object">
              <description>Returns an object describing the current sort state of this Store.</description>
            </function>
            <function name="getTotalCount" returns="Number">
              <description>Gets the total number of records in the dataset as returned by the server.
If using paging, for this to be accurate, the data object used by the Reader must contain
the dataset size. For remote data sources, this is provided by a query on the server.</description>
            </function>
            <function name="indexOf" returns="Number">
              <description>Get the index within the cache of the passed Record.</description>
              <params>
                <param name="record" type="Ext.data.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="indexOfId" returns="Number">
              <description>Get the index within the cache of the Record with the passed id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insert" returns="void">
              <description>Inserts Records into the Store at the given index and fires the add event.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="records" type="Ext.data.Record[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isFiltered" returns="Boolean">
              <description>Returns true if this store is currently filtered</description>
            </function>
            <function name="load" returns="Boolean">
              <description>Loads the Record cache from the configured Proxy using the configured Reader.
If using remote paging, then the first load call must specify the start
and limit properties in the options.params property to establish the initial
position within the dataset, and the number of Records to cache on each read from the Proxy.
It is important to note that for remote data sources, loading is asynchronous,
and this call will return before the new data has been loaded. Perform any post-processing
in a callback function, or in a "load" event handler.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="loadData" returns="void">
              <description>Loads data from a passed data block and fires the load event. A Reader which understands the format of the data
must have been configured in the constructor.</description>
              <params>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="add" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="query" returns="MixedCollection">
              <description>Query the records by a specified property.</description>
              <params>
                <param name="field" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/RegExp" optional="False">
                  <description>
                  </description>
                </param>
                <param name="anyMatch" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="caseSensitive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="queryBy" returns="MixedCollection">
              <description>Query the cached records in this Store using a filtering function. The specified function
will be called with each record in this Store. If the function returns true the record is
included in the results.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rejectChanges" returns="void">
              <description>Cancel outstanding changes on all changed records.</description>
            </function>
            <function name="reload" returns="void">
              <description>Reloads the Record cache from the configured Proxy using the configured Reader and
the options from the last load operation performed.
It is important to note that for remote data sources, loading is asynchronous,
and this call will return before the new data has been loaded. Perform any post-processing
in a callback function, or in a "load" event handler.</description>
              <params>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="void">
              <description>Remove a Record from the Store and fires the remove event.</description>
              <params>
                <param name="record" type="Ext.data.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeAll" returns="void">
              <description>Remove all Records from the Store and fires the clear event.</description>
            </function>
            <function name="removeAt" returns="void">
              <description>Remove a Record from the Store at the specified index. Fires the remove event.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDefaultSort" returns="void">
              <description>Sets the default sort column and order to be used by the next load operation.</description>
              <params>
                <param name="fieldName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dir" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sort" returns="void">
              <description>Sort the Records.
If remote sorting is used, the sort is performed on the server, and the cache is
reloaded. If local sorting is used, the cache is sorted internally.</description>
              <params>
                <param name="fieldName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dir" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sum" returns="Number">
              <description>Sums the value of property for each record between start and end and returns the result.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="start" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="end" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.Tree" private="True" extends="Ext.util.Observable">
          <description>Represents a tree data structure and bubbles all the events for its nodes. The nodes
in the tree have most standard DOM functionality.</description>
          <attributes>
            <attribute name="root" type="Node" readonly="False">
              <description>The root node for this tree</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Tree" returns="Tree">
              <description>
              </description>
              <params>
                <param name="root" type="Node" optional="True">
                  <description>(optional) The root node</description>
                </param>
              </params>
            </function>
            <function name="getNodeById" returns="Node">
              <description>Gets a node in this tree by its id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRootNode" returns="Node">
              <description>Returns the root node for this tree.</description>
            </function>
            <function name="setRootNode" returns="Node">
              <description>Sets the root node for this tree.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.data.XmlReader" private="True" extends="Ext.data.DataReader">
          <description>Data reader class to create an Array of Ext.data.Record objects from an XML document
based on mappings in a provided Ext.data.Record constructor.

Note that in order for the browser to parse a returned XML document, the Content-Type
header in the HTTP response must be set to "text/xml" or "application/xml".

Example code:
var Employee = Ext.data.Record.create([
   {name: 'name', mapping: 'name'},     // "mapping" property not needed if it's the same as "name"
   {name: 'occupation'}                 // This field will use "occupation" as the mapping.
]);
var myReader = new Ext.data.XmlReader({
   totalRecords: "results", // The element which contains the total dataset size (optional)
   record: "row",           // The repeated element which contains row information
   id: "id"                 // The element within the row that provides an ID for the record (optional)
}, Employee);

This would consume an XML file like this:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;dataset&gt;
 &lt;results&gt;2&lt;/results&gt;
 &lt;row&gt;
   &lt;id&gt;1&lt;/id&gt;
   &lt;name&gt;Bill&lt;/name&gt;
   &lt;occupation&gt;Gardener&lt;/occupation&gt;
 &lt;/row&gt;
 &lt;row&gt;
   &lt;id&gt;2&lt;/id&gt;
   &lt;name&gt;Ben&lt;/name&gt;
   &lt;occupation&gt;Horticulturalist&lt;/occupation&gt;
 &lt;/row&gt;
&lt;/dataset&gt;</description>
          <attributes>
            <attribute name="xmlData" type="XMLDocument" readonly="False">
              <description>After any data loads/reads, the raw XML Document is available for further custom processing.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="XmlReader" returns="XmlReader">
              <description>Create a new XmlReader.</description>
              <params>
                <param name="meta" type="Object" optional="False">
                  <description>Metadata configuration options</description>
                </param>
                <param name="recordType" type="Object" optional="False">
                  <description>Metadata configuration options</description>
                </param>
              </params>
            </function>
            <function name="read" returns="Object">
              <description>This method is only used by a DataProxy which has retrieved data from a remote server.</description>
              <params>
                <param name="response" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="readRecords" returns="Object">
              <description>Create a data block containing Ext.data.Records from an XML document.</description>
              <params>
                <param name="doc" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.DataView" private="True" extends="Ext.BoxComponent">
          <description>A mechanism for displaying data using custom layout templates and formatting. DataView uses an Ext.XTemplate
as its internal templating mechanism, and is bound to an Ext.data.Store
so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
mouseover, mouseout, etc. as well as a built-in selection model. In order to use these features, an itemSelector
config must be provided for the DataView to determine what nodes it will be working with.
The example below binds a DataView to a Ext.data.Store and renders it into an Ext.Panel.
var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: [
        'name', 'url',
        {name:'size', type: 'float'},
        {name:'lastmod', type:'date', dateFormat:'timestamp'}
    ]
});
store.load();

var tpl = new Ext.XTemplate(
    '&lt;tpl for="."&gt;',
        '&lt;div class="thumb-wrap" id="{name}"&gt;',
        '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
        '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
    '&lt;/tpl&gt;',
    '&lt;div class="x-clear"&gt;&lt;/div&gt;'
);

var panel = new Ext.Panel({
    id:'images-view',
    frame:true,
    width:535,
    autoHeight:true,
    collapsible:true,
    layout:'fit',
    title:'Simple DataView',

    items: new Ext.DataView({
        store: store,
        tpl: tpl,
        autoHeight:true,
        multiSelect: true,
        overClass:'x-view-over',
        itemSelector:'div.thumb-wrap',
        emptyText: 'No images to display'
    })
});
panel.render(document.body);</description>
          <functions>
            <function name="DataView" returns="DataView">
              <description>Create a new DataView</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="clearSelections" returns="void">
              <description>Clears all selections.</description>
              <params>
                <param name="suppressEvent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collectData" returns="Array">
              <description>Function which can be overridden which returns the data object passed to this
DataView's template to render the whole DataView.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for="."&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description>
              <params>
                <param name="{Array}" type="records" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselect" returns="void">
              <description>Deselects a node.</description>
              <params>
                <param name="node" type="HTMLElement/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findItemFromChild" returns="HTMLElement">
              <description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNode" returns="HTMLElement">
              <description>Gets a template node.</description>
              <params>
                <param name="nodeInfo" type="HTMLElement/String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNodes" returns="Array">
              <description>Gets a range nodes.</description>
              <params>
                <param name="start" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="end" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecord" returns="Record">
              <description>Gets a record from a node</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecords" returns="Array">
              <description>Gets an array of the records from an array of nodes</description>
              <params>
                <param name="nodes" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSelectedIndexes" returns="Array">
              <description>Gets the indexes of the selected nodes.</description>
            </function>
            <function name="getSelectedNodes" returns="Array">
              <description>Gets the currently selected nodes.</description>
            </function>
            <function name="getSelectedRecords" returns="Array">
              <description>Gets an array of the selected records</description>
            </function>
            <function name="getSelectionCount" returns="Number">
              <description>Gets the number of selected nodes.</description>
            </function>
            <function name="getStore" returns="Ext.data.Store">
              <description>Returns the store associated with this DataView.</description>
            </function>
            <function name="indexOf" returns="Number">
              <description>Finds the index of the passed node.</description>
              <params>
                <param name="nodeInfo" type="HTMLElement/String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns true if the passed node is selected, else false.</description>
              <params>
                <param name="node" type="HTMLElement/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="prepareData" returns="Array/Object">
              <description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's template to render each node.</description>
              <params>
                <param name="data" type="Array/Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="recordIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="record" type="Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refresh" returns="void">
              <description>Refreshes the view by reloading the data from the store and re-rendering the template.</description>
            </function>
            <function name="refreshNode" returns="void">
              <description>Refreshes an individual node's data from the store.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="void">
              <description>Selects a set of nodes.</description>
              <params>
                <param name="nodeInfo" type="Array/HTMLElement/String/Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="suppressEvent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRange" returns="void">
              <description>Selects a range of nodes. All nodes between start and end are selected.</description>
              <params>
                <param name="start" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="end" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStore" returns="void">
              <description>Changes the data store bound to this view and refreshes it.</description>
              <params>
                <param name="store" type="Store" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.DatePicker" private="True" extends="Ext.Component">
          <description>Simple date picker class.</description>
          <functions>
            <function name="DatePicker" returns="DatePicker">
              <description>Create a new DatePicker</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="Date">
              <description>Gets the current selected value of the date field</description>
            </function>
            <function name="setDisabledDates" returns="void">
              <description>Replaces any existing disabled dates with new values and refreshes the DatePicker.</description>
              <params>
                <param name="disabledDates" type="Array/RegExp" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDisabledDays" returns="void">
              <description>Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.</description>
              <params>
                <param name="disabledDays" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMaxDate" returns="void">
              <description>Replaces any existing maxDate with the new value and refreshes the DatePicker.</description>
              <params>
                <param name="value" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMinDate" returns="void">
              <description>Replaces any existing minDate with the new value and refreshes the DatePicker.</description>
              <params>
                <param name="value" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the value of the date field</description>
              <params>
                <param name="value" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DD" private="True" extends="Ext.dd.DragDrop">
          <description>A DragDrop implementation where the linked element follows the
mouse cursor during a drag.</description>
          <attributes>
            <attribute name="scroll" type="boolean" readonly="False">
              <description>When set to true, the utility automatically tries to scroll the browser
window when a drag and drop element is dragged near the viewport boundary.
Defaults to true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DD" returns="DD">
              <description>
              </description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>the id of the linked element</description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>the id of the linked element</description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>the id of the linked element</description>
                </param>
              </params>
            </function>
            <function name="alignElWithMouse" returns="void">
              <description>Sets the element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>the X coordinate of the mousedown or drag event</description>
                </param>
                <param name="iPageX" type="int" optional="False">
                  <description>the X coordinate of the mousedown or drag event</description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>the X coordinate of the mousedown or drag event</description>
                </param>
              </params>
            </function>
            <function name="applyConfig" returns="void">
              <description>Sets up config options specific to this class. Overrides
Ext.dd.DragDrop, but all versions of this method through the
inheritance chain are called</description>
            </function>
            <function name="autoOffset" returns="void">
              <description>Sets the pointer offset to the distance between the linked element's top
left corner and the location the element was clicked</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="b4Drag" returns="void">
              <description>Event that fires prior to the onDrag event.  Overrides
Ext.dd.DragDrop.</description>
            </function>
            <function name="b4MouseDown" returns="void">
              <description>Event that fires prior to the onMouseDown event.  Overrides
Ext.dd.DragDrop.</description>
            </function>
            <function name="cachePosition" returns="void">
              <description>Saves the most recent position so that we can reset the constraints and
tick marks on-demand.  We need to know this so that we can calculate the
number of pixels the element is offset from its original position.</description>
              <params>
                <param name="the" type="iPageX" optional="False">
                  <description>
                  </description>
                </param>
                <param name="the" type="iPageY" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDelta" returns="void">
              <description>Sets the pointer offset.  You can call this directly to force the
offset to be in a particular location (e.g., pass in 0,0 to set it
to the center of the object)</description>
              <params>
                <param name="iDeltaX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDeltaY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDragElPos" returns="void">
              <description>Sets the drag element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DDProxy" private="True" extends="Ext.dd.DD">
          <description>A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the "frame" element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description>
          <attributes>
            <attribute name="DDProxy.dragElId" type="String" readonly="False">
              <description>&lt;static&gt; The default drag frame div id</description>
            </attribute>
            <attribute name="centerFrame" type="boolean" readonly="False">
              <description>By default the frame is positioned exactly where the drag element is, so
we use the cursor offset provided by Ext.dd.DD.  Another option that works only if
you do not have constraints on the obj is to have the drag frame centered
around the cursor.  Set centerFrame to true for this effect.</description>
            </attribute>
            <attribute name="resizeFrame" type="boolean" readonly="False">
              <description>By default we resize the drag frame to be the same size as the element
we want to drag (this is to get the frame effect).  We can turn it off
if we want a different behavior.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DDProxy" returns="DDProxy">
              <description>
              </description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>the id of the linked html element</description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>the id of the linked html element</description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>the id of the linked html element</description>
                </param>
              </params>
            </function>
            <function name="createFrame" returns="void">
              <description>Creates the proxy element if it does not yet exist</description>
            </function>
            <function name="initFrame" returns="void">
              <description>Initialization for the drag frame element.  Must be called in the
constructor of all subclasses</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DDTarget" private="True" extends="Ext.dd.DragDrop">
          <description>A DragDrop implementation that does not move, but can be a drop
target.  You would get the same result by simply omitting implementation
for the event callbacks, but this way we reduce the processing cost of the
event listener and the callbacks.</description>
          <functions>
            <function name="DDTarget" returns="DDTarget">
              <description>
              </description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DragDrop" private="True" extends="Object">
          <description>Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver and onDragOut.
Up to three html elements can be associated with a DragDrop instance:

linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.
handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.
drag element: this represents the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in Ext.dd.DD.  setDragElId() lets you define
a separate element that would be moved, as in Ext.dd.DDProxy.


This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the "group1" group:
dd = new Ext.dd.DragDrop("div1", "group1");
Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
dd.onDragDrop = function(e, id) {
Â Â alert("dd was dropped on " + id);
}</description>
          <attributes>
            <attribute name="available" type="boolean" readonly="False">
              <description>The availabe property is false until the linked dom element is accessible.</description>
            </attribute>
            <attribute name="config" type="object" readonly="False">
              <description>Configuration attributes passed into the constructor</description>
            </attribute>
            <attribute name="defaultPadding" type="Object" readonly="False">
              <description>Provides default constraint padding to "constrainTo" elements (defaults to {left: 0, right:0, top:0, bottom:0}).</description>
            </attribute>
            <attribute name="groups" type="object" readonly="False">
              <description>The group defines a logical collection of DragDrop objects that are
related.  Instances only get events when interacting with other
DragDrop object in the same group.  This lets us define multiple
groups using a single DragDrop subclass if we want.</description>
            </attribute>
            <attribute name="hasOuterHandles" type="boolean" readonly="False">
              <description>By default, drags can only be initiated if the mousedown occurs in the
region the linked element is.  This is done in part to work around a
bug in some browsers that mis-report the mousedown if the previous
mouseup happened outside of the window.  This property is set to true
if outer handles are defined.</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The id of the element associated with this object.  This is what we
refer to as the "linked element" because the size and position of
this element is used to determine when the drag and drop objects have
interacted.</description>
            </attribute>
            <attribute name="invalidHandleClasses" type="Array" readonly="False">
              <description>An Array of CSS class names for elements to be considered in valid as drag handles.</description>
            </attribute>
            <attribute name="invalidHandleIds" type="Object" readonly="False">
              <description>An object who's property names identify the IDs of elements to be considered invalid as drag handles.
A non-null property value identifies the ID as invalid. For example, to prevent
dragging from being initiated on element ID "foo", use:{
    foo: true
}</description>
            </attribute>
            <attribute name="invalidHandleTypes" type="Object" readonly="False">
              <description>An object who's property names identify HTML tags to be considered invalid as drag handles.
A non-null property value identifies the tag as invalid. Defaults to the
following value which prevents drag operations from being initiated by &lt;a&gt; elements:{
    A: "A"
}</description>
            </attribute>
            <attribute name="isTarget" type="boolean" readonly="False">
              <description>By default, all instances can be a drop target.  This can be disabled by
setting isTarget to false.</description>
            </attribute>
            <attribute name="maintainOffset" type="boolean" readonly="False">
              <description>Maintain offsets when we resetconstraints.  Set to true when you want
the position of the element relative to its parent to stay the same
when the page changes</description>
            </attribute>
            <attribute name="moveOnly" type="boolean" readonly="False">
              <description>When set to true, other DD objects in cooperating DDGroups do not receive
notification events when this DD object is dragged over them. Defaults to false.</description>
            </attribute>
            <attribute name="padding" type="int[]" readonly="False">
              <description>The padding configured for this drag and drop object for calculating
the drop zone intersection with this object.</description>
            </attribute>
            <attribute name="primaryButtonOnly" type="boolean" readonly="False">
              <description>By default the drag and drop instance will only respond to the primary
button click (left button for a right-handed mouse).  Set to true to
allow drag and drop to start with any mouse click that is propogated
by the browser</description>
            </attribute>
            <attribute name="xTicks" type="int[]" readonly="False">
              <description>Array of pixel locations the element will snap to if we specified a
horizontal graduation/interval.  This array is generated automatically
when you define a tick interval.</description>
            </attribute>
            <attribute name="yTicks" type="int[]" readonly="False">
              <description>Array of pixel locations the element will snap to if we specified a
vertical graduation/interval.  This array is generated automatically
when you define a tick interval.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DragDrop" returns="DragDrop">
              <description>
              </description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>of the element that is linked to this instance</description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>of the element that is linked to this instance</description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>of the element that is linked to this instance</description>
                </param>
              </params>
            </function>
            <function name="addInvalidHandleClass" returns="void">
              <description>Lets you specify a css class of elements that will not initiate a drag</description>
              <params>
                <param name="cssClass" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addInvalidHandleId" returns="void">
              <description>Lets you to specify an element id for a child of a drag handle
that should not initiate a drag</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addInvalidHandleType" returns="void">
              <description>Allows you to specify a tag name that should not start a drag operation
when clicked.  This is designed to facilitate embedding links within a
drag handle that do something other than start the drag.</description>
              <params>
                <param name="tagName" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addToGroup" returns="void">
              <description>Add this instance to a group of related drag/drop objects.  All
instances belong to at least one group, and can belong to as many
groups as needed.</description>
              <params>
                <param name="{string}" type="sGroup" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyConfig" returns="void">
              <description>Applies the configuration parameters that were passed into the constructor.
This is supposed to happen at each level through the inheritance chain.  So
a DDProxy implentation will execute apply config on DDProxy, DD, and
DragDrop in order to get all of the parameters that are available in
each object.</description>
            </function>
            <function name="clearConstraints" returns="void">
              <description>Clears any constraints applied to this instance.  Also clears ticks
since they can't exist independent of a constraint at this time.</description>
            </function>
            <function name="clearTicks" returns="void">
              <description>Clears any tick interval defined for this instance</description>
            </function>
            <function name="constrainTo" returns="void">
              <description>Initializes the drag drop object's constraints to restrict movement to a certain element.
Usage:
 var dd = new Ext.dd.DDProxy("dragDiv1", "proxytest",
                { dragElId: "existingProxyDiv" });
 dd.startDrag = function(){
     this.constrainTo("parent-id");
 };
Or you can initalize it using the Ext.Element object:
 Ext.get("dragDiv1").initDDProxy("proxytest", {dragElId: "existingProxyDiv"}, {
     startDrag : function(){
         this.constrainTo("parent-id");
     }
 });</description>
              <params>
                <param name="constrainTo" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pad" type="Object/Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="inContent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="endDrag" returns="void">
              <description>Fired when we are done dragging the object</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDragEl" returns="HTMLElement">
              <description>Returns a reference to the actual element to drag.  By default this is
the same as the html element, but it can be assigned to another
element. An example of this can be found in Ext.dd.DDProxy</description>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Returns a reference to the linked element</description>
            </function>
            <function name="init" returns="void">
              <description>Sets up the DragDrop object.  Must be called in the constructor of any
Ext.dd.DragDrop subclass</description>
              <params>
                <param name="the" type="id" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initTarget" returns="void">
              <description>Initializes Targeting functionality only... the object does not
get a mousedown handler.</description>
              <params>
                <param name="the" type="id" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLocked" returns="boolean">
              <description>Returns true if this instance is locked, or the drag drop mgr is locked
(meaning that all drag/drop is disabled on the page.)</description>
            </function>
            <function name="isValidHandleChild" returns="boolean">
              <description>Checks the tag exclusion list to see if this click should be ignored</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lock" returns="void">
              <description>Lock this instance</description>
            </function>
            <function name="onAvailable" returns="void">
              <description>Override the onAvailable method to do what is needed after the initial
position was determined.</description>
            </function>
            <function name="onDrag" returns="void">
              <description>Abstract method called during the onMouseMove event while dragging an
object.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragDrop" returns="void">
              <description>Abstract method called when this item is dropped on another DragDrop
obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragEnter" returns="void">
              <description>Abstract method called when this element fist begins hovering over
another DragDrop obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragOut" returns="void">
              <description>Abstract method called when we are no longer hovering over an element</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragOver" returns="void">
              <description>Abstract method called when this element is hovering over another
DragDrop obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onInvalidDrop" returns="void">
              <description>Abstract method called when this item is dropped on an area with no
drop target</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseDown" returns="void">
              <description>Event handler that fires when a drag/drop obj gets a mousedown</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseUp" returns="void">
              <description>Event handler that fires when a drag/drop obj gets a mouseup</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeFromGroup" returns="void">
              <description>Remove's this instance from the supplied interaction group</description>
              <params>
                <param name="sGroup" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleClass" returns="void">
              <description>Unsets an invalid css class</description>
              <params>
                <param name="cssClass" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleId" returns="void">
              <description>Unsets an invalid handle id</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleType" returns="void">
              <description>Unsets an excluded tag name set by addInvalidHandleType</description>
              <params>
                <param name="tagName" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetConstraints" returns="void">
              <description>resetConstraints must be called if you manually reposition a dd element.</description>
              <params>
                <param name="maintainOffset" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDragElId" returns="void">
              <description>Allows you to specify that an element other than the linked element
will be moved with the cursor during a drag</description>
              <params>
                <param name="{string}" type="id" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHandleElId" returns="void">
              <description>Allows you to specify a child of the linked element that should be
used to initiate the drag operation.  An example of this would be if
you have a content div with text and links.  Clicking anywhere in the
content area would normally start the drag operation.  Use this method
to specify that an element inside of the content div is the element
that starts the drag operation.</description>
              <params>
                <param name="{string}" type="id" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setInitialPosition" returns="void">
              <description>Stores the initial placement of the linked element.</description>
              <params>
                <param name="diffX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="diffY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setOuterHandleElId" returns="void">
              <description>Allows you to set an element outside of the linked element as a drag
handle</description>
              <params>
                <param name="the" type="id" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPadding" returns="void">
              <description>Configures the padding for the target zone in px.  Effectively expands
(or reduces) the virtual object size for targeting calculations.
Supports css-style shorthand; if only one parameter is passed, all sides
will have that padding, and if only two are passed, the top and bottom
will have the first param, the left and right the second.</description>
              <params>
                <param name="iTop" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iBot" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setXConstraint" returns="void">
              <description>By default, the element can be dragged any place on the screen.  Use
this method to limit the horizontal travel of the element.  Pass in
0,0 for the parameters if you want to lock the drag to the y axis.</description>
              <params>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYConstraint" returns="void">
              <description>By default, the element can be dragged any place on the screen.  Set
this to limit the vertical travel of the element.  Pass in 0,0 for the
parameters if you want to lock the drag to the x axis.</description>
              <params>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="startDrag" returns="void">
              <description>Abstract method called after a drag/drop object is clicked
and the drag or mousedown time thresholds have beeen met.</description>
              <params>
                <param name="X" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="Y" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="string">
              <description>toString method</description>
            </function>
            <function name="unlock" returns="void">
              <description>Unlock this instace</description>
            </function>
            <function name="unreg" returns="void">
              <description>Remove all drag and drop hooks for this element</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DragDropMgr" private="True" extends="Object">
          <description>DragDropMgr is a singleton that tracks the element interaction for
all DragDrop items in the window.  Generally, you will not call
this class directly, but it does have helper methods that could
be useful in your DragDrop implementations.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="INTERSECT" type="int" readonly="False">
              <description>&lt;static&gt; In intersect mode, drag and drop interaction is defined by the
overlap of two or more drag and drop objects.</description>
            </attribute>
            <attribute name="POINT" type="int" readonly="False">
              <description>&lt;static&gt; In point mode, drag and drop interaction is defined by the
location of the cursor during the drag/drop</description>
            </attribute>
            <attribute name="clickPixelThresh" type="int" readonly="False">
              <description>&lt;static&gt; The number of pixels that the mouse needs to move after the
mousedown before the drag is initiated.  Default=3;</description>
            </attribute>
            <attribute name="clickTimeThresh" type="int" readonly="False">
              <description>&lt;static&gt; The number of milliseconds after the mousedown event to initiate the
drag if we don't get a mouseup event. Default=1000</description>
            </attribute>
            <attribute name="css" type="Object" readonly="False">
              <description>A reference to the style property</description>
            </attribute>
            <attribute name="el" type="Object" readonly="False">
              <description>The element</description>
            </attribute>
            <attribute name="id" type="Object" readonly="False">
              <description>The element id</description>
            </attribute>
            <attribute name="mode" type="int" readonly="False">
              <description>&lt;static&gt; The current drag and drop mode.  Default: POINT</description>
            </attribute>
            <attribute name="preventDefault" type="boolean" readonly="False">
              <description>&lt;static&gt; Flag to determine if we should prevent the default behavior of the
events we define. By default this is true, but this can be set to
false if you need the default behavior (not recommended)</description>
            </attribute>
            <attribute name="stopPropagation" type="boolean" readonly="False">
              <description>&lt;static&gt; Flag to determine if we should stop the propagation of the events
we generate. This is true by default but you may want to set it to
false if the html element contains other features that require the
mouse click.</description>
            </attribute>
            <attribute name="useCache" type="boolean" readonly="False">
              <description>&lt;static&gt; Set useCache to false if you want to force object the lookup of each
drag and drop linked element constantly during a drag.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getBestMatch" returns="DragDrop">
              <description>&lt;static&gt; Helper function for getting the best match from the list of drag
and drop objects returned by the drag and drop events when we are
in INTERSECT mode.  It returns either the first object that the
cursor is over, or the object that has the greatest overlap with
the dragged element.</description>
              <params>
                <param name="dds" type="DragDrop[]" optional="False">
                  <description>The array of drag and drop objects
targeted</description>
                </param>
              </params>
            </function>
            <function name="getCss" returns="Object">
              <description>Deprecated. &lt;static&gt; Returns the style property for the DOM element (i.e.,
document.getElById(id).style)</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDDById" returns="DragDrop">
              <description>&lt;static&gt; Returns the DragDrop instance for a given id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElement" returns="Object">
              <description>Deprecated. &lt;static&gt; Returns the actual DOM element</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLocation" returns="Ext.lib.Region">
              <description>&lt;static&gt; Returns a Region object containing the drag and drop element's position
and size, including the padding configured for it</description>
              <params>
                <param name="oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPosX" returns="int">
              <description>Deprecated. &lt;static&gt; Returns the X position of an html element</description>
              <params>
                <param name="the" type="el" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPosY" returns="int">
              <description>Deprecated. &lt;static&gt; Returns the Y position of an html element</description>
              <params>
                <param name="the" type="el" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRelated" returns="DragDrop[]">
              <description>&lt;static&gt; Returns the drag and drop instances that are in all groups the
passed in instance belongs to.</description>
              <params>
                <param name="p_oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bTargetsOnly" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getScrollLeft" returns="int">
              <description>&lt;static&gt; Gets the scrollLeft</description>
            </function>
            <function name="getScrollTop" returns="int">
              <description>&lt;static&gt; Gets the scrollTop</description>
            </function>
            <function name="getStyle" returns="string">
              <description>Deprecated. &lt;static&gt; Returns the specified element style property</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="styleProp" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleWasClicked" returns="void">
              <description>&lt;static&gt; Recursively searches the immediate parent and all child nodes for
the handle element in order to determine wheter or not it was
clicked.</description>
              <params>
                <param name="the" type="node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isDragDrop" returns="boolean">
              <description>&lt;static&gt; Utility function to determine if a given element has been
registered as a drag drop item.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isHandle" returns="boolean">
              <description>&lt;static&gt; Utility function to determine if a given element has been
registered as a drag drop handle for the given Drag Drop object.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLegalTarget" returns="boolean">
              <description>&lt;static&gt; Returns true if the specified dd target is a legal target for
the specifice drag obj</description>
              <params>
                <param name="the" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="the" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLocked" returns="boolean">
              <description>&lt;static&gt; Is drag and drop locked?</description>
            </function>
            <function name="isTypeOfDD" returns="boolean">
              <description>&lt;static&gt; My goal is to be able to transparently determine if an object is
typeof DragDrop, and the exact subclass of DragDrop.  typeof
returns "object", oDD.constructor.toString() always returns
"DragDrop" and not the name of the subclass.  So for now it just
evaluates a well-known variable in DragDrop.</description>
              <params>
                <param name="the" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lock" returns="void">
              <description>&lt;static&gt; Lock all drag and drop functionality</description>
            </function>
            <function name="moveToEl" returns="void">
              <description>&lt;static&gt; Sets the x/y position of an element to the location of the
target element.</description>
              <params>
                <param name="moveEl" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="targetEl" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="numericSort" returns="void">
              <description>&lt;static&gt; Numeric array sort function</description>
            </function>
            <function name="refreshCache" returns="void">
              <description>&lt;static&gt; Refreshes the cache of the top-left and bottom-right points of the
drag and drop objects in the specified group(s).  This is in the
format that is stored in the drag and drop instance, so typical
usage is:

Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);

Alternatively:

Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});

@TODO this really should be an indexed array.  Alternatively this
method could accept both.</description>
              <params>
                <param name="groups" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regDragDrop" returns="void">
              <description>&lt;static&gt; Each DragDrop instance must be registered with the DragDropMgr.
This is executed in DragDrop.init()</description>
              <params>
                <param name="oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regHandle" returns="void">
              <description>&lt;static&gt; Each DragDrop handle element must be registered.  This is done
automatically when executing DragDrop.setHandleElId()</description>
              <params>
                <param name="sDDId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="startDrag" returns="void">
              <description>&lt;static&gt; Fired when either the drag pixel threshol or the mousedown hold
time threshold has been met.</description>
              <params>
                <param name="{int}" type="x" optional="False">
                  <description>
                  </description>
                </param>
                <param name="{int}" type="y" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopEvent" returns="void">
              <description>&lt;static&gt; Utility to stop event propagation and event default, if these
features are turned on.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="swapNode" returns="void">
              <description>&lt;static&gt; Swap two nodes.  In IE, we use the native method, for others we
emulate the IE behavior</description>
              <params>
                <param name="the" type="n1" optional="False">
                  <description>
                  </description>
                </param>
                <param name="the" type="n2" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unlock" returns="void">
              <description>&lt;static&gt; Unlock all drag and drop functionality</description>
            </function>
            <function name="verifyEl" returns="boolean">
              <description>&lt;static&gt; This checks to make sure an element exists and is in the DOM.  The
main purpose is to handle cases where innerHTML is used to remove
drag and drop objects from the DOM.  IE provides an 'unspecified
error' when trying to access the offsetParent of such an element</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DragSource" private="True" extends="Ext.dd.DDProxy">
          <description>A simple class that provides the basic implementation needed to make any element draggable.</description>
          <attributes>
            <attribute name="onStartDrag" type="Object" readonly="False">
              <description>An empty function by default, but provided so that you can perform a custom action once the initial
drag event has begun.  The drag cannot be canceled from this function.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DragSource" returns="DragSource">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The container element</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The container element</description>
                </param>
              </params>
            </function>
            <function name="afterDragDrop" returns="void">
              <description>An empty function by default, but provided so that you can perform a custom action
after a valid drag drop has occurred by providing an implementation.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>The event object</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>The event object</description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>The event object</description>
                </param>
              </params>
            </function>
            <function name="afterDragEnter" returns="void">
              <description>An empty function by default, but provided so that you can perform a custom action
when the dragged item enters the drop target by providing an implementation.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>The id of the dragged element</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>The id of the dragged element</description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>The id of the dragged element</description>
                </param>
              </params>
            </function>
            <function name="afterDragOut" returns="void">
              <description>An empty function by default, but provided so that you can perform a custom action
after the dragged item is dragged out of the target without dropping.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="afterDragOver" returns="void">
              <description>An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target by providing an implementation.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="afterInvalidDrop" returns="void">
              <description>An empty function by default, but provided so that you can perform a custom action
after an invalid drop has occurred by providing an implementation.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beforeDragDrop" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action before the dragged
item is dropped onto the target and optionally cancel the onDragDrop.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beforeDragEnter" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action
before the dragged item enters the drop target and optionally cancel the onDragEnter.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beforeDragOut" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action before the dragged
item is dragged out of the target without dropping, and optionally cancel the onDragOut.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beforeDragOver" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target and optionally cancel the onDragOver.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beforeInvalidDrop" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action after an invalid
drop has occurred.</description>
              <params>
                <param name="target" type="Ext.dd.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDragData" returns="Object">
              <description>Returns the data object associated with this drag source</description>
            </function>
            <function name="getProxy" returns="Ext.dd.StatusProxy">
              <description>Returns the drag source's underlying Ext.dd.StatusProxy</description>
            </function>
            <function name="hideProxy" returns="void">
              <description>Hides the drag source's Ext.dd.StatusProxy</description>
            </function>
            <function name="onBeforeDrag" returns="Boolean">
              <description>An empty function by default, but provided so that you can perform a custom action before the initial
drag event begins and optionally cancel it.</description>
              <params>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DragZone" private="True" extends="Ext.dd.DragSource">
          <description>This class provides a container DD instance that proxies for multiple child node sources.
By default, this class requires that draggable child nodes are registered with Ext.dd.Registry.</description>
          <functions>
            <function name="DragZone" returns="DragZone">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The container element</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The container element</description>
                </param>
              </params>
            </function>
            <function name="afterRepair" returns="void">
              <description>Called after a repair of an invalid drop. By default, highlights this.dragData.ddel</description>
            </function>
            <function name="getDragData" returns="Object">
              <description>Called when a mousedown occurs in this container. Looks in Ext.dd.Registry
for a valid target to drag based on the mouse down. Override this method
to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
object has a "ddel" attribute (with an HTML Element) for other functions to work.</description>
              <params>
                <param name="e" type="EventObject" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRepairXY" returns="Array">
              <description>Called before a repair of an invalid drop to get the XY to animate to. By default returns
the XY of this.dragData.ddel</description>
              <params>
                <param name="e" type="EventObject" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onInitDrag" returns="Boolean">
              <description>Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
this.dragData.ddel</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DropTarget" private="True" extends="Ext.dd.DDTarget">
          <description>A simple class that provides the basic implementation needed to make any element a drop target that can have
draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</description>
          <functions>
            <function name="DropTarget" returns="DropTarget">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The container element</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The container element</description>
                </param>
              </params>
            </function>
            <function name="notifyDrop" returns="Boolean">
              <description>The function a Ext.dd.DragSource calls once to notify this drop target that the dragged item has
been dropped on it.  This method has no default implementation and returns false, so you must provide an
implementation that does something to process the drop event and returns true so that the drag source's
repair action does not run.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>The event</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>The event</description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>The event</description>
                </param>
              </params>
            </function>
            <function name="notifyEnter" returns="String">
              <description>The function a Ext.dd.DragSource calls once to notify this drop target that the source is now over the
target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
and returns the dropAllowed config value.  This method should be overridden if drop validation is required.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
              </params>
            </function>
            <function name="notifyOut" returns="void">
              <description>The function a Ext.dd.DragSource calls once to notify this drop target that the source has been dragged
out of the target without dropping.  This default implementation simply removes the CSS class specified by
overClass (if any) from the drop element.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="notifyOver" returns="String">
              <description>The function a Ext.dd.DragSource calls continuously while it is being dragged over the target.
This method will be called on every mouse movement while the drag source is over the drop target.
This default implementation simply returns the dropAllowed config value.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.DropZone" private="True" extends="Ext.dd.DropTarget">
          <description>This class provides a container DD instance that proxies for multiple child node targets.
By default, this class requires that child nodes accepting drop are registered with Ext.dd.Registry.</description>
          <functions>
            <function name="DropZone" returns="DropZone">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The container element</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The container element</description>
                </param>
              </params>
            </function>
            <function name="getTargetFromEvent" returns="Object">
              <description>Returns a custom data object associated with the DOM node that is the target of the event.  By default
this looks up the event target in the Ext.dd.Registry, although you can override this method to
provide your own custom lookup.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="notifyDrop" returns="Boolean">
              <description>The function a Ext.dd.DragSource calls once to notify this drop zone that the dragged item has
been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
is a node registered for that event, it will delegate to onNodeDrop for node-specific handling,
otherwise it will call onContainerDrop.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>An object containing arbitrary data supplied by the drag source</description>
                </param>
              </params>
            </function>
            <function name="notifyEnter" returns="String">
              <description>The function a Ext.dd.DragSource calls once to notify this drop zone that the source is now over
the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
you should override this method and provide a custom implementation.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="notifyOut" returns="void">
              <description>The function a Ext.dd.DragSource calls once to notify this drop zone that the source has been dragged
out of the zone without dropping.  If the drag source is currently over a registered node, the notification
will be delegated to onNodeOut for node-specific handling, otherwise it will be ignored.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="notifyOver" returns="String">
              <description>The function a Ext.dd.DragSource calls continuously while it is being dragged over the drop zone.
This method will be called on every mouse movement while the drag source is over the drop zone.
It will call onNodeOver while the drag source is over a registered node, and will also automatically
delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
registered nodes (onNodeEnter, onNodeOut). If the drag source is not currently over a
registered node, it will call onContainerOver.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onContainerDrop" returns="Boolean">
              <description>Called internally when the DropZone determines that a Ext.dd.DragSource has been dropped on it,
but not on any of its registered drop nodes.  The default implementation returns false, so it should be
overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onContainerOver" returns="String">
              <description>Called internally while the DropZone determines that a Ext.dd.DragSource is being dragged over it,
but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
it should be overridden to provide the proper feedback if necessary.</description>
              <params>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onNodeDrop" returns="Boolean">
              <description>Called internally when the DropZone determines that a Ext.dd.DragSource has been dropped onto
the drop node.  The default implementation returns false, so it should be overridden to provide the
appropriate processing of the drop event and return true so that the drag source's repair action does not run.</description>
              <params>
                <param name="nodeData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onNodeEnter" returns="void">
              <description>Called internally when the DropZone determines that a Ext.dd.DragSource has entered a drop node
that it has registered.  This method has no default implementation and should be overridden to provide
node-specific processing if necessary.</description>
              <params>
                <param name="nodeData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onNodeOut" returns="void">
              <description>Called internally when the DropZone determines that a Ext.dd.DragSource has been dragged out of
the drop node without dropping.  This method has no default implementation and should be overridden to provide
node-specific processing if necessary.</description>
              <params>
                <param name="nodeData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onNodeOver" returns="String">
              <description>Called internally while the DropZone determines that a Ext.dd.DragSource is over a drop node
that it has registered.  The default implementation returns this.dropNotAllowed, so it should be
overridden to provide the proper feedback.</description>
              <params>
                <param name="nodeData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="source" type="Ext.dd.DragSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.PanelProxy" private="True" extends="Object">
          <description>// Internal developer documentation -- will not show up in API docs
A custom drag proxy implementation specific to Ext.Panels. This class is primarily used internally
for the Panel's drag drop implementation, and should never need to be created directly.</description>
          <functions>
            <function name="PanelProxy" returns="PanelProxy">
              <description>
              </description>
              <params>
                <param name="The" type="panel" optional="False">
                  <description>Ext.Panel to proxy for</description>
                </param>
                <param name="Configuration" type="config" optional="False">
                  <description>Ext.Panel to proxy for</description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Element">
              <description>Gets the proxy's element</description>
            </function>
            <function name="getGhost" returns="Element">
              <description>Gets the proxy's ghost element</description>
            </function>
            <function name="getProxy" returns="Element">
              <description>Gets the proxy's element</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the proxy</description>
            </function>
            <function name="moveProxy" returns="void">
              <description>Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel
to keep the proxy sync'd to the Panel's location.</description>
              <params>
                <param name="parentNode" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="before" type="HTMLElement" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows the proxy</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.Registry" private="True" extends="Object">
          <description>Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="getHandle" returns="Object">
              <description>Returns the handle registered for a DOM Node by id</description>
              <params>
                <param name="id" type="String/HTMLElement" optional="False">
                  <description>The DOM node or id to look up</description>
                </param>
              </params>
            </function>
            <function name="getHandleFromEvent" returns="Object">
              <description>Returns the handle that is registered for the DOM node that is the target of the event</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTarget" returns="Object">
              <description>Returns a custom data object that is registered for a DOM node by id</description>
              <params>
                <param name="id" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTargetFromEvent" returns="Object">
              <description>Returns a custom data object that is registered for the DOM node that is the target of the event</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Resgister a drag drop element</description>
              <params>
                <param name="element" type="String/HTMLElement)" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>Unregister a drag drop element</description>
              <params>
                <param name="element" type="String/HTMLElement)" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.ScrollManager" private="True" extends="Object">
          <description>Provides automatic scrolling of overflow regions in the page during drag operations.
The ScrollManager configs will be used as the defaults for any scroll container registered with it,
but you can also override most of the configs per scroll container by adding a
ddScrollConfig object to the target element that contains these properties: hthresh,
vthresh, increment and frequency.  Example usage:
var el = Ext.get('scroll-ct');
el.ddScrollConfig = {
    vthresh: 50,
    hthresh: -1,
    frequency: 100,
    increment: 200
};
Ext.dd.ScrollManager.register(el);
Note: This class uses "Point Mode" and is untested in "Intersect Mode".This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="animDuration" type="Number" readonly="False">
              <description>The animation duration in seconds -
MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)</description>
            </attribute>
            <attribute name="animate" type="Boolean" readonly="False">
              <description>True to animate the scroll (defaults to true)</description>
            </attribute>
            <attribute name="frequency" type="Number" readonly="False">
              <description>The frequency of scrolls in milliseconds (defaults to 500)</description>
            </attribute>
            <attribute name="hthresh" type="Number" readonly="False">
              <description>The number of pixels from the right or left edge of a container the pointer needs to be to
trigger scrolling (defaults to 25)</description>
            </attribute>
            <attribute name="increment" type="Number" readonly="False">
              <description>The number of pixels to scroll in each scroll increment (defaults to 50)</description>
            </attribute>
            <attribute name="vthresh" type="Number" readonly="False">
              <description>The number of pixels from the top or bottom edge of a container the pointer needs to be to
trigger scrolling (defaults to 25)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="refreshCache" returns="void">
              <description>Manually trigger a cache refresh.</description>
            </function>
            <function name="register" returns="void">
              <description>Registers new overflow element(s) to auto scroll</description>
              <params>
                <param name="el" type="Mixed/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>Unregisters overflow element(s) so they are no longer scrolled</description>
              <params>
                <param name="el" type="Mixed/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.dd.StatusProxy" private="True" extends="Object">
          <description>A specialized drag proxy that supports a drop status icon, Ext.Layer styles and auto-repair.  This is the
default drag proxy used by all Ext.dd components.</description>
          <functions>
            <function name="StatusProxy" returns="StatusProxy">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Ext.Layer">
              <description>Returns the underlying proxy Ext.Layer</description>
            </function>
            <function name="getGhost" returns="Ext.Element">
              <description>Returns the ghost element</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the proxy</description>
              <params>
                <param name="clear" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="repair" returns="void">
              <description>Causes the proxy to return to its position of origin via an animation.  Should be called after an
invalid drop operation by the item being dragged.</description>
              <params>
                <param name="xy" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="void">
              <description>Resets the status indicator to the default dropNotAllowed value</description>
              <params>
                <param name="clearGhost" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStatus" returns="void">
              <description>Updates the proxy's visual element to indicate the status of whether or not drop is allowed
over the current target element.</description>
              <params>
                <param name="cssClass" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Displays this proxy</description>
            </function>
            <function name="stop" returns="void">
              <description>Stops the repair animation if it's currently running</description>
            </function>
            <function name="sync" returns="void">
              <description>Force the Layer to sync its shadow and shim positions to the element</description>
            </function>
            <function name="update" returns="void">
              <description>Updates the contents of the ghost element</description>
              <params>
                <param name="html" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.DomHelper" private="True" extends="Object">
          <description>Utility class for working with DOM and/or Templates. It transparently supports using HTML fragments or DOM.
This is an example, where an unordered list with 5 children items is appended to an existing element with id 'my-div':
 var dh = Ext.DomHelper;
var list = dh.append('my-div', {
    id: 'my-ul', tag: 'ul', cls: 'my-list', children: [
        {tag: 'li', id: 'item0', html: 'List Item 0'},
        {tag: 'li', id: 'item1', html: 'List Item 1'},
        {tag: 'li', id: 'item2', html: 'List Item 2'},
        {tag: 'li', id: 'item3', html: 'List Item 3'},
        {tag: 'li', id: 'item4', html: 'List Item 4'}
    ]
});
Element creation specification parameters in this class may also be passed as an Array of
specification objects. This can be used to insert multiple sibling nodes into an existing
container very efficiently. For example, to add more list items to the example above:dh.append('my-ul', [
    {tag: 'li', id: 'item5', html: 'List Item 5'},
    {tag: 'li', id: 'item6', html: 'List Item 6'} ]);
Element creation specification parameters may also be strings. If useDom is false, then the string is used
as innerHTML. If useDom is true, a string specification results in the creation of a text node.
For more information and examples, see the original blog post.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="useDom" type="Boolean" readonly="False">
              <description>True to force the use of DOM instead of html fragments</description>
            </attribute>
          </attributes>
          <functions>
            <function name="append" returns="HTMLElement/Ext.Element">
              <description>Creates new DOM element(s) and appends them to el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The context element</description>
                </param>
                <param name="o" type="Object/String" optional="False">
                  <description>The context element</description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>The context element</description>
                </param>
              </params>
            </function>
            <function name="applyStyles" returns="void">
              <description>Applies a style specification to an element.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>A style specification string eg "width:100px", or object in the form {width:"100px"}, or
a function which returns such a specification.</description>
                </param>
                <param name="styles" type="String/Object/Function" optional="False">
                  <description>A style specification string eg "width:100px", or object in the form {width:"100px"}, or
a function which returns such a specification.</description>
                </param>
              </params>
            </function>
            <function name="createTemplate" returns="Ext.Template">
              <description>Creates a new Ext.Template from the DOM object spec.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertAfter" returns="HTMLElement/Ext.Element">
              <description>Creates new DOM element(s) and inserts them after el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="HTMLElement/Ext.Element">
              <description>Creates new DOM element(s) and inserts them before el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object/String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertFirst" returns="HTMLElement/Ext.Element">
              <description>Creates new DOM element(s) and inserts them as the first child of el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object/String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertHtml" returns="HTMLElement">
              <description>Inserts an HTML fragment into the DOM.</description>
              <params>
                <param name="where" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="markup" returns="String">
              <description>Returns the markup for the passed Element(s) config.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="overwrite" returns="HTMLElement/Ext.Element">
              <description>Creates new DOM element(s) and overwrites the contents of el with them.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object/String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.DomQuery" private="True" extends="Object">
          <description>Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).

DomQuery supports most of the CSS3 selectors spec, along with some custom selectors and basic XPath.


All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.

Element Selectors:

     * any element
     E an element with the tag E
     E F All descendent elements of E that have the tag F
     E &gt; F or E/F all direct children elements of E that have the tag F
     E + F all elements with the tag F that are immediately preceded by an element with the tag E
     E ~ F all elements with the tag F that are preceded by a sibling element with the tag E

Attribute Selectors:
The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.

     E[foo] has an attribute "foo"
     E[foo=bar] has an attribute "foo" that equals "bar"
     E[foo^=bar] has an attribute "foo" that starts with "bar"
     E[foo$=bar] has an attribute "foo" that ends with "bar"
     E[foo*=bar] has an attribute "foo" that contains the substring "bar"
     E[foo%=2] has an attribute "foo" that is evenly divisible by 2
     E[foo!=bar] has an attribute "foo" that does not equal "bar"

Pseudo Classes:

     E:first-child E is the first child of its parent
     E:last-child E is the last child of its parent
     E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
     E:nth-child(odd) E is an odd child of its parent
     E:nth-child(even) E is an even child of its parent
     E:only-child E is the only child of its parent
     E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
     E:first the first E in the resultset
     E:last the last E in the resultset
     E:nth(n) the nth E in the resultset (1 based)
     E:odd shortcut for :nth-child(odd)
     E:even shortcut for :nth-child(even)
     E:contains(foo) E's innerHTML contains the substring "foo"
     E:nodeValue(foo) E contains a textNode with a nodeValue that equals "foo"
     E:not(S) an E element that does not match simple selector S
     E:has(S) an E element that has a descendent that matches simple selector S
     E:next(S) an E element whose next sibling matches simple selector S
     E:prev(S) an E element whose previous sibling matches simple selector S

CSS Value Selectors:

     E{display=none} css value "display" that equals "none"
     E{display^=none} css value "display" that starts with "none"
     E{display$=none} css value "display" that ends with "none"
     E{display*=none} css value "display" that contains the substring "none"
     E{display%=2} css value "display" that is evenly divisible by 2
     E{display!=none} css value "display" that does not equal "none"
This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="matchers" type="Object" readonly="False">
              <description>Collection of matching regular expressions and code snippets.</description>
            </attribute>
            <attribute name="operators" type="Object" readonly="False">
              <description>Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
New operators can be added as long as the match the format c= where c is any character other than space, &gt; &lt;.</description>
            </attribute>
            <attribute name="pseudos" type="Object" readonly="False">
              <description>Collection of "pseudo class" processors. Each processor is passed the current nodeset (array)
and the argument (if any) supplied in the selector.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="compile" returns="Function">
              <description>Compiles a selector/xpath query into a reusable function. The returned function
takes one parameter "root" (optional), which is the context node from where the query should start.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>The selector/xpath query</description>
                </param>
                <param name="type" type="String" optional="True">
                  <description>The selector/xpath query</description>
                </param>
              </params>
            </function>
            <function name="filter" returns="Array">
              <description>Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)</description>
              <params>
                <param name="el" type="Array" optional="False">
                  <description>The simple selector to test</description>
                </param>
                <param name="selector" type="String" optional="False">
                  <description>The simple selector to test</description>
                </param>
                <param name="nonMatches" type="Boolean" optional="False">
                  <description>The simple selector to test</description>
                </param>
              </params>
            </function>
            <function name="is" returns="Boolean">
              <description>Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)</description>
              <params>
                <param name="el" type="String/HTMLElement/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="Array">
              <description>Selects a group of elements.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="Node" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectNode" returns="Element">
              <description>Selects a single element.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="Node" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectNumber" returns="Number">
              <description>Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="Node" optional="True">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectValue" returns="String">
              <description>Selects the value of a node, optionally replacing null with the defaultValue.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="Node" optional="True">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Editor" private="True" extends="Ext.Component">
          <description>A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.</description>
          <functions>
            <function name="Editor" returns="Editor">
              <description>Create a new Editor</description>
              <params>
                <param name="field" type="Ext.form.Field" optional="False">
                  <description>The Field object (or descendant)</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The Field object (or descendant)</description>
                </param>
              </params>
            </function>
            <function name="cancelEdit" returns="void">
              <description>Cancels the editing process and hides the editor without persisting any changes.  The field value will be
reverted to the original starting value.</description>
              <params>
                <param name="remainVisible" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="completeEdit" returns="void">
              <description>Ends the editing process, persists the changed value to the underlying field, and hides the editor.</description>
              <params>
                <param name="remainVisible" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="Mixed">
              <description>Gets the data value of the editor</description>
            </function>
            <function name="realign" returns="void">
              <description>Realigns the editor to the bound field based on the current alignment config value.</description>
            </function>
            <function name="setSize" returns="void">
              <description>Sets the height and width of this editor.</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the data value of the editor</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="startEdit" returns="void">
              <description>Starts the editing process and shows the editor.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Element" private="True" extends="Object">
          <description>Represents an Element in the DOM.
Usage:
// by id
var el = Ext.get("my-div");

// by DOM element reference
var el = Ext.get(myDivElement);
Animations
Many of the functions for manipulating an element have an optional "animate" parameter. The animate parameter
should either be a boolean (true) or an object literal with animation options. Note that the supported Element animation
options are a subset of the Ext.Fx animation options specific to Fx effects.  The Element animation options are:
Option    Default   Description
--------- --------  ---------------------------------------------
duration  .35       The duration of the animation in seconds
easing    easeOut   The easing method
callback  none      A function to execute when the anim completes
scope     this      The scope (this) of the callback function
Also, the Anim object being used for the animation will be set on your options object as "anim", which allows you to stop or
manipulate the animation. Here's an example:
var el = Ext.get("my-div");

// no animation
el.setWidth(100);

// default animation
el.setWidth(100, true);

// animation with some options set
el.setWidth(100, {
    duration: 1,
    callback: this.foo,
    scope: this
});

// using the "anim" property to get the Anim object
var opt = {
    duration: 1,
    callback: this.foo,
    scope: this
};
el.setWidth(100, opt);
...
if(opt.anim.isAnimated()){
    opt.anim.stop();
}
 Composite (Collections of) Elements
For working with collections of Elements, see Ext.CompositeElement</description>
          <attributes>
            <attribute name="Element.DISPLAY" type="Number" readonly="False">
              <description>&lt;static&gt; Visibility mode constant - Use display to hide element</description>
            </attribute>
            <attribute name="Element.VISIBILITY" type="Number" readonly="False">
              <description>&lt;static&gt; Visibility mode constant - Use visibility to hide element</description>
            </attribute>
            <attribute name="defaultUnit" type="String" readonly="False">
              <description>The default unit to append to CSS values where a unit isn't provided (defaults to px).</description>
            </attribute>
            <attribute name="dom" type="HTMLElement" readonly="False">
              <description>The DOM element</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The DOM element ID</description>
            </attribute>
            <attribute name="originalDisplay" type="String" readonly="False">
              <description>The element's default display mode  (defaults to "")</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Element" returns="Element">
              <description>Create a new Element directly.</description>
              <params>
                <param name="element" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="forceNew" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Element.fly" returns="Element">
              <description>&lt;static&gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>(optional) Allows for creation of named reusable flyweights to
prevent conflicts (e.g. internally Ext uses "_internal")</description>
                </param>
                <param name="named" type="String" optional="True">
                  <description>(optional) Allows for creation of named reusable flyweights to
prevent conflicts (e.g. internally Ext uses "_internal")</description>
                </param>
              </params>
            </function>
            <function name="Element.get" returns="Element">
              <description>&lt;static&gt; Static method to retrieve Ext.Element objects.
This method does not retrieve Components. This method
retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
its ID, use Ext.ComponentMgr.get.
Uses simple caching to consistently return the same object.
Automatically fixes if an object was recreated with the same id via AJAX or DOM.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addClass" returns="Ext.Element">
              <description>Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.</description>
              <params>
                <param name="className" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addClassOnClick" returns="Ext.Element">
              <description>Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addClassOnFocus" returns="Ext.Element">
              <description>Sets up event handlers to add and remove a css class when this element has the focus</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addClassOnOver" returns="Ext.Element">
              <description>Sets up event handlers to add and remove a css class when the mouse is over this element</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addKeyListener" returns="Ext.KeyMap">
              <description>Convenience method for constructing a KeyMap</description>
              <params>
                <param name="key" type="Number/Array/Object/String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addKeyMap" returns="Ext.KeyMap">
              <description>Creates a KeyMap for this element</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addListener" returns="void">
              <description>Appends an event handler to this element.  The shorthand version on is equivalent.</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="alignTo" returns="Ext.Element">
              <description>Aligns this element with another element relative to the specified anchor points. If the other element is the
document it aligns it to the viewport.
The position parameter is optional, and can be specified in any one of the following formats:

Blank: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").
One anchor (deprecated): The passed anchor position is used as the target element's anchor point.
The element being aligned will position its top-left corner (tl) to that point.  This method has been
deprecated in favor of the newer two anchor syntax below.
Two anchors: If two values from the table below are passed separated by a dash, the first value is used as the
element's anchor point, and the second value is used as the target's anchor point.

In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
that specified in order to enforce the viewport constraints.
Following are all of the supported anchor positions:
Value  Description
-----  -----------------------------
tl     The top left corner (default)
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
c      In the center of the element
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
Example Usage:
// align el to other-el using the default positioning ("tl-bl", non-constrained)
el.alignTo("other-el");

// align the top left corner of el with the top right corner of other-el (constrained to viewport)
el.alignTo("other-el", "tr?");

// align the bottom right corner of el with the center left edge of other-el
el.alignTo("other-el", "br-l?");

// align the center of el with the bottom left corner of other-el and
// adjust the x position by -6 pixels (and the y position by 0)
el.alignTo("other-el", "c-bl", [-6, 0]);</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="offsets" type="Array" optional="True">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="anchorTo" returns="Ext.Element">
              <description>Anchors an element to another element and realigns it when the window is resized.</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="offsets" type="Array" optional="True">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="monitorScroll" type="Boolean/Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="animate" returns="Ext.Element">
              <description>Perform animation on this element.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="duration" type="Float" optional="True">
                  <description>
                  </description>
                </param>
                <param name="onComplete" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="easing" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="animType" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendChild" returns="Ext.Element">
              <description>Appends the passed element(s) to this element</description>
              <params>
                <param name="el" type="String/HTMLElement/Array/Element/CompositeElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendTo" returns="Ext.Element">
              <description>Appends this element to the passed element</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyStyles" returns="Ext.Element">
              <description>More flexible version of setStyle for setting style properties.</description>
              <params>
                <param name="styles" type="String/Object/Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="autoHeight" returns="Ext.Element">
              <description>Measures the element's content height and updates height to match. Note: this function uses setTimeout so
the new height may not be available immediately.</description>
              <params>
                <param name="animate" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="duration" type="Float" optional="True">
                  <description>
                  </description>
                </param>
                <param name="onComplete" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="easing" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blur" returns="Ext.Element">
              <description>Tries to blur the element. Any exceptions are caught and ignored.</description>
            </function>
            <function name="boxWrap" returns="Ext.Element">
              <description>Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a
gradient background, rounded corners and a 4-way shadow.  Example usage:

// Basic box wrap
Ext.get("foo").boxWrap();

// You can also add a custom class and use CSS inheritance rules to customize the box look.
// 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
// for how to create a custom box wrap style.
Ext.get("foo").boxWrap().addClass("x-box-blue");</description>
              <params>
                <param name="class" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="center" returns="void">
              <description>Centers the Element in either the viewport, or another Element.</description>
              <params>
                <param name="centerIn" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="child" returns="HTMLElement/Ext.Element">
              <description>Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clean" returns="void">
              <description>Removes worthless text nodes</description>
              <params>
                <param name="forceReclean" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearOpacity" returns="Ext.Element">
              <description>Clears any opacity settings from this element. Required in some cases for IE.</description>
            </function>
            <function name="clearPositioning" returns="Ext.Element">
              <description>Clear positioning back to the default when the document was loaded</description>
              <params>
                <param name="value" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clip" returns="Ext.Element">
              <description>Store the current overflow setting and clip overflow on the element - use unclip to remove</description>
            </function>
            <function name="contains" returns="Boolean">
              <description>Returns true if this element is an ancestor of the passed element</description>
              <params>
                <param name="el" type="HTMLElement/String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createChild" returns="Ext.Element">
              <description>Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="insertBefore" type="HTMLElement" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createProxy" returns="Ext.Element">
              <description>Creates a proxy element of this element</description>
              <params>
                <param name="config" type="String/Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="renderTo" type="String/HTMLElement" optional="True">
                  <description>
                  </description>
                </param>
                <param name="matchBox" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createShim" returns="Ext.Element">
              <description>Creates an iframe shim for this element to keep selects and other windowed objects from
showing through.</description>
            </function>
            <function name="down" returns="HTMLElement/Ext.Element">
              <description>Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="enableDisplayMode" returns="Ext.Element">
              <description>Convenience method for setVisibilityMode(Element.DISPLAY)</description>
              <params>
                <param name="display" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findParent" returns="HTMLElement">
              <description>Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxDepth" type="Number/Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnEl" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findParentNode" returns="HTMLElement">
              <description>Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxDepth" type="Number/Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnEl" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="first" returns="Ext.Element/HTMLElement">
              <description>Gets the first child, skipping text nodes</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="Ext.Element">
              <description>Tries to focus the element. Any exceptions are caught and ignored.</description>
            </function>
            <function name="getAlignToXY" returns="Array">
              <description>Gets the x,y coordinates to align this element with another element. See alignTo for more info on the
supported position values.</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="offsets" type="Array" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAnchorXY" returns="Array">
              <description>Gets the x,y coordinates specified by the anchor position on the element.</description>
              <params>
                <param name="anchor" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="local" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="size" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAttributeNS" returns="String">
              <description>Returns the value of a namespaced attribute from the element's underlying DOM node.</description>
              <params>
                <param name="namespace" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBorderWidth" returns="Number">
              <description>Gets the width of the border(s) for the specified side(s)</description>
              <params>
                <param name="side" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBottom" returns="Number">
              <description>Gets the bottom Y coordinate of the element (element Y position + element height)</description>
              <params>
                <param name="local" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBox" returns="Object">
              <description>Return a box {x, y, width, height} that can be used to set another elements
size/location to match this element.</description>
              <params>
                <param name="contentBox" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="local" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCenterXY" returns="Array">
              <description>Calculates the x, y to center this element on the screen</description>
            </function>
            <function name="getColor" returns="void">
              <description>Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
are convert to standard 6 digit hex color.</description>
              <params>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prefix" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getComputedHeight" returns="Number">
              <description>Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
if a height has not been set using CSS.</description>
            </function>
            <function name="getComputedWidth" returns="Number">
              <description>Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
if a width has not been set using CSS.</description>
            </function>
            <function name="getFrameWidth" returns="Number">
              <description>Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
     for more information about the sides.</description>
              <params>
                <param name="sides" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getHeight" returns="Number">
              <description>Returns the offset height of the element</description>
              <params>
                <param name="contentHeight" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLeft" returns="Number">
              <description>Gets the left X coordinate</description>
              <params>
                <param name="local" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMargins" returns="Object/Number">
              <description>Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
then it returns the calculated width of the sides (see getPadding)</description>
              <params>
                <param name="sides" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getOffsetsTo" returns="Array">
              <description>Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPadding" returns="Number">
              <description>Gets the width of the padding(s) for the specified side(s)</description>
              <params>
                <param name="side" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPositioning" returns="Object">
              <description>Gets an object with all CSS positioning properties. Useful along with setPostioning to get
snapshot before performing an update and then restoring the element.</description>
            </function>
            <function name="getRegion" returns="Region">
              <description>Returns the region of the given element.
The element must be part of the DOM tree to have a region (display:none or elements not appended return false).</description>
            </function>
            <function name="getRight" returns="Number">
              <description>Gets the right X coordinate of the element (element X position + element width)</description>
              <params>
                <param name="local" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getScroll" returns="Object">
              <description>Returns the current scroll position of the element.</description>
            </function>
            <function name="getSize" returns="Object">
              <description>Returns the size of the element.</description>
              <params>
                <param name="contentSize" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getStyle" returns="String">
              <description>Normalizes currentStyle and computedStyle.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getStyles" returns="Object">
              <description>Returns an object with properties matching the styles requested.
For example, el.getStyles('color', 'font-size', 'width') might return
{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.</description>
              <params>
                <param name="style1" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="style2" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="etc." type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTextWidth" returns="Number">
              <description>Returns the width in pixels of the passed text, or the width of the text in this Element.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="min" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="max" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTop" returns="Number">
              <description>Gets the top Y coordinate</description>
              <params>
                <param name="local" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getUpdater" returns="Ext.Updater">
              <description>Gets this element's Updater</description>
            </function>
            <function name="getValue" returns="String/Number">
              <description>Returns the value of the "value" attribute</description>
              <params>
                <param name="asNumber" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getViewSize" returns="Object">
              <description>Returns the width and height of the viewport.</description>
            </function>
            <function name="getWidth" returns="Number">
              <description>Returns the offset width of the element</description>
              <params>
                <param name="contentWidth" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getX" returns="Number">
              <description>Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
            </function>
            <function name="getXY" returns="Array">
              <description>Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
            </function>
            <function name="getY" returns="Number">
              <description>Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
            </function>
            <function name="hasClass" returns="Boolean">
              <description>Checks if the specified CSS class exists on this element's DOM node.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hide" returns="Ext.Element">
              <description>Hide this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.</description>
              <params>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hover" returns="Ext.Element">
              <description>Sets up event handlers to call the passed functions when the mouse is over this element. Automatically
filters child element mouse events.</description>
              <params>
                <param name="overFn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="outFn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDD" returns="Ext.dd.DD">
              <description>Initializes a Ext.dd.DD drag drop object for this element.</description>
              <params>
                <param name="group" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDDProxy" returns="Ext.dd.DDProxy">
              <description>Initializes a Ext.dd.DDProxy object for this element.</description>
              <params>
                <param name="group" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDDTarget" returns="Ext.dd.DDTarget">
              <description>Initializes a Ext.dd.DDTarget object for this element.</description>
              <params>
                <param name="group" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertAfter" returns="Ext.Element">
              <description>Inserts this element after the passed element in the DOM</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="Ext.Element">
              <description>Inserts this element before the passed element in the DOM</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertFirst" returns="Ext.Element">
              <description>Inserts (or creates) an element (or DomHelper config) as the first child of this element</description>
              <params>
                <param name="el" type="Mixed/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertHtml" returns="HTMLElement/Ext.Element">
              <description>Inserts an html fragment into this element</description>
              <params>
                <param name="where" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnEl" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertSibling" returns="Ext.Element">
              <description>Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element</description>
              <params>
                <param name="el" type="Mixed/Object/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="where" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="is" returns="Boolean">
              <description>Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isBorderBox" returns="Boolean">
              <description>Tests various css rules/browsers to determine if this element uses a border box</description>
            </function>
            <function name="isDisplayed" returns="Boolean">
              <description>Returns true if display is not "none"</description>
            </function>
            <function name="isMasked" returns="Boolean">
              <description>Returns true if this element is masked</description>
            </function>
            <function name="isScrollable" returns="Boolean">
              <description>Returns true if this element is scrollable.</description>
            </function>
            <function name="isVisible" returns="Boolean">
              <description>Checks whether the element is currently visible using both visibility and display properties.</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="last" returns="Ext.Element/HTMLElement">
              <description>Gets the last child, skipping text nodes</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="load" returns="Ext.Element">
              <description>Direct access to the Updater Ext.Updater.update method. The method takes the same object
parameter as Ext.Updater.update</description>
            </function>
            <function name="mask" returns="Element">
              <description>Puts a mask over this element to disable user interaction. Requires core.css.
This method can only be applied to elements which accept child nodes.</description>
              <params>
                <param name="msg" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="msgCls" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="move" returns="Ext.Element">
              <description>Move this element relative to its current position.</description>
              <params>
                <param name="direction" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="distance" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="moveTo" returns="Ext.Element">
              <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="next" returns="Ext.Element/HTMLElement">
              <description>Gets the next sibling, skipping text nodes</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="on" returns="void">
              <description>Appends an event handler (shorthand for addListener).</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parent" returns="Ext.Element/HTMLElement">
              <description>Gets the parent node for this element, optionally chaining up trying to match a selector</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="position" returns="void">
              <description>Initializes positioning on this element. If a desired position is not passed, it will make the
the element positioned relative IF it is not already positioned.</description>
              <params>
                <param name="pos" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="zIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="x" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="prev" returns="Ext.Element/HTMLElement">
              <description>Gets the previous sibling, skipping text nodes</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="query" returns="Array">
              <description>Selects child nodes based on the passed CSS selector (the selector should not contain an id).</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="radioClass" returns="Ext.Element">
              <description>Adds one or more CSS classes to this element and removes the same class(es) from all siblings.</description>
              <params>
                <param name="className" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="relayEvent" returns="void">
              <description>Create an event handler on this element such that when the event fires and is handled by this element,
it will be relayed to another object (i.e., fired again as if it originated from that object instead).</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="object" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="void">
              <description>Removes this element from the DOM and deletes it from the cache</description>
            </function>
            <function name="removeAllListeners" returns="Ext.Element">
              <description>Removes all previous added listeners from this element</description>
            </function>
            <function name="removeClass" returns="Ext.Element">
              <description>Removes one or more CSS classes from the element.</description>
              <params>
                <param name="className" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeListener" returns="Ext.Element">
              <description>Removes an event handler from this element.  The shorthand version un is equivalent.  Example:
el.removeListener('click', this.handlerFn);
// or
el.un('click', this.handlerFn);</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="repaint" returns="Ext.Element">
              <description>Forces the browser to repaint this element</description>
            </function>
            <function name="replace" returns="Ext.Element">
              <description>Replaces the passed element with this element</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceClass" returns="Ext.Element">
              <description>Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.</description>
              <params>
                <param name="oldClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceWith" returns="Ext.Element">
              <description>Replaces this element with the passed element</description>
              <params>
                <param name="el" type="Mixed/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scroll" returns="Boolean">
              <description>Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
within this element's scrollable range.</description>
              <params>
                <param name="direction" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="distance" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollIntoView" returns="Ext.Element">
              <description>Scrolls this element into view within the passed container.</description>
              <params>
                <param name="container" type="Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="hscroll" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollTo" returns="Element">
              <description>Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().</description>
              <params>
                <param name="side" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="CompositeElement/CompositeElementLite">
              <description>Creates a Ext.CompositeElement for child nodes based on the passed CSS selector (the selector should not contain an id).</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="unique" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="Ext.Element">
              <description>Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="useSet" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setBottom" returns="Ext.Element">
              <description>Sets the element's CSS bottom style.</description>
              <params>
                <param name="bottom" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setBounds" returns="Ext.Element">
              <description>Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setBox" returns="Ext.Element">
              <description>Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.</description>
              <params>
                <param name="box" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="adjust" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDisplayed" returns="Ext.Element">
              <description>Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHeight" returns="Ext.Element">
              <description>Set the height of the element</description>
              <params>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setLeft" returns="Ext.Element">
              <description>Sets the element's left position directly using CSS style (instead of setX).</description>
              <params>
                <param name="left" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setLeftTop" returns="Ext.Element">
              <description>Quick set left and top adding default units</description>
              <params>
                <param name="left" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="top" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setLocation" returns="Ext.Element">
              <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setOpacity" returns="Ext.Element">
              <description>Set the opacity of the element</description>
              <params>
                <param name="opacity" type="Float" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPositioning" returns="Ext.Element">
              <description>Set positioning with an object returned by getPositioning().</description>
              <params>
                <param name="posCfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRegion" returns="Ext.Element">
              <description>Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.</description>
              <params>
                <param name="region" type="Ext.lib.Region" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRight" returns="Ext.Element">
              <description>Sets the element's CSS right style.</description>
              <params>
                <param name="right" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSize" returns="Ext.Element">
              <description>Set the size of the element. If animation is true, both width an height will be animated concurrently.</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStyle" returns="Ext.Element">
              <description>Wrapper for setting style properties, also takes single object parameter of multiple styles.</description>
              <params>
                <param name="property" type="String/Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setTop" returns="Ext.Element">
              <description>Sets the element's top position directly using CSS style (instead of setY).</description>
              <params>
                <param name="top" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setVisibilityMode" returns="Ext.Element">
              <description>Sets the element's visibility mode. When setVisible() is called it
will use this to determine whether to set the visibility or the display property.</description>
              <params>
                <param name="Element.VISIBILITY" type="visMode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setVisible" returns="Ext.Element">
              <description>Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.</description>
              <params>
                <param name="visible" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setWidth" returns="Ext.Element">
              <description>Set the width of the element</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setX" returns="Ext.Element">
              <description>Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="The" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setXY" returns="Ext.Element">
              <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="pos" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setY" returns="Ext.Element">
              <description>Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="The" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="Ext.Element">
              <description>Show this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.</description>
              <params>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="swallowEvent" returns="Ext.Element">
              <description>Stops the specified event(s) from bubbling and optionally prevents the default action</description>
              <params>
                <param name="eventName" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="preventDefault" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggle" returns="Ext.Element">
              <description>Toggles the element's visibility or display, depending on visibility mode.</description>
              <params>
                <param name="animate" type="Boolean/Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggleClass" returns="Ext.Element">
              <description>Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="translatePoints" returns="Object">
              <description>Translates the passed page coordinates into left/top css values for this element</description>
              <params>
                <param name="x" type="Number/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="un" returns="Ext.Element">
              <description>Removes an event handler from this element (shorthand for removeListener).</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unclip" returns="Ext.Element">
              <description>Return clipping (overflow) to original clipping before clip() was called</description>
            </function>
            <function name="unmask" returns="void">
              <description>Removes a previously applied mask.</description>
            </function>
            <function name="unselectable" returns="Ext.Element">
              <description>Disables text selection for this element (normalized across browsers)</description>
            </function>
            <function name="up" returns="Ext.Element">
              <description>Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
This is a shortcut for findParentNode() that always returns an Ext.Element.</description>
              <params>
                <param name="selector" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxDepth" type="Number/Mixed" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="Ext.Element">
              <description>Update the innerHTML of this element, optionally searching for and processing scripts</description>
              <params>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="loadScripts" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="wrap" returns="HTMLElement/Element">
              <description>Creates and wraps this element with another element</description>
              <params>
                <param name="config" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnDom" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.EventManager" private="True" extends="Object">
          <description>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
several useful events directly.
See Ext.EventObject for more details on normalized event objects.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="ieDeferSrc" type="Object" readonly="False">
              <description>Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)</description>
            </attribute>
            <attribute name="textResizeInterval" type="Object" readonly="False">
              <description>The frequency, in milliseconds, to check for text resize events (defaults to 50)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="addListener" returns="void">
              <description>Appends an event handler to an element.  The shorthand version on is equivalent.  Typically you will
use Ext.Element.addListener directly on an Element in favor of calling this version.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>The html element or id to assign the event handler to</description>
                </param>
                <param name="eventName" type="String" optional="False">
                  <description>The html element or id to assign the event handler to</description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>The html element or id to assign the event handler to</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The html element or id to assign the event handler to</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>The html element or id to assign the event handler to</description>
                </param>
              </params>
            </function>
            <function name="on" returns="void">
              <description>Appends an event handler to an element.  Shorthand for addListener.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>The type of event to listen for</description>
                </param>
                <param name="eventName" type="String" optional="False">
                  <description>The type of event to listen for</description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>The type of event to listen for</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The type of event to listen for</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>The type of event to listen for</description>
                </param>
              </params>
            </function>
            <function name="onDocumentReady" returns="void">
              <description>Fires when the document is ready (before onload and before images are loaded). Can be
accessed shorthanded as Ext.onReady().</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>(optional) An object containing standard addListener options</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) An object containing standard addListener options</description>
                </param>
                <param name="options" type="boolean" optional="True">
                  <description>(optional) An object containing standard addListener options</description>
                </param>
              </params>
            </function>
            <function name="onTextResize" returns="void">
              <description>Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onWindowResize" returns="void">
              <description>Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeAll" returns="void">
              <description>Removes all event handers from an element.  Typically you will use Ext.Element.removeAllListeners
directly on an Element in favor of calling this version.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeListener" returns="void">
              <description>Removes an event handler from an element.  The shorthand version un is equivalent.  Typically
you will use Ext.Element.removeListener directly on an Element in favor of calling this version.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeResizeListener" returns="void">
              <description>Removes the passed window resize listener.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="un" returns="Boolean">
              <description>Removes an event handler from an element.  Shorthand for removeListener.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.EventObject" private="True" extends="Object">
          <description>EventObject exposes the Yahoo! UI Event functionality directly on the object
passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code
Example:
function handleClick(e){ // e is not a standard event object, it is a Ext.EventObject
    e.preventDefault();
    var target = e.getTarget();
    ...
 }
 var myDiv = Ext.get("myDiv");
 myDiv.on("click", handleClick);
 //or
 Ext.EventManager.on("myDiv", 'click', handleClick);
 Ext.EventManager.addListener("myDiv", 'click', handleClick);This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="A" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="ALT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="B" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="BACKSPACE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="C" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="CAPS_LOCK" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="CONTEXT_MENU" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="CTRL" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="D" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="DELETE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="DOWN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="E" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="EIGHT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="END" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="ENTER" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="ESC" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F1" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F10" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F11" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F12" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F2" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F3" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F4" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F5" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F6" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F7" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F8" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="F9" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="FIVE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="FOUR" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="G" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="H" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="HOME" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="I" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="INSERT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="J" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="K" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="L" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="LEFT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="M" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="N" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NINE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_CENTER" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_DIVISION" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_EIGHT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_FIVE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_FOUR" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_MINUS" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_MULTIPLY" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_NINE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_ONE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_PERIOD" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_PLUS" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_SEVEN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_SIX" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_THREE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_TWO" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="NUM_ZERO" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="O" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="ONE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="P" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="PAGE_DOWN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="PAGE_UP" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="PAUSE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="PRINT_SCREEN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="Q" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="R" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="RETURN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="RIGHT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="S" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="SEVEN" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="SHIFT" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="SIX" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="SPACE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="T" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="TAB" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="THREE" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="TWO" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="U" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="UP" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="V" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="W" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="X" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="Y" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="Z" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="ZERO" type="Number" readonly="False">
              <description>Key constant</description>
            </attribute>
            <attribute name="altKey" type="Object" readonly="False">
              <description>True if the alt key was down during the event</description>
            </attribute>
            <attribute name="browserEvent" type="Object" readonly="False">
              <description>The normal browser event</description>
            </attribute>
            <attribute name="button" type="Object" readonly="False">
              <description>The button pressed in a mouse event</description>
            </attribute>
            <attribute name="ctrlKey" type="Object" readonly="False">
              <description>True if the control key was down during the event</description>
            </attribute>
            <attribute name="shiftKey" type="Object" readonly="False">
              <description>True if the shift key was down during the event</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getCharCode" returns="Number">
              <description>Gets the character code for the event.</description>
            </function>
            <function name="getKey" returns="Number">
              <description>Returns a normalized keyCode for the event.</description>
            </function>
            <function name="getPageX" returns="Number">
              <description>Gets the x coordinate of the event.</description>
            </function>
            <function name="getPageY" returns="Number">
              <description>Gets the y coordinate of the event.</description>
            </function>
            <function name="getRelatedTarget" returns="HTMLElement">
              <description>Gets the related target.</description>
            </function>
            <function name="getTarget" returns="HTMLelement">
              <description>Gets the target for the event.</description>
              <params>
                <param name="selector" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="maxDepth" type="Number/Mixed" optional="True">
                  <description>
                  </description>
                </param>
                <param name="returnEl" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTime" returns="Number">
              <description>Gets the time of the event.</description>
            </function>
            <function name="getWheelDelta" returns="Number">
              <description>Normalizes mouse wheel delta across browsers</description>
            </function>
            <function name="getXY" returns="Array">
              <description>Gets the page coordinates of the event.</description>
            </function>
            <function name="hasModifier" returns="Boolean">
              <description>Returns true if the control, meta, shift or alt key was pressed during this event.</description>
            </function>
            <function name="preventDefault" returns="void">
              <description>Prevents the browsers default handling of the event.</description>
            </function>
            <function name="stopEvent" returns="void">
              <description>Stop the event (preventDefault and stopPropagation)</description>
            </function>
            <function name="stopPropagation" returns="void">
              <description>Cancels bubbling of the event.</description>
            </function>
            <function name="within" returns="Boolean">
              <description>Returns true if the target of this event is a child of el.  Unless the allowEl parameter is set, it will return false if if the target is el.
Example usage:// Handle click on any child of an element
Ext.getBody().on('click', function(e){
    if(e.within('some-el')){
        alert('Clicked on a child of some-el!');
    }
});

// Handle click directly on an element, ignoring clicks on child nodes
Ext.getBody().on('click', function(e,t){
    if((t.id == 'some-el') &amp;&amp; !e.within(t, true)){
        alert('Clicked directly on some-el!');
    }
});</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="related" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="allowEl" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Action" private="True" extends="Object">
          <description>The subclasses of this class provide actions to perform upon Forms.
Instances of this class are only created by a Form when
the Form needs to perform an action such as submit or load. The Configuration options
listed for this class are set through the Form's action methods: submit,
load and doAction
The instance of Action which performed the action is passed to the success
and failure callbacks of the Form's action methods (submit,
load and doAction),
and to the actioncomplete and
actionfailed event handlers.</description>
          <attributes>
            <attribute name="Action.CLIENT_INVALID" type="String" readonly="False">
              <description>&lt;static&gt; Failure type returned when client side validation of the Form fails
thus aborting a submit action.</description>
            </attribute>
            <attribute name="Action.CONNECT_FAILURE" type="String" readonly="False">
              <description>&lt;static&gt; Failure type returned when a communication error happens when attempting
to send a request to the remote server.</description>
            </attribute>
            <attribute name="Action.LOAD_FAILURE" type="String" readonly="False">
              <description>&lt;static&gt; Failure type returned when no field values are returned in the response's
data property.</description>
            </attribute>
            <attribute name="Action.SERVER_INVALID" type="String" readonly="False">
              <description>&lt;static&gt; Failure type returned when server side validation of the Form fails
indicating that field-specific error messages have been returned in the
response's errors property.</description>
            </attribute>
            <attribute name="failureType" type="String" readonly="False">
              <description>The type of failure detected. See Ext.form.Action#Action.CLIENT_INVALID CLIENT_INVALID,
Ext.form.Action#Action.SERVER_INVALID SERVER_INVALID,
Ext.form.ActionAction.CONNECT_FAILURE CONNECT_FAILURE, {@link Ext.form.Action#Action.LOAD_FAILURE LOAD_FAILURE}</description>
            </attribute>
            <attribute name="response" type="Object" readonly="False">
              <description>The XMLHttpRequest object used to perform the action.</description>
            </attribute>
            <attribute name="result" type="Object" readonly="False">
              <description>The decoded response object containing a boolean success property and
other, action-specific properties.</description>
            </attribute>
            <attribute name="type" type="String" readonly="False">
              <description>The type of action this Action instance performs.
Currently only "submit" and "load" are supported.</description>
            </attribute>
            <attribute name="Load" type="Ext.form.Action.Load" readonly="True" />
            <attribute name="Submit" type="Ext.form.Action.Submit" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.form.Action.Load" private="True" extends="Ext.form.Action">
          <description>A class which handles loading of data from a server into the Fields of an Ext.form.BasicForm.
Instances of this class are only created by a Form when
loading.
A response packet must contain a boolean success property, and
a data property. The data property
contains the values of Fields to load. The individual value object for each Field
is passed to the Field's setValue method.
By default, response packets are assumed to be JSON, so a typical response
packet may look like this:{
    success: true,
    data: {
        clientName: "Fred. Olsen Lines",
        portOfLoading: "FXT",
        portOfDischarge: "OSL"
    }
}
Other data may be placed into the response for processing the Form's callback
or event handler methods. The object decoded from this JSON is available in the result property.</description>
        </interface>
        <interface name="Ext.form.Action.Submit" private="True" extends="Ext.form.Action">
          <description>A class which handles submission of data from Forms
and processes the returned response.
Instances of this class are only created by a Form when
submitting.
A response packet must contain a boolean success property, and, optionally
an errors property. The errors property contains error
messages for invalid fields.
By default, response packets are assumed to be JSON, so a typical response
packet may look like this:{
    success: false,
    errors: {
        clientCode: "Client not found",
        portOfLoading: "This field must not be null"
    }
}
Other data may be placed into the response for processing by the Ext.form.BasicForm's callback
or event handler methods. The object decoded from this JSON is available in the result property.
Alternatively, if an errorReader is specified as an XmlReader:errorReader: new Ext.data.XmlReader({
            record : 'field',
            success: '@success'
        }, [
            'id', 'msg'
        ]
    )
then the results may be sent back in XML format:&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;message success="false"&gt;
&lt;errors&gt;
    &lt;field&gt;
        &lt;id&gt;clientCode&lt;/id&gt;
        &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
    &lt;/field&gt;
    &lt;field&gt;
        &lt;id&gt;portOfLoading&lt;/id&gt;
        &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
    &lt;/field&gt;
&lt;/errors&gt;
&lt;/message&gt;
Other elements may be placed into the response XML for processing by the Ext.form.BasicForm's callback
or event handler methods. The XML document is available in the errorReader's xmlData property.</description>
        </interface>
        <interface name="Ext.form.BasicForm" private="True" extends="Ext.util.Observable">
          <description>Encapsulates the DOM &lt;form&gt; element at the heart of the FormPanel class, and provides
input field management, validation, submission, and form loading services.
By default, Ext Forms are submitted through Ajax, using an instance of Ext.form.Action.Submit.
To enable normal browser submission of an Ext Form, use the standardSubmit config option.
File UploadsFile uploads are not performed using Ajax submission, that
is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard
manner with the DOM &lt;form&gt; element temporarily modified to have its
target set to refer
to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document
but removed after the return data has been gathered.
The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
Content-Type header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.
Characters which are significant to an HTML parser must be sent as HTML entities, so encode
"&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.
The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a responseText property in order to conform to the
requirements of event handlers and callbacks.
Be aware that file upload packets are sent with the content type multipart/form
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</description>
          <attributes>
            <attribute name="waitMsgTarget" type="Mixed" readonly="False">
              <description>By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
element by passing it or its id or mask the form itself by passing in true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="BasicForm" returns="BasicForm">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The form element or its id</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The form element or its id</description>
                </param>
              </params>
            </function>
            <function name="add" returns="BasicForm">
              <description>Add Ext.form Components to this form's Collection. This does not result in rendering of
the passed Component, it just enables the form to validate Fields, and distribute values to
Fields.
You will not usually call this function. In order to be rendered, a Field must be added
to a Container, usually an FormPanel.
The FormPanel to which the field is added takes care of adding the Field to the BasicForm's
collection.</description>
              <params>
                <param name="field1" type="Field" optional="False">
                  <description>(optional)</description>
                </param>
                <param name="field2" type="Field" optional="True">
                  <description>(optional)</description>
                </param>
                <param name="etc" type="Field" optional="True">
                  <description>(optional)</description>
                </param>
              </params>
            </function>
            <function name="applyIfToFields" returns="BasicForm">
              <description>Calls Ext.applyIf for all field in this form with the passed object.</description>
              <params>
                <param name="values" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyToFields" returns="BasicForm">
              <description>Calls Ext.apply for all fields in this form with the passed object.</description>
              <params>
                <param name="values" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearInvalid" returns="BasicForm">
              <description>Clears all invalid messages in this form.</description>
            </function>
            <function name="doAction" returns="BasicForm">
              <description>Performs a predefined action (Ext.form.Action.Submit or
Ext.form.Action.Load) or a custom extension of Ext.form.Action
to perform application-specific processing.</description>
              <params>
                <param name="actionName" type="String/Object" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>The form that requested the action</description>
                </param>
                <param name="form" type="Ext.form.BasicForm" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="form" type="Ext.form.BasicForm" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="action" type="Ext.form.Action" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="form" type="Ext.form.BasicForm" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="form" type="Ext.form.BasicForm" optional="False">
                  <description>The form that requested the action</description>
                </param>
                <param name="action" type="Ext.form.Action" optional="False">
                  <description>The form that requested the action</description>
                </param>
              </params>
            </function>
            <function name="findField" returns="Field">
              <description>Find a Ext.form.Field in this form by id, dataIndex, name or hiddenName.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Ext.Element">
              <description>Get the HTML form Element</description>
            </function>
            <function name="getValues" returns="String/Object">
              <description>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
If multiple fields exist with the same name they are returned as an array.
Note: The values are collected from all enabled HTML input elements within the form, not from
the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the the
value can potentionally be the emptyText of a field.</description>
              <params>
                <param name="asString" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isDirty" returns="Boolean">
              <description>Returns true if any fields in this form have changed since their original load.</description>
            </function>
            <function name="isValid" returns="Boolean">
              <description>Returns true if client-side validation on the form is successful.</description>
            </function>
            <function name="load" returns="BasicForm">
              <description>Shortcut to do a load action.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="loadRecord" returns="BasicForm">
              <description>Loads an Ext.data.Record into this form.</description>
              <params>
                <param name="record" type="Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="markInvalid" returns="BasicForm">
              <description>Mark fields in this form invalid in bulk.</description>
              <params>
                <param name="errors" type="Array/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="BasicForm">
              <description>Removes a field from the items collection (does NOT remove its markup).</description>
              <params>
                <param name="field" type="Field" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="BasicForm">
              <description>Iterates through the Fields which have been added to this BasicForm,
checks them for an id attribute, and calls Ext.form.Field.applyToMarkup on the existing dom element with that id.</description>
            </function>
            <function name="reset" returns="BasicForm">
              <description>Resets this form.</description>
            </function>
            <function name="setValues" returns="BasicForm">
              <description>Set values for fields in this form in bulk.</description>
              <params>
                <param name="values" type="Array/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="submit" returns="BasicForm">
              <description>Shortcut to do a submit action.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateRecord" returns="BasicForm">
              <description>Persists the values in this form into the passed Ext.data.Record object in a beginEdit/endEdit block.</description>
              <params>
                <param name="record" type="Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Checkbox" private="True" extends="Ext.form.Field">
          <description>Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.</description>
          <functions>
            <function name="Checkbox" returns="Checkbox">
              <description>Creates a new Checkbox</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="Boolean">
              <description>Returns the checked state of the checkbox.</description>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the checked state of the checkbox.</description>
              <params>
                <param name="checked" type="Boolean/String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.CheckboxGroup" private="True" extends="Ext.form.Field">
          <description>A grouping container for Ext.form.Checkbox controls.</description>
          <functions>
            <function name="CheckboxGroup" returns="CheckboxGroup">
              <description>Creates a new CheckboxGroup</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.ComboBox" private="True" extends="Ext.form.TriggerField">
          <description>A combobox control with support for autocomplete, remote-loading, paging and many other features.
A ComboBox works in a similar manner to a traditional HTML &lt;select&gt; field. The difference is that to submit the
valueField, you must specify a hiddenName to create a hidden input field to hold the
value of the valueField. The displayField is shown in the text field which is named
according to the name.</description>
          <attributes>
            <attribute name="lastQuery" type="String" readonly="False">
              <description>The value of the match string used to filter the store. Delete this property to force a requery.</description>
            </attribute>
            <attribute name="view" type="Ext.DataView" readonly="False">
              <description>The DataView used to display the ComboBox's options.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ComboBox" returns="ComboBox">
              <description>Create a new ComboBox.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="clearValue" returns="void">
              <description>Clears any text/value currently set in the field</description>
            </function>
            <function name="collapse" returns="void">
              <description>Hides the dropdown list if it is currently expanded. Fires the collapse event on completion.</description>
            </function>
            <function name="doQuery" returns="void">
              <description>Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the
query allowing the query action to be canceled if needed.</description>
              <params>
                <param name="query" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="forceAll" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="expand" returns="void">
              <description>Expands the dropdown list if it is currently hidden. Fires the expand event on completion.</description>
            </function>
            <function name="getStore" returns="Ext.data.Store">
              <description>Returns the store associated with this combo.</description>
            </function>
            <function name="getValue" returns="String">
              <description>Returns the currently selected field value or empty string if no value is set.</description>
            </function>
            <function name="isExpanded" returns="void">
              <description>Returns true if the dropdown list is expanded, else false.</description>
            </function>
            <function name="select" returns="void">
              <description>Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scrollIntoView" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectByValue" returns="Boolean">
              <description>Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scrollIntoView" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setEditable" returns="void">
              <description>Allow or prevent the user from directly editing the field text.  If false is passed,
the user will only be able to select from the items defined in the dropdown list.  This method
is the runtime equivalent of setting the 'editable' config option at config time.</description>
              <params>
                <param name="value" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the specified value into the field.  If the value finds a match, the corresponding record text
will be displayed in the field.  If the value does not match the data value of an existing item,
and the valueNotFoundText config option is defined, it will be displayed as the default field text.
Otherwise the field will be blank (although the value will still be set).</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.DateField" private="True" extends="Ext.form.TriggerField">
          <description>Provides a date input field with a Ext.DatePicker dropdown and automatic date validation.</description>
          <functions>
            <function name="DateField" returns="DateField">
              <description>Create a new DateField</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="Date">
              <description>Returns the current date value of the date field.</description>
            </function>
            <function name="setDisabledDates" returns="void">
              <description>Replaces any existing disabled dates with new values and refreshes the DatePicker.</description>
              <params>
                <param name="disabledDates" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDisabledDays" returns="void">
              <description>Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.</description>
              <params>
                <param name="disabledDays" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMaxValue" returns="void">
              <description>Replaces any existing maxValue with the new value and refreshes the DatePicker.</description>
              <params>
                <param name="value" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMinValue" returns="void">
              <description>Replaces any existing minValue with the new value and refreshes the DatePicker.</description>
              <params>
                <param name="value" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid
date, using DateField.format as the date format, according to the same rules as Date.parseDate
(the default format used is "m/d/Y").
Usage:
//All of these calls set the same date value (May 4, 2006)

//Pass a date object:
var dt = new Date('5/4/2006');
dateField.setValue(dt);

//Pass a date string (default format):
dateField.setValue('05/04/2006');

//Pass a date string (custom format):
dateField.format = 'Y-m-d';
dateField.setValue('2006-05-04');</description>
              <params>
                <param name="date" type="String/Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Field" private="True" extends="Ext.BoxComponent">
          <description>Base class for form fields that provides default event handling, sizing, value handling and other functionality.</description>
          <functions>
            <function name="Field" returns="Field">
              <description>Creates a new Field</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="clearInvalid" returns="void">
              <description>Clear any invalid styles/messages for this field</description>
            </function>
            <function name="getName" returns="String">
              <description>Returns the name attribute of the field if available</description>
            </function>
            <function name="getRawValue" returns="Mixed">
              <description>Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see getValue.</description>
            </function>
            <function name="getValue" returns="Mixed">
              <description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description>
            </function>
            <function name="isDirty" returns="void">
              <description>Returns true if this field has been changed since it was originally loaded and is not disabled.</description>
            </function>
            <function name="isValid" returns="Boolean">
              <description>Returns whether or not the field value is currently valid</description>
              <params>
                <param name="preventMark" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="markInvalid" returns="void">
              <description>Mark this field as invalid, using msgTarget to determine how to display the error and
applying invalidClass to the field's element.</description>
              <params>
                <param name="msg" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="void">
              <description>Resets the current field value to the originally loaded value and clears any validation messages</description>
            </function>
            <function name="setRawValue" returns="Mixed">
              <description>Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see setValue.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValue" returns="void">
              <description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="validate" returns="Boolean">
              <description>Validates the field value</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.FieldSet" private="True" extends="Ext.Panel">
          <description>Standard container used for grouping form fields.</description>
          <functions>
            <function name="FieldSet" returns="FieldSet">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.FormPanel" private="True" extends="Ext.Panel">
          <description>Standard form container.
Although they are not listed, this class also accepts all the config options required to configure its internal Ext.form.BasicForm
The BasicForm is configured using the initialConfig of the FormPanel - that is the configuration object passed to the constructor.
This means that if you subclass FormPanel, and you wish to configure the BasicForm, you will need to insert any configuration options
for the BasicForm into the initialConfig property. Applying BasicForm configuration settings to this will
not affect the BasicForm's configuration.
By default, FormPanel uses an Ext.layout.FormLayout layout manager, which styles and renders fields and labels correctly.
When nesting additional Containers within a FormPanel, you should ensure that any descendant Containers which
host input Fields use the Ext.layout.FormLayout layout manager.
By default, Ext Forms are submitted through Ajax, using Ext.form.Action.
To enable normal browser submission of the Ext Form contained in this FormPanel,
use the standardSubmit) option:var myForm = new Ext.form.FormPanel({
    standardSubmit: true,
    items: myFieldset
);</description>
          <functions>
            <function name="FormPanel" returns="FormPanel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="getForm" returns="Ext.form.BasicForm">
              <description>Provides access to the Form which this Panel contains.</description>
            </function>
            <function name="load" returns="void">
              <description>This is a proxy for the underlying BasicForm's Ext.form.BasicForm.load call.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="startMonitoring" returns="void">
              <description>Starts monitoring of the valid state of this form. Usually this is done by passing the config
option "monitorValid"</description>
            </function>
            <function name="stopMonitoring" returns="void">
              <description>Stops monitoring of the valid state of this form</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Hidden" private="True" extends="Ext.form.Field">
          <description>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.</description>
          <functions>
            <function name="Hidden" returns="Hidden">
              <description>Create a new Hidden field.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.HtmlEditor" private="True" extends="Ext.form.Field">
          <description>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be
automatically hidden when needed.  These are noted in the config options where appropriate.
The editor's toolbar buttons have tooltips defined in the buttonTips property, but they are not
enabled by default unless the global Ext.QuickTips singleton is initialized.
Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT
supported by this editor.
An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an Editor within
any element that has display set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading bugs.
Example usage:
// Simple example rendered with default options:
Ext.QuickTips.init();  // enable tooltips
new Ext.form.HtmlEditor({
    renderTo: Ext.getBody(),
    width: 800,
    height: 300
});

// Passed via xtype into a container and with custom options:
Ext.QuickTips.init();  // enable tooltips
new Ext.Panel({
    title: 'HTML Editor',
    renderTo: Ext.getBody(),
    width: 600,
    height: 300,
    frame: true,
    layout: 'fit',
    items: {
        xtype: 'htmleditor',
        enableColors: false,
        enableAlignments: false
    }
});</description>
          <attributes>
            <attribute name="buttonTips" type="Object" readonly="False">
              <description>Object collection of toolbar tooltips for the buttons in the editor. The key
is the command id associated with that button and the value is a valid QuickTips object.
For example:
{
    bold : {
        title: 'Bold (Ctrl+B)',
        text: 'Make the selected text bold.',
        cls: 'x-html-editor-tip'
    },
    italic : {
        title: 'Italic (Ctrl+I)',
        text: 'Make the selected text italic.',
        cls: 'x-html-editor-tip'
    },
    ...</description>
            </attribute>
          </attributes>
          <functions>
            <function name="HtmlEditor" returns="HtmlEditor">
              <description>Create a new HtmlEditor</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cleanHtml" returns="String">
              <description>Protected method that will not generally be called directly. If you need/want
custom HTML cleanup, this is the method you should override.</description>
              <params>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="execCmd" returns="void">
              <description>Executes a Midas editor command directly on the editor document.
For visual commands, you should use relayCmd instead.
This should only be called after the editor is initialized.</description>
              <params>
                <param name="cmd" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDocMarkup" returns="void">
              <description>Protected method that will not generally be called directly. It
is called when the editor initializes the iframe with HTML contents. Override this method if you
want to change the initialization markup of the iframe (e.g. to add stylesheets).</description>
            </function>
            <function name="getToolbar" returns="Ext.Toolbar">
              <description>Returns the editor's toolbar. This is only available after the editor has been rendered.</description>
            </function>
            <function name="insertAtCursor" returns="void">
              <description>Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
to insert text.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="pushValue" returns="void">
              <description>Protected method that will not generally be called directly. Pushes the value of the textarea
into the iframe editor.</description>
            </function>
            <function name="relayCmd" returns="void">
              <description>Executes a Midas editor command on the editor document and performs necessary focus and
toolbar updates. This should only be called after the editor is initialized.</description>
              <params>
                <param name="cmd" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="syncValue" returns="void">
              <description>Protected method that will not generally be called directly. Syncs the contents
of the editor iframe with the textarea.</description>
            </function>
            <function name="toggleSourceEdit" returns="void">
              <description>Toggles the editor between standard and source edit mode.</description>
              <params>
                <param name="sourceEdit" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateToolbar" returns="void">
              <description>Protected method that will not generally be called directly. It triggers
a toolbar update by reading the markup state of the current selection in the editor.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Label" private="True" extends="Ext.BoxComponent">
          <description>Basic Label field.</description>
          <functions>
            <function name="Label" returns="Label">
              <description>Creates a new Label</description>
              <params>
                <param name="config" type="Ext.Element/String/Object" optional="False">
                  <description>The configuration options. If an element is passed, it is set as the internal
element and its id used as the component id. If a string is passed, it is assumed to be the id of an existing element
and is used as the component id. Otherwise, it is assumed to be a standard config object and is applied to the component.</description>
                </param>
              </params>
            </function>
            <function name="setText" returns="Label">
              <description>Updates the label's innerHTML with the specified string.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>(optional) False to skip HTML-encoding the text when rendering it
to the label (defaults to true which encodes the value). This might be useful if you want to include
tags in the label's innerHTML rather than rendering them as string literals per the default logic.</description>
                </param>
                <param name="encode" type="Boolean" optional="True">
                  <description>(optional) False to skip HTML-encoding the text when rendering it
to the label (defaults to true which encodes the value). This might be useful if you want to include
tags in the label's innerHTML rather than rendering them as string literals per the default logic.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.NumberField" private="True" extends="Ext.form.TextField">
          <description>Numeric text field that provides automatic keystroke filtering and numeric validation.</description>
          <functions>
            <function name="NumberField" returns="NumberField">
              <description>Creates a new NumberField</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.Radio" private="True" extends="Ext.form.Checkbox">
          <description>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</description>
          <functions>
            <function name="Radio" returns="Radio">
              <description>Creates a new Radio</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="getGroupValue" returns="String">
              <description>If this radio is part of a group, it will return the selected value</description>
            </function>
            <function name="setValue" returns="void">
              <description>Sets either the checked/unchecked status of this Radio, or, if a string value
is passed, checks a sibling Radio of the same name whose value is the value specified.</description>
              <params>
                <param name="{String/Boolean}" type="value" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.RadioGroup" private="True" extends="Ext.form.CheckboxGroup">
          <description>A grouping container for Ext.form.Radio controls.</description>
          <functions>
            <function name="RadioGroup" returns="RadioGroup">
              <description>Creates a new RadioGroup</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.TextArea" private="True" extends="Ext.form.TextField">
          <description>Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
support for auto-sizing.</description>
          <functions>
            <function name="TextArea" returns="TextArea">
              <description>Creates a new TextArea</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="autoSize" returns="void">
              <description>Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
This only takes effect if grow = true, and fires the autosize event if the height changes.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.TextField" private="True" extends="Ext.form.Field">
          <description>Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base
class for more sophisticated input controls (like Ext.form.TextArea and Ext.form.ComboBox).</description>
          <functions>
            <function name="TextField" returns="TextField">
              <description>Creates a new TextField</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="autoSize" returns="void">
              <description>Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
This only takes effect if grow = true, and fires the autosize event.</description>
            </function>
            <function name="initComponent" returns="void">
              <description>
              </description>
            </function>
            <function name="reset" returns="void">
              <description>Resets the current field value to the originally-loaded value and clears any validation messages.
Also adds emptyText and emptyClass if the original value was blank.</description>
            </function>
            <function name="selectText" returns="void">
              <description>Selects text in this field</description>
              <params>
                <param name="start" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="end" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="validateValue" returns="Boolean">
              <description>Validates a value according to the field's validation rules and marks the field as invalid
if the validation fails</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.TimeField" private="True" extends="Ext.form.ComboBox">
          <description>Provides a time input field with a time dropdown and automatic time validation.  Example usage:
new Ext.form.TimeField({
    minValue: '9:00 AM',
    maxValue: '6:00 PM',
    increment: 30
});</description>
          <functions>
            <function name="TimeField" returns="TimeField">
              <description>Create a new TimeField</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.TriggerField" private="True" extends="Ext.form.TextField">
          <description>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
The trigger has no default action, so you must assign a function to implement the trigger click handler by
overriding onTriggerClick. You can create a TriggerField directly, as it renders exactly like a combobox
for which you can provide a custom implementation.  For example:
var trigger = new Ext.form.TriggerField();
trigger.onTriggerClick = myTriggerFn;
trigger.applyToMarkup('my-field');
However, in general you will most likely want to use TriggerField as the base class for a reusable component.
Ext.form.DateField and Ext.form.ComboBox are perfect examples of this.</description>
          <functions>
            <function name="TriggerField" returns="TriggerField">
              <description>Create a new TriggerField.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options (valid {@Ext.form.TextField} config options will also be applied
to the base TextField)</description>
                </param>
              </params>
            </function>
            <function name="onTriggerClick" returns="void">
              <description>The function that should handle the trigger's click event.  This method does nothing by default until overridden
by an implementing function.</description>
              <params>
                <param name="e" type="EventObject" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.form.VTypes" private="True" extends="Object">
          <description>This is a singleton object which contains a set of commonly used field validation functions.
The validations provided are basic and intended to be easily customizable and extended. To add
your own custom VType:Ext.apply(Ext.form.VTypes, {
    IPAddress:  function(v) {
        return /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(v);
    },
    IPAddressText: 'Must be a numeric IP address'
});This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="alphaMask" type="RegExp" readonly="False">
              <description>The keystroke filter mask to be applied on alpha input</description>
            </attribute>
            <attribute name="alphaText" type="String" readonly="False">
              <description>The error text to display when the alpha validation function returns false</description>
            </attribute>
            <attribute name="alphanumMask" type="RegExp" readonly="False">
              <description>The keystroke filter mask to be applied on alphanumeric input</description>
            </attribute>
            <attribute name="alphanumText" type="String" readonly="False">
              <description>The error text to display when the alphanumeric validation function returns false</description>
            </attribute>
            <attribute name="emailMask" type="RegExp" readonly="False">
              <description>The keystroke filter mask to be applied on email input.  See the email method for
information about more complex email validation.</description>
            </attribute>
            <attribute name="emailText" type="String" readonly="False">
              <description>The error text to display when the email validation function returns false</description>
            </attribute>
            <attribute name="urlText" type="String" readonly="False">
              <description>The error text to display when the url validation function returns false</description>
            </attribute>
          </attributes>
          <functions>
            <function name="alpha" returns="void">
              <description>The function used to validate alpha values</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>The value</description>
                </param>
              </params>
            </function>
            <function name="alphanum" returns="void">
              <description>The function used to validate alphanumeric values</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="email" returns="void">
              <description>The function used to validate email addresses.  Note that this is a very basic validation -- complete
validation per the email RFC specifications is very complex and beyond the scope of this class, although
this function can be overridden if a more comprehensive validation scheme is desired.  See the validation
section of the Wikipedia article on email addresses
for additional information.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="url" returns="void">
              <description>The function used to validate URLs</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Fx" private="True" extends="Object">
          <description>A class to provide basic animation and visual effects support.  Note: This class is automatically applied
to the Ext.Element interface when included, so all effects calls should be performed via Element.
Conversely, since the effects are not actually defined in Element, Ext.Fx must be included in order for the
Element effects to work.
It is important to note that although the Fx methods and many non-Fx Element methods support "method chaining" in that
they return the Element object itself as the method return value, it is not always possible to mix the two in a single
method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
expected results and should be done with care.
Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:
Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section
below are common options that can be passed to any Fx method.</description>
          <functions>
            <function name="fadeIn" returns="Ext.Element">
              <description>Fade an element in (from transparent to opaque).  The ending opacity can be specified
using the "endOpacity" config option.
Usage:
// default: fade in from opacity 0 to 100%
el.fadeIn();

// custom: fade in from opacity 0 to 75% over 2 seconds
el.fadeIn({ endOpacity: .75, duration: 2});

// common config options shown with default values
el.fadeIn({
    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
});</description>
              <params>
                <param name="options" type="Object" optional="True">
                  <description>(optional) Object literal with any of the Fx config options</description>
                </param>
              </params>
            </function>
            <function name="fadeOut" returns="Ext.Element">
              <description>Fade an element out (from opaque to transparent).  The ending opacity can be specified
using the "endOpacity" config option.  Note that IE may require useDisplay:true in order
to redisplay correctly.
Usage:
// default: fade out from the element's current opacity to 0
el.fadeOut();

// custom: fade out from the element's current opacity to 25% over 2 seconds
el.fadeOut({ endOpacity: .25, duration: 2});

// common config options shown with default values
el.fadeOut({
    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description>
              <params>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="frame" returns="Ext.Element">
              <description>Shows a ripple of exploding, attenuating borders to draw attention to an Element.
Usage:
// default: a single light blue ripple
el.frame();

// custom: 3 red ripples lasting 3 seconds total
el.frame("ff0000", 3, { duration: 3 });

// common config options shown with default values
el.frame("C3DAF9", 1, {
    duration: 1 //duration of each individual ripple.
    // Note: Easing is not configurable and will be ignored if included
});</description>
              <params>
                <param name="color" type="String" optional="True">
                  <description>(optional) Object literal with any of the Fx config options</description>
                </param>
                <param name="count" type="Number" optional="True">
                  <description>(optional) Object literal with any of the Fx config options</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>(optional) Object literal with any of the Fx config options</description>
                </param>
              </params>
            </function>
            <function name="ghost" returns="Ext.Element">
              <description>Slides the element while fading it out of view.  An anchor point can be optionally passed to set the
ending point of the effect.
Usage:
// default: slide the element downward while fading out
el.ghost();

// custom: slide the element out to the right with a 2-second duration
el.ghost('r', { duration: 2 });

// common config options shown with default values
el.ghost('b', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description>
              <params>
                <param name="anchor" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasActiveFx" returns="Boolean">
              <description>Returns true if the element has any effects actively running or queued, else returns false.</description>
            </function>
            <function name="hasFxBlock" returns="Boolean">
              <description>Returns true if the element is currently blocking so that no other effect can be queued
until this effect is finished, else returns false if blocking is not set.  This is commonly
used to ensure that an effect initiated by a user action runs to completion prior to the
same effect being restarted (e.g., firing only one effect even if the user clicks several times).</description>
            </function>
            <function name="highlight" returns="Ext.Element">
              <description>Highlights the Element by setting a color (applies to the background-color by default, but can be
changed using the "attr" config option) and then fading back to the original color. If no original
color is available, you should provide the "endColor" config option which will be cleared after the animation.
Usage:
// default: highlight background to yellow
el.highlight();

// custom: highlight foreground text to blue for 2 seconds
el.highlight("0000ff", { attr: 'color', duration: 2 });

// common config options shown with default values
el.highlight("ffff9c", {
    attr: "background-color", //can be any valid CSS property (attribute) that supports a color value
    endColor: (current color) or "ffffff",
    easing: 'easeIn',
    duration: 1
});</description>
              <params>
                <param name="color" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="pause" returns="Ext.Element">
              <description>Creates a pause before any subsequent queued effects begin.  If there are
no effects queued after the pause it will have no effect.
Usage:
el.pause(1);</description>
              <params>
                <param name="seconds" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="puff" returns="Ext.Element">
              <description>Fades the element out while slowly expanding it in all directions.  When the effect is completed, the
element will be hidden (visibility = 'hidden') but block elements will still take up space in the document.
The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
// default
el.puff();

// common config options shown with default values
el.puff({
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description>
              <params>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scale" returns="Ext.Element">
              <description>Animates the transition of an element's dimensions from a starting height/width
to an ending height/width.
Usage:
// change height and width to 100x100 pixels
el.scale(100, 100);

// common config options shown with default values.  The height and width will default to
// the element's existing values if passed as null.
el.scale(
    [element's width],
    [element's height], {
	    easing: 'easeOut',
	    duration: .35
	}
);</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sequenceFx" returns="Ext.Element">
              <description>Ensures that all effects queued after sequenceFx is called on the element are
run in sequence.  This is the opposite of syncFx.</description>
            </function>
            <function name="shift" returns="Ext.Element">
              <description>Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
Any of these properties not specified in the config object will not be changed.  This effect
requires that at least one new dimension, position or opacity setting must be passed in on
the config object in order for the function to have any effect.
Usage:
// slide the element horizontally to x position 200 while changing the height and opacity
el.shift({ x: 200, height: 50, opacity: .8 });

// common config options shown with default values.
el.shift({
    width: [element's width],
    height: [element's height],
    x: [element's x position],
    y: [element's y position],
    opacity: [element's opacity],
    easing: 'easeOut',
    duration: .35
});</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="slideIn" returns="Ext.Element">
              <description>Slides the element into view.  An anchor point can be optionally passed to set the point of
origin for the slide effect.  This function automatically handles wrapping the element with
a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
// default: slide the element in from the top
el.slideIn();

// custom: slide the element in from the right with a 2-second duration
el.slideIn('r', { duration: 2 });

// common config options shown with default values
el.slideIn('t', {
    easing: 'easeOut',
    duration: .5
});</description>
              <params>
                <param name="anchor" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="slideOut" returns="Ext.Element">
              <description>Slides the element out of view.  An anchor point can be optionally passed to set the end point
for the slide effect.  When the effect is completed, the element will be hidden (visibility =
'hidden') but block elements will still take up space in the document.  The element must be removed
from the DOM using the 'remove' config option if desired.  This function automatically handles
wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
// default: slide the element out to the top
el.slideOut();

// custom: slide the element out to the right with a 2-second duration
el.slideOut('r', { duration: 2 });

// common config options shown with default values
el.slideOut('t', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description>
              <params>
                <param name="anchor" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopFx" returns="Ext.Element">
              <description>Stops any running effects and clears the element's internal effects queue if it contains
any additional effects that haven't started yet.</description>
            </function>
            <function name="switchOff" returns="Ext.Element">
              <description>Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
// default
el.switchOff();

// all config options shown with default values
el.switchOff({
    easing: 'easeIn',
    duration: .3,
    remove: false,
    useDisplay: false
});</description>
              <params>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="syncFx" returns="Ext.Element">
              <description>Ensures that all effects queued after syncFx is called on the element are
run concurrently.  This is the opposite of sequenceFx.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.AbstractSelectionModel" private="True" extends="Ext.util.Observable">
          <description>Abstract base class for grid SelectionModels.  It provides the interface that should be
implemented by descendant classes.  This class should not be directly instantiated.</description>
          <functions>
            <function name="AbstractSelectionModel" returns="AbstractSelectionModel">
              <description>
              </description>
            </function>
            <function name="isLocked" returns="Boolean">
              <description>Returns true if the selections are locked.</description>
            </function>
            <function name="lock" returns="void">
              <description>Locks the selections.</description>
            </function>
            <function name="unlock" returns="void">
              <description>Unlocks the selections.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.CellSelectionModel" private="True" extends="Ext.grid.AbstractSelectionModel">
          <description>This class provides the basic implementation for single cell selection in a grid. The object stored
as the selection and returned by getSelectedCell contains the following properties:

record : Ext.data.recordThe Record
which provides the data for the row containing the selection
cell : Ext.data.recordAn object containing the
following properties:

rowIndex : NumberThe index of the selected row
cellIndex : NumberThe index of the selected cell
Note that due to possible column reordering, the cellIndex should not be used as an index into
the Record's data. Instead, the name of the selected field should be determined
in order to retrieve the data value from the record by name:var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
    var data = record.get(fieldName);</description>
          <functions>
            <function name="CellSelectionModel" returns="CellSelectionModel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The object containing the configuration of this model.</description>
                </param>
              </params>
            </function>
            <function name="clearSelections" returns="void">
              <description>Clears all selections.</description>
              <params>
                <param name="true" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSelectedCell" returns="Array">
              <description>Returns the currently selected cell's row and column indexes as an array (e.g., [0, 0]).</description>
            </function>
            <function name="hasSelection" returns="Boolean">
              <description>Returns true if there is a selection.</description>
            </function>
            <function name="select" returns="void">
              <description>Selects a cell.</description>
              <params>
                <param name="rowIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="collIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.CheckboxSelectionModel" private="True" extends="Ext.grid.RowSelectionModel">
          <description>A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.</description>
          <functions>
            <function name="CheckboxSelectionModel" returns="CheckboxSelectionModel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.ColumnModel" private="True" extends="Ext.util.Observable">
          <description>This is the default implementation of a ColumnModel used by the Grid. This class is initialized
with an Array of column config objects.

An individual column's config object defines the header string, the Ext.data.Record
field the column draws its data from, an optional rendering function to provide customized
data formatting, and the ability to apply a CSS class to all cells in a column through its
id config option.
Usage:
var colModel = new Ext.grid.ColumnModel([
    { header: "Ticker", width: 60, sortable: true},
    { header: "Company Name", width: 150, sortable: true},
    { header: "Market Cap.", width: 100, sortable: true},
    { header: "$ Sales", width: 100, sortable: true, renderer: money},
    { header: "Employees", width: 100, sortable: true, resizable: false}
 ]);

The config options defined by this class are options which may appear in each
individual column definition. In order to use configuration options from the superclass,
specify the column configuration Array in the columns config property. eg:var colModel = new Ext.grid.ColumnModel({
    listeners: {
        widthchange: function(cm, colIndex, width) {
            saveConfig(colIndex, width);
        }
    },
    columns: [
        { header: "Ticker", width: 60, sortable: true},
        { header: "Company Name", width: 150, sortable: true},
        { header: "Market Cap.", width: 100, sortable: true},
        { header: "$ Sales", width: 100, sortable: true, renderer: money},
        { header: "Employees", width: 100, sortable: true, resizable: false}
     ]
});</description>
          <attributes>
            <attribute name="defaultSortable" type="Boolean" readonly="False">
              <description>Default sortable of columns which have no sortable specified (defaults to false)</description>
            </attribute>
            <attribute name="defaultWidth" type="Number" readonly="False">
              <description>The width of columns which have no width specified (defaults to 100)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ColumnModel" returns="ColumnModel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>An Array of column config objects. See this class's
config objects for details.</description>
                </param>
              </params>
            </function>
            <function name="findColumnIndex" returns="Number">
              <description>Finds the index of the first matching column for the given dataIndex.</description>
              <params>
                <param name="col" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCellEditor" returns="Ext.Editor">
              <description>Returns the editor defined for the cell/column.</description>
              <params>
                <param name="colIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="rowIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnById" returns="Object">
              <description>Returns the column for a specified id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnCount" returns="Number">
              <description>Returns the number of columns.</description>
              <params>
                <param name="visibleOnly" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnHeader" returns="String">
              <description>Returns the header for the specified column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnId" returns="String">
              <description>Returns the id of the column at the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnTooltip" returns="String">
              <description>Returns the tooltip for the specified column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnWidth" returns="Number">
              <description>Returns the width for the specified column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnsBy" returns="Array">
              <description>Returns the column configs that return true by the passed function that is called with (columnConfig, index)</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDataIndex" returns="String">
              <description>Returns the dataIndex for the specified column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getIndexById" returns="Number">
              <description>Returns the index for a specified column id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRenderer" returns="Function">
              <description>Returns the rendering (formatting) function defined for the column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTotalWidth" returns="Number">
              <description>Returns the total width of all columns.</description>
              <params>
                <param name="includeHidden" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isCellEditable" returns="Boolean">
              <description>Returns true if the cell is editable.</description>
              <params>
                <param name="colIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="rowIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isFixed" returns="void">
              <description>Returns true if the column width cannot be changed</description>
            </function>
            <function name="isHidden" returns="Boolean">
              <description>Returns true if the column is hidden.</description>
              <params>
                <param name="colIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isMenuDisabled" returns="Boolean">
              <description>Returns true if the specified column menu is disabled.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isResizable" returns="Boolean">
              <description>Returns true if the column can be resized</description>
            </function>
            <function name="isSortable" returns="Boolean">
              <description>Returns true if the specified column is sortable.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="moveColumn" returns="void">
              <description>Moves a column from one position to another.</description>
              <params>
                <param name="oldIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setColumnHeader" returns="void">
              <description>Sets the header for a column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="header" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setColumnTooltip" returns="void">
              <description>Sets the tooltip for a column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tooltip" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setColumnWidth" returns="void">
              <description>Sets the width for a column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setConfig" returns="void">
              <description>Reconfigures this column model according to the passed Array of column definition objects. For a description of
the individual properties of a column definition object, see the Config Options.
Causes the configchange event to be fired. A GridPanel using
this ColumnModel will listen for this event and refresh its UI automatically.</description>
              <params>
                <param name="config" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDataIndex" returns="void">
              <description>Sets the dataIndex for a column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dataIndex" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setEditable" returns="void">
              <description>Sets if a column is editable.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="editable" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setEditor" returns="void">
              <description>Sets the editor for a column.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="editor" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHidden" returns="void">
              <description>Sets if a column is hidden.</description>
              <params>
                <param name="colIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="hidden" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRenderer" returns="void">
              <description>Sets the rendering (formatting) function for a column.  See Ext.util.Format for some
default formatting functions.</description>
              <params>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.EditorGridPanel" private="True" extends="Ext.grid.GridPanel">
          <description>This class extends the GridPanel to provide cell editing on selected columns.
The editable columns are specified by providing an editor
in the column configuration.
Editability of columns may be controlled programatically by inserting an implementation
of isCellEditable into your ColumnModel.
Editing is performed on the value of the field specified by the column's
dataIndex in the backing Store
(so if you are using a renderer in order to display
transformed data, this must be accounted for).
If a value-to-description mapping is used to render a column, then a {Ext.form.Field#ComboBox ComboBox}
which uses the same value-to-description
mapping would be an appropriate editor.
If there is a more complex mismatch between the visible data in the grid, and the editable data in
the Store, then code to transform the data both before and after editing can be
injected using the beforeedit and afteredit events.</description>
          <attributes>
            <attribute name="activeEditor" type="Ext.Editor" readonly="False">
              <description>The currently active editor or null</description>
            </attribute>
          </attributes>
          <functions>
            <function name="EditorGridPanel" returns="EditorGridPanel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="startEditing" returns="void">
              <description>Starts editing the specified for the specified row/column</description>
              <params>
                <param name="rowIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="colIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopEditing" returns="void">
              <description>Stops any active editing</description>
              <params>
                <param name="cancel" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.GridDragZone" private="True" extends="Ext.dd.DragZone">
          <description>A customized implementation of a DragZone which provides default implementations of two of the
template methods of DragZone to enable dragging of the selected rows of a GridPanel.
A cooperating DropZone must be created who's template method implementations of
onNodeEnter, onNodeOver,
onNodeOut and onNodeDrop are able
to process the data which is provided.</description>
          <functions>
            <function name="afterRepair" returns="void">
              <description>An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight
the selected rows to show that they have not been dragged.</description>
            </function>
            <function name="getDragData" returns="void">
              <description>The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.
This data is available for processing in the onNodeEnter, onNodeOver,
onNodeOut and onNodeDrop methods of a cooperating DropZone.
The data object contains the following properties:
grid : Ext.Grid.GridPanelThe GridPanel from which the data is being dragged.
ddel : htmlElementAn htmlElement which provides the "picture" of the data being dragged.
rowIndex : NumberThe index of the row which receieved the mousedown gesture which triggered the drag.
selections : ArrayAn Array of the selected Records which are being dragged from the GridPanel.</description>
            </function>
            <function name="getRepairXY" returns="Array">
              <description>An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.
Called before a repair of an invalid drop to get the XY to animate to.</description>
              <params>
                <param name="e" type="EventObject" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onInitDrag" returns="void">
              <description>The provided implementation of the onInitDrag method. Sets the innerHTML of the drag proxy which provides the "picture"
of the data being dragged.
The innerHTML data is found by calling the owning GridPanel's getDragDropText.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.GridPanel" private="True" extends="Ext.Panel">
          <description>This class represents the primary interface of a component based grid control.
Usage:
var grid = new Ext.grid.GridPanel({
    store: new Ext.data.Store({
        reader: reader,
        data: xg.dummyData
    }),
    columns: [
        {id:'company', header: "Company", width: 200, sortable: true, dataIndex: 'company'},
        {header: "Price", width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},
        {header: "Change", width: 120, sortable: true, dataIndex: 'change'},
        {header: "% Change", width: 120, sortable: true, dataIndex: 'pctChange'},
        {header: "Last Updated", width: 135, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
    ],
    viewConfig: {
        forceFit: true,

//      Return CSS class to apply to rows depending upon data values
        getRowClass: function(record, index) {
            var c = record.get('change');
            if (c &lt; 0) {
                return 'price-fall';
            } else if (c &gt; 0) {
                return 'price-rise';
            }
        }
    },
    sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
    width:600,
    height:300,
    frame:true,
    title:'Framed with Checkbox Selection and Horizontal Scrolling',
    iconCls:'icon-grid'
});
Notes:
Although this class inherits many configuration options from base classes, some of them
(such as autoScroll, layout, items, etc) are not used by this class, and will have no effect.
A grid requires a width in which to scroll its columns, and a height in which to scroll its rows. The dimensions can either
be set through the height and width configuration options or automatically set by using the grid in a Container
who's layout provides sizing of its child items.
To access the data in a Grid, it is necessary to use the data model encapsulated
by the Store. See the cellclick event.</description>
          <attributes>
            <attribute name="ddText" type="String" readonly="False">
              <description>Configures the text in the drag proxy (defaults to "{0} selected row(s)").
{0} is replaced with the number of selected rows.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="GridPanel" returns="GridPanel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="getColumnModel" returns="Ext.grid.ColumnModel">
              <description>Returns the grid's ColumnModel.</description>
            </function>
            <function name="getDragDropText" returns="String">
              <description>Called to get grid's drag proxy text, by default returns this.ddText.</description>
            </function>
            <function name="getGridEl" returns="Element">
              <description>Returns the grid's underlying element.</description>
            </function>
            <function name="getSelectionModel" returns="Ext.grid.AbstractSelectionModel">
              <description>Returns the grid's SelectionModel.</description>
            </function>
            <function name="getStore" returns="Ext.data.Store">
              <description>Returns the grid's data store.</description>
            </function>
            <function name="getView" returns="Ext.grid.GridView">
              <description>Returns the grid's GridView object.</description>
            </function>
            <function name="reconfigure" returns="void">
              <description>Reconfigures the grid to use a different Store and Column Model.
The View will be bound to the new objects and refreshed.
Be aware that upon reconfiguring a GridPanel, certain existing settings may become
invalidated. For example the configured autoExpandColumn may no longer exist in the
new ColumnModel. Also, an existing PagingToolbar will still be bound
to the old Store, and will need rebinding. Any plugins might also need reconfiguring
with the new data.</description>
              <params>
                <param name="store" type="Ext.data.Store" optional="False">
                  <description>
                  </description>
                </param>
                <param name="colModel" type="Ext.grid.ColumnModel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.GridView" private="True" extends="Ext.util.Observable">
          <description>This class encapsulates the user interface of an Ext.grid.GridPanel.
Methods of this class may be used to access user interface elements to enable
special display effects. Do not change the DOM structure of the user interface.
This class does not provide ways to manipulate the underlying data. The data
model of a Grid is held in an Ext.data.Store.</description>
          <attributes>
            <attribute name="columnsText" type="String" readonly="False">
              <description>The text displayed in the "Columns" menu item</description>
            </attribute>
            <attribute name="dragZone" type="Ext.grid.GridDragZone" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="mainBody" type="Ext.Element" readonly="True">
              <description>The GridView's body Element which encapsulates all rows in the Grid. Element. Read-only.
This Element is only available after the GridPanel has been rendered.</description>
            </attribute>
            <attribute name="scrollOffset" type="Number" readonly="False">
              <description>The amount of space to reserve for the scrollbar (defaults to 19 pixels)</description>
            </attribute>
            <attribute name="sortAscText" type="String" readonly="False">
              <description>The text displayed in the "Sort Ascending" menu item</description>
            </attribute>
            <attribute name="sortClasses" type="Array" readonly="False">
              <description>The CSS classes applied to a header when it is sorted. (defaults to ["sort-asc", "sort-desc"])</description>
            </attribute>
            <attribute name="sortDescText" type="String" readonly="False">
              <description>The text displayed in the "Sort Descending" menu item</description>
            </attribute>
          </attributes>
          <functions>
            <function name="GridView" returns="GridView">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findRow" returns="The">
              <description>Return the HtmlElement representing the grid row which contains the passed element.</description>
              <params>
                <param name="el" type="Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findRowIndex" returns="The">
              <description>Return the index of the grid row which contains the passed element.</description>
              <params>
                <param name="el" type="Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focusCell" returns="void">
              <description>Focuses the specified cell.</description>
              <params>
                <param name="row" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focusRow" returns="void">
              <description>Focuses the specified row.</description>
              <params>
                <param name="row" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCell" returns="HtmlElement">
              <description>Returns the grid's &lt;TD&gt; HtmlElement at the specified coordinates.</description>
              <params>
                <param name="row" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="col" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getHeaderCell" returns="HtmlElement">
              <description>Return the &lt;TD&gt; HtmlElement which represents the Grid's header cell for the specified column index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRow" returns="HtmlElement">
              <description>Return the &lt;TR&gt; HtmlElement which represents a Grid row for the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRowClass" returns="String">
              <description>Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom
parameters to the row template for the current row to customize how it is rendered using the rowParams
parameter.  This function should return the CSS class name (or empty string '' for none) that will be added
to the row's wrapping div.  To apply multiple class names, simply return them space-delimited within the string
(e.g., 'my-class another-class').</description>
              <params>
                <param name="record" type="Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="rowParams" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="body" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bodyStyle" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cols" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="store" type="Store" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refresh" returns="void">
              <description>Refreshs the grid UI</description>
              <params>
                <param name="headersToo" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollToTop" returns="void">
              <description>Scrolls the grid to the top</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.GroupingView" private="True" extends="Ext.grid.GridView">
          <description>Adds the ability for single level grouping to the grid.
var grid = new Ext.grid.GridPanel({
    // A groupingStore is required for a GroupingView
    store: new Ext.data.GroupingStore({
        reader: reader,
        data: xg.dummyData,
        sortInfo:{field: 'company', direction: "ASC"},
        groupField:'industry'
    }),

    columns: [
        {id:'company',header: "Company", width: 60, sortable: true, dataIndex: 'company'},
        {header: "Price", width: 20, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},
        {header: "Change", width: 20, sortable: true, dataIndex: 'change', renderer: Ext.util.Format.usMoney},
        {header: "Industry", width: 20, sortable: true, dataIndex: 'industry'},
        {header: "Last Updated", width: 20, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
    ],

    view: new Ext.grid.GroupingView({
        forceFit:true,
        // custom grouping text template to display the number of items per group
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ? "Items" : "Item"]})'
    }),

    frame:true,
    width: 700,
    height: 450,
    collapsible: true,
    animCollapse: false,
    title: 'Grouping Example',
    iconCls: 'icon-grid',
    renderTo: document.body
});</description>
          <functions>
            <function name="GroupingView" returns="GroupingView">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapseAllGroups" returns="void">
              <description>Collapses all grouped rows.</description>
            </function>
            <function name="expandAllGroups" returns="void">
              <description>Expands all grouped rows.</description>
            </function>
            <function name="getGroupId" returns="String">
              <description>Dynamically tries to determine the groupId of a specific value</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggleAllGroups" returns="void">
              <description>Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.</description>
              <params>
                <param name="expanded" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggleGroup" returns="void">
              <description>Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.</description>
              <params>
                <param name="groupId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="expanded" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.PropertyColumnModel" private="True" extends="Ext.grid.ColumnModel">
          <description>A custom column model for the Ext.grid.PropertyGrid.  Generally it should not need to be used directly.</description>
          <functions>
            <function name="PropertyColumnModel" returns="PropertyColumnModel">
              <description>
              </description>
              <params>
                <param name="grid" type="Ext.grid.Grid" optional="False">
                  <description>The grid this store will be bound to</description>
                </param>
                <param name="source" type="Object" optional="False">
                  <description>The grid this store will be bound to</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.PropertyGrid" private="True" extends="Ext.grid.EditorGridPanel">
          <description>A specialized grid implementation intended to mimic the traditional property grid as typically seen in
development IDEs.  Each row in the grid represents a property of some object, and the data is stored
as a set of name/value pairs in Ext.grid.PropertyRecords.  Example usage:

var grid = new Ext.grid.PropertyGrid({
    title: 'Properties Grid',
    autoHeight: true,
    width: 300,
    renderTo: 'grid-ct',
    source: {
        "(name)": "My Object",
        "Created": new Date(Date.parse('10/15/2006')),
        "Available": false,
        "Version": .01,
        "Description": "A test object"
    }
});</description>
          <functions>
            <function name="PropertyGrid" returns="PropertyGrid">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The grid config object</description>
                </param>
              </params>
            </function>
            <function name="getSource" returns="Object">
              <description>Gets the source data object containing the property data.  See setSource for details regarding the
format of the data object.</description>
            </function>
            <function name="setSource" returns="void">
              <description>Sets the source data object containing the property data.  The data object can contain one or more name/value
pairs representing all of the properties of an object to display in the grid, and this data will automatically
be loaded into the grid's store.  The values should be supplied in the proper data type if needed,
otherwise string type will be assumed.  If the grid already contains data, this method will replace any
existing data.  See also the source config value.  Example usage:
grid.setSource({
    "(name)": "My Object",
    "Created": new Date(Date.parse('10/15/2006')),  // date type
    "Available": false,  // boolean type
    "Version": .01,      // decimal type
    "Description": "A test object"
});</description>
              <params>
                <param name="source" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.PropertyRecord" private="True" extends="Object">
          <description>A specific Ext.data.Record type that represents a name/value pair and is made to work with the
Ext.grid.PropertyGrid.  Typically, PropertyRecords do not need to be created directly as they can be
created implicitly by simply using the appropriate data configs either via the Ext.grid.PropertyGrid.source
config property or by calling Ext.grid.PropertyGrid.setSource.  However, if the need arises, these records
can also be created explicitly as shwon below.  Example usage:
var rec = new Ext.grid.PropertyRecord({
    name: 'Birthday',
    value: new Date(Date.parse('05/26/1972'))
});
// Add record to an already populated grid
grid.store.addSorted(rec);</description>
          <functions>
            <function name="PropertyRecord" returns="PropertyRecord">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A data object in the format: {name: [name], value: [value]}. The specified value's type
will be read automatically by the grid to determine the type of editor to use when displaying it.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.PropertyStore" private="True" extends="Ext.util.Observable">
          <description>A custom wrapper for the Ext.grid.PropertyGrid's Ext.data.Store. This class handles the mapping
between the custom data source objects supported by the grid and the Ext.grid.PropertyRecord format
required for compatibility with the underlying store. Generally this class should not need to be used directly --
the grid's data should be accessed from the underlying store via the store property.</description>
          <functions>
            <function name="PropertyStore" returns="PropertyStore">
              <description>
              </description>
              <params>
                <param name="grid" type="Ext.grid.Grid" optional="False">
                  <description>The grid this store will be bound to</description>
                </param>
                <param name="source" type="Object" optional="False">
                  <description>The grid this store will be bound to</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.RowNumberer" private="True" extends="Object">
          <description>This is a utility class that can be passed into a Ext.grid.ColumnModel as a column config that provides
an automatic row numbering column.
Usage:
 // This is a typical column config with the first column providing row numbers
 var colModel = new Ext.grid.ColumnModel([
    new Ext.grid.RowNumberer(),
    {header: "Name", width: 80, sortable: true},
    {header: "Code", width: 50, sortable: true},
    {header: "Description", width: 200, sortable: true}
 ]);</description>
          <functions>
            <function name="RowNumberer" returns="RowNumberer">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.grid.RowSelectionModel" private="True" extends="Ext.grid.AbstractSelectionModel">
          <description>The default SelectionModel used by Ext.grid.GridPanel.
It supports multiple selections and keyboard selection/navigation. The objects stored
as selections and returned by getSelected, and getSelections are
the Records which provide the data for the selected rows.</description>
          <functions>
            <function name="RowSelectionModel" returns="RowSelectionModel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearSelections" returns="void">
              <description>Clears all selections.</description>
            </function>
            <function name="deselectRange" returns="void">
              <description>Deselects a range of rows. All rows in between startRow and endRow are also deselected.</description>
              <params>
                <param name="startRow" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="endRow" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselectRow" returns="void">
              <description>Deselects a row.</description>
              <params>
                <param name="row" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="each" returns="Boolean">
              <description>Calls the passed function with each selection. If the function returns false, iteration is
stopped and this function returns false. Otherwise it returns true.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCount" returns="Number">
              <description>Gets the number of selected rows.</description>
            </function>
            <function name="getSelected" returns="Record">
              <description>Returns the first selected record.</description>
            </function>
            <function name="getSelections" returns="Array">
              <description>Returns the selected records</description>
            </function>
            <function name="hasNext" returns="Boolean">
              <description>Returns true if there is a next record to select</description>
            </function>
            <function name="hasPrevious" returns="Boolean">
              <description>Returns true if there is a previous record to select</description>
            </function>
            <function name="hasSelection" returns="Boolean">
              <description>Returns True if there is a selection.</description>
            </function>
            <function name="isIdSelected" returns="Boolean">
              <description>Returns True if the specified record id is selected.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns True if the specified row is selected.</description>
              <params>
                <param name="record" type="Number/Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectAll" returns="void">
              <description>Selects all rows.</description>
            </function>
            <function name="selectFirstRow" returns="void">
              <description>Selects the first row in the grid.</description>
            </function>
            <function name="selectLastRow" returns="void">
              <description>Select the last row.</description>
              <params>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectNext" returns="Boolean">
              <description>Selects the row immediately following the last selected row.</description>
              <params>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectPrevious" returns="Boolean">
              <description>Selects the row that precedes the last selected row.</description>
              <params>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRange" returns="void">
              <description>Selects a range of rows. All rows in between startRow and endRow are also selected.</description>
              <params>
                <param name="startRow" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="endRow" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRecords" returns="void">
              <description>Select records.</description>
              <params>
                <param name="records" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRow" returns="void">
              <description>Selects a row.</description>
              <params>
                <param name="row" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRows" returns="void">
              <description>Selects multiple rows.</description>
              <params>
                <param name="rows" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.History" private="True" extends="Ext.util.Observable">
          <description>History management component that allows you to register arbitrary tokens that signify application
history state on navigation actions.  You can then handle the history change event in order
to reset your application UI to the appropriate state when the user navigates forward or backward through
the browser history stack.This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="fieldId" type="String" readonly="False">
              <description>The id of the hidden field required for storing the current history token.</description>
            </attribute>
            <attribute name="iframeId" type="String" readonly="False">
              <description>The id of the iframe required by IE to manage the history stack.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="add" returns="void">
              <description>Add a new token to the history stack. This can be any arbitrary value, although it would
commonly be the concatenation of a component id and another id marking the specifc history
state of that component.  Example usage:
// Handle tab changes on a TabPanel
tabPanel.on('tabchange', function(tabPanel, tab){
    Ext.History.add(tabPanel.id + ':' + tab.id);
});</description>
              <params>
                <param name="token" type="String" optional="False">
                  <description>The value that defines a particular application-specific history state</description>
                </param>
                <param name="preventDuplicates" type="Boolean" optional="False">
                  <description>The value that defines a particular application-specific history state</description>
                </param>
              </params>
            </function>
            <function name="back" returns="void">
              <description>Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).</description>
            </function>
            <function name="forward" returns="void">
              <description>Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).</description>
            </function>
            <function name="getToken" returns="String">
              <description>Retrieves the currently-active history token.</description>
            </function>
            <function name="init" returns="void">
              <description>Initialize the global History instance.</description>
              <params>
                <param name="onReady" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.KeyMap" private="True" extends="Object">
          <description>Handles mapping keys to actions for an element. One key map can be used for multiple actions.
The constructor accepts the same config object as defined by addBinding.
If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
combination it will call the function with this signature (if the match is a multi-key
combination the callback will still be called only once): (String key, Ext.EventObject e)
A KeyMap can also handle a string representation of keys.
Usage:
 // map one key by key code
var map = new Ext.KeyMap("my-element", {
    key: 13, // or Ext.EventObject.ENTER
    fn: myHandler,
    scope: myObject
});

// map multiple keys to one action by string
var map = new Ext.KeyMap("my-element", {
    key: "a\r\n\t",
    fn: myHandler,
    scope: myObject
});

// map multiple keys to multiple actions by strings and array of codes
var map = new Ext.KeyMap("my-element", [
    {
        key: [10,13],
        fn: function(){ alert("Return was pressed"); }
    }, {
        key: "abc",
        fn: function(){ alert('a, b or c was pressed'); }
    }, {
        key: "\t",
        ctrl:true,
        shift:true,
        fn: function(){ alert('Control + shift + tab was pressed.'); }
    }
]);
Note: A KeyMap starts enabled</description>
          <attributes>
            <attribute name="stopEvent" type="Boolean" readonly="False">
              <description>True to stop the event from bubbling and prevent the default browser action if the
key was handled by the KeyMap (defaults to false)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="KeyMap" returns="KeyMap">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The element to bind to</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The element to bind to</description>
                </param>
                <param name="eventName" type="String" optional="True">
                  <description>The element to bind to</description>
                </param>
              </params>
            </function>
            <function name="addBinding" returns="void">
              <description>Add a new binding to this KeyMap. The following config object properties are supported:
Property    Type             Description
----------  ---------------  ----------------------------------------------------------------------
key         String/Array     A single keycode or an array of keycodes to handle
shift       Boolean          True to handle key only when shift is pressed (defaults to false)
ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)
alt         Boolean          True to handle key only when alt is pressed (defaults to false)
handler     Function         The function to call when KeyMap finds the expected key combination
fn          Function         Alias of handler (for backwards-compatibility)
scope       Object           The scope of the callback function
stopEvent   Boolean          True to stop the event
Usage:
// Create a KeyMap
var map = new Ext.KeyMap(document, {
    key: Ext.EventObject.ENTER,
    fn: handleKey,
    scope: this
});

//Add a new binding to the existing KeyMap later
map.addBinding({
    key: 'abc',
    shift: true,
    fn: handleKey,
    scope: this
});</description>
              <params>
                <param name="config" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disable this KeyMap</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables this KeyMap</description>
            </function>
            <function name="isEnabled" returns="Boolean">
              <description>Returns true if this KeyMap is enabled</description>
            </function>
            <function name="on" returns="void">
              <description>Shorthand for adding a single key listener</description>
              <params>
                <param name="key" type="Number/Array/Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.KeyNav" private="True" extends="Object">
          <description>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
navigation keys to function calls that will get called when the keys are pressed, providing an easy
way to implement custom navigation schemes for any UI component.
The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
pageUp, pageDown, del, home, end.  Usage:
 var nav = new Ext.KeyNav("my-element", {
    "left" : function(e){
        this.moveLeft(e.ctrlKey);
    },
    "right" : function(e){
        this.moveRight(e.ctrlKey);
    },
    "enter" : function(e){
        this.save();
    },
    scope : this
});</description>
          <functions>
            <function name="KeyNav" returns="KeyNav">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The element to bind to</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The element to bind to</description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disable this KeyNav</description>
            </function>
            <function name="enable" returns="void">
              <description>Enable this KeyNav</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Layer" private="True" extends="Ext.Element">
          <description>An extended Ext.Element object that supports a shadow and shim, constrain to viewport and
automatic maintaining of shadow/shim positions.</description>
          <functions>
            <function name="Layer" returns="Layer">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>An object with config options.</description>
                </param>
                <param name="existingEl" type="String/HTMLElement" optional="True">
                  <description>An object with config options.</description>
                </param>
              </params>
            </function>
            <function name="setZIndex" returns="this">
              <description>Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow
element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).</description>
              <params>
                <param name="zindex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.layout.AbsoluteLayout" private="True" extends="Ext.layout.AnchorLayout">
          <description>Inherits the anchoring of Ext.layout.AnchorLayout and adds the ability for x/y positioning using the
standard x and y component config options.</description>
        </interface>
        <interface name="Ext.layout.Accordion" private="True" extends="Ext.layout.FitLayout">
          <description>This is a layout that contains multiple panels in an expandable accordion style such that only one
panel can be open at any given time.  Each panel has built-in support for expanding and collapsing.
This class is intended to be extended or created via the layout:'accordion' Ext.Container.layout
config, and should generally not need to be created directly via the new keyword.
Note that when creating a layout via config, the layout-specific config properties must be passed in via
the Ext.Container.layoutConfig object which will then be applied internally to the layout.
Example usage:
var accordion = new Ext.Panel({
    title: 'Accordion Layout',
    layout:'accordion',
    defaults: {
        // applied to each contained panel
        bodyStyle: 'padding:15px'
    },
    layoutConfig: {
        // layout-specific configs go here
        titleCollapse: false,
        animate: true,
        activeOnTop: true
    },
    items: [{
        title: 'Panel 1',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    },{
        title: 'Panel 2',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    },{
        title: 'Panel 3',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    }]
});</description>
        </interface>
        <interface name="Ext.layout.AnchorLayout" private="True" extends="Ext.layout.ContainerLayout">
          <description>This is a layout that enables anchoring of contained elements relative to the container's dimensions.  If
the container is resized, all anchored items are automatically rerendered according to their anchor rules.
This class is intended to be extended or created via the layout:'anchor' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
AnchorLayout does not have any direct config options (other than inherited ones).  However, the container
using the AnchorLayout can supply an anchoring-specific config property of anchorSize.  By default,
AnchorLayout will calculate anchor measurements based on the size of the container itself.  However, if
anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating anchor
measurements based on it instead, allowing the container to be sized independently of the anchoring logic if necessary.
The items added to an AnchorLayout can also supply an anchoring-specific config property of anchor which
is a string containing two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%').
This value is what tells the layout how the item should be anchored to the container.  The following types of
anchor values are supported:

Percentage: Any value between 1 and 100, expressed as a percentage.  The first anchor is the percentage
width that the item should take up within the container, and the second is the percentage height.  Example: '100% 50%'
would render an item the complete width of the container and 1/2 its height.  If only one anchor value is supplied
it is assumed to be the width value and the height will default to auto.
Offsets: Any positive or negative integer value.  The first anchor is the offset from the right edge of
the container, and the second is the offset from the bottom edge.  Example: '-50 -100' would render an item the
complete width of the container minus 50 pixels and the complete height minus 100 pixels.  If only one anchor value
is supplied it is assumed to be the right offset value and the bottom offset will default to 0.
Sides: Valid values are 'right' (or 'r') and 'bottom' (or 'b').  Either the container must have a fixed
size or an anchorSize config value defined at render time in order for these to have any effect.

Anchor values can also be mixed as needed.  For example, '-50 75%' would render the width offset from the
container right edge by 50 pixels and 75% of the container's height.</description>
        </interface>
        <interface name="Ext.layout.BorderLayout" private="True" extends="Ext.layout.ContainerLayout">
          <description>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic
split bars between regions and built-in expanding and collapsing of regions.
This class is intended to be extended or created via the layout:'border' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
BorderLayout does not have any direct config options (other than inherited ones).  All configs available
for customizing the BorderLayout are at the Ext.layout.BorderLayout.Region and
Ext.layout.BorderLayout.SplitRegion levels.
The regions of a BorderLayout are fixed at render time and thereafter, no regions may be removed or
added. The BorderLayout must have a center region, which will always fill the remaining space not used by
the other regions in the layout.
Example usage:
var border = new Ext.Panel({
    title: 'Border Layout',
    layout:'border',
    items: [{
        title: 'South Panel',
        region: 'south',
        height: 100,
        minSize: 75,
        maxSize: 250,
        margins: '0 5 5 5'
    },{
        title: 'West Panel',
        region:'west',
        margins: '5 0 0 5',
        cmargins: '5 5 0 5',
        width: 200,
        minSize: 100,
        maxSize: 300
    },{
        title: 'Main Content',
        region:'center',
        margins: '5 5 0 0'
    }]
});</description>
          <attributes>
            <attribute name="Region" type="Ext.layout.BorderLayout.Region" readonly="True" />
            <attribute name="SplitRegion" type="Ext.layout.BorderLayout.SplitRegion" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.layout.BorderLayout.Region" private="True" extends="Object">
          <description>This is a region of a BorderLayout that acts as a subcontainer within the layout.  Each region has its own
layout that is independent of other regions and the containing BorderLayout, and can be any of the valid
Ext layout types.  Region size is managed automatically and cannot be changed by the user -- for resizable
regions, see Ext.layout.BorderLayout.SplitRegion.</description>
          <attributes>
            <attribute name="isCollapsed" type="Boolean" readonly="True">
              <description>True if this region is collapsed. Read-only.</description>
            </attribute>
            <attribute name="layout" type="Layout" readonly="True">
              <description>This region's layout.  Read-only.</description>
            </attribute>
            <attribute name="panel" type="Ext.Panel" readonly="True">
              <description>This region's panel.  Read-only.</description>
            </attribute>
            <attribute name="position" type="String" readonly="True">
              <description>This region's layout position (north, south, east, west or center).  Read-only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="BorderLayout.Region" returns="BorderLayout.Region">
              <description>Create a new Region.</description>
              <params>
                <param name="layout" type="Layout" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
              </params>
            </function>
            <function name="getMargins" returns="Object">
              <description>Returns the current margins for this region.  If the region is collapsed, the cmargins (collapsed
margins) value will be returned, otherwise the margins value will be returned.</description>
            </function>
            <function name="getMinHeight" returns="Number">
              <description>Returns the minimum allowable height for this region.</description>
            </function>
            <function name="getMinWidth" returns="Number">
              <description>Returns the minimum allowable width for this region.</description>
            </function>
            <function name="getSize" returns="Object">
              <description>Returns the current size of this region.  If the region is collapsed, the size of the collapsedEl will
be returned, otherwise the size of the region's panel will be returned.</description>
            </function>
            <function name="isVisible" returns="Boolean">
              <description>True if this region is currently visible, else false.</description>
            </function>
            <function name="setPanel" returns="void">
              <description>Sets the specified panel as the container element for this region.</description>
              <params>
                <param name="panel" type="Ext.Panel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.layout.BorderLayout.SplitRegion" private="True" extends="Ext.layout.BorderLayout.Region">
          <description>This is a specialized type of BorderLayout region that has a built-in Ext.SplitBar for user resizing of regions.</description>
          <functions>
            <function name="BorderLayout.SplitRegion" returns="BorderLayout.SplitRegion">
              <description>Create a new SplitRegion.</description>
              <params>
                <param name="layout" type="Layout" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>Any valid Ext layout class</description>
                </param>
              </params>
            </function>
            <function name="getSplitBar" returns="Ext.SplitBar">
              <description>Returns a reference to the split bar in use by this region.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.layout.CardLayout" private="True" extends="Ext.layout.FitLayout">
          <description>This layout contains multiple panels, each fit to the container, where only a single panel can be
visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
This class is intended to be extended or created via the layout:'card' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
The CardLayout's focal method is setActiveItem.  Since only one panel is displayed at a time,
the only way to move from one panel to the next is by calling setActiveItem, passing the id or index of
the next panel to display.  The layout itself does not provide a mechanism for handling this navigation,
so that functionality must be provided by the developer.
In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
common navigation routine -- for this example, the implementation of that routine has been ommitted since
it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a
completely different implementation.  For serious implementations, a better approach would be to extend
CardLayout to provide the custom functionality needed.  Example usage:
var navHandler = function(direction){
    // This routine could contain business logic required to manage the navigation steps.
    // It would call setActiveItem as needed, manage navigation button state, handle any
    // branching logic that might be required, handle alternate actions like cancellation
    // or finalization, etc.  A complete wizard implementation could get pretty
    // sophisticated depending on the complexity required, and should probably be
    // done as a subclass of CardLayout in a real-world implementation.
};

var card = new Ext.Panel({
    title: 'Example Wizard',
    layout:'card',
    activeItem: 0, // make sure the active item is set on the container config!
    bodyStyle: 'padding:15px',
    defaults: {
        // applied to each contained panel
        border:false
    },
    // just an example of one possible navigation scheme, using buttons
    bbar: [
        {
            id: 'move-prev',
            text: 'Back',
            handler: navHandler.createDelegate(this, [-1]),
            disabled: true
        },
        '-&gt;', // greedy spacer so that the buttons are aligned to each side
        {
            id: 'move-next',
            text: 'Next',
            handler: navHandler.createDelegate(this, [1])
        }
    ],
    // the panels (or "cards") within the layout
    items: [{
        id: 'card-0',
        html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'
    },{
        id: 'card-1',
        html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'
    },{
        id: 'card-2',
        html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'
    }]
});</description>
          <functions>
            <function name="setActiveItem" returns="void">
              <description>Sets the active (visible) item in the layout.</description>
              <params>
                <param name="item" type="String/Number" optional="False">
                  <description>The string component id or numeric index of the item to activate</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.layout.ColumnLayout" private="True" extends="Ext.layout.ContainerLayout">
          <description>This is the layout style of choice for creating structural layouts in a multi-column format where the width of
each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
This class is intended to be extended or created via the layout:'column' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
specific config property of columnWidth that can be included in the config of any panel added to it.  The
layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).
The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
less than 1 (e.g., .25).
The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
the total remaining container width.  In other words, percentage width panels are designed to fill the space
left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
layout may not render as expected.  Example usage:
// All columns are percentages -- they must add up to 1
var p = new Ext.Panel({
    title: 'Column Layout - Percentage Only',
    layout:'column',
    items: [{
        title: 'Column 1',
        columnWidth: .25
    },{
        title: 'Column 2',
        columnWidth: .6
    },{
        title: 'Column 3',
        columnWidth: .15
    }]
});

// Mix of width and columnWidth -- all columnWidth values must add up
// to 1. The first column will take up exactly 120px, and the last two
// columns will fill the remaining container width.
var p = new Ext.Panel({
    title: 'Column Layout - Mixed',
    layout:'column',
    items: [{
        title: 'Column 1',
        width: 120
    },{
        title: 'Column 2',
        columnWidth: .8
    },{
        title: 'Column 3',
        columnWidth: .2
    }]
});</description>
        </interface>
        <interface name="Ext.layout.ContainerLayout" private="True" extends="Object">
          <description>Every Container delegates the rendering of its child Components
to a layout manager class which must be configured into the Container. Some
layouts also provide sizing and positioning of child Components/
The ContainerLayout class is the default layout manager used when no layout is configured into a Container.
It provides the basic foundation for all other layout classes in Ext. It simply renders all child Components
into the Container, performing no sizing os positioning services. This class is intended to be extended and should
generally not need to be created directly via the new keyword.</description>
          <attributes>
            <attribute name="activeItem" type="Ext.Component" readonly="True">
              <description>A reference to the Ext.Component that is active.  For example,
if(myPanel.layout.activeItem.id == 'item-1') { ... }.  activeItem only applies to layout styles that can
display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout
and Ext.layout.FitLayout).  Read-only.  Related to Ext.Container.activeItem.</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="Ext.layout.FitLayout" private="True" extends="Ext.layout.ContainerLayout">
          <description>This is a base class for layouts that contain a single item that automatically expands to fill the layout's
container.  This class is intended to be extended or created via the layout:'fit' Ext.Container.layout
config, and should generally not need to be created directly via the new keyword.
FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
multiple panels, only the first one will be displayed.  Example usage:
var p = new Ext.Panel({
    title: 'Fit Layout',
    layout:'fit',
    items: {
        title: 'Inner Panel',
        html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',
        border: false
    }
});</description>
        </interface>
        <interface name="Ext.layout.FormLayout" private="True" extends="Ext.layout.AnchorLayout">
          <description>This layout manager is specifically designed for rendering and managing child Components of forms.
It is responsible for rendering the labels of Fields.
This layout manager is used when a Container is configured with the layout:'form' layout config,
and should generally not need to be created directly via the new keyword. In an application,
it will usually be preferrable to use a FormPanel (which automatically uses FormLayout as its layout
class) since it also provides built-in functionality for loading, validating and submitting the form.
Note that when creating a layout via config, the layout-specific config properties must be passed in via
the layoutConfig object which will then be applied internally to the layout.
The Container using the FormLayout can also accept the following layout-specific config
properties:

hideLabels: (Boolean)True to hide field labels by default (defaults to false)
labelAlign: (String)The default label alignment.  The default value is empty string ''
for left alignment, but specifying 'top' will align the labels above the fields.
labelPad: (Number)The default padding in pixels for field labels (defaults to 5).  labelPad only
applies if labelWidth is also specified, otherwise it will be ignored.
labelWidth: (Number)The default width in pixels of field labels (defaults to 100)

Any type of components can be added to a FormLayout, but items that inherit from Ext.form.Field
can also supply the following field-specific config properties:

clearCls: (String)The CSS class to apply to the special clearing div rendered directly after each
form field wrapper (defaults to 'x-form-clear-left')
fieldLabel: (String)The text to display as the label for this field (defaults to '')
hideLabel: (Boolean)True to hide the label and separator for this field (defaults to false).
itemCls: (String)A CSS class to add to the div wrapper that contains this field label
and field element (the default class is 'x-form-item' and itemCls will be added to that).  If supplied,
itemCls at the field level will override the default itemCls supplied at the container level.
labelSeparator: (String)The separator to display after the text of the label for this field
(defaults to a colon ':' or the layout's value for labelSeparator).  To hide the separator use empty string ''.
labelStyle: (String)A CSS style specification string to add to the field label for this field
(defaults to '' or the layout's value for labelStyle).

Example usage:
// Required if showing validation messages
Ext.QuickTips.init();

// While you can create a basic Panel with layout:'form', practically
// you should usually use a FormPanel to also get its form functionality
// since it already creates a FormLayout internally.
var form = new Ext.form.FormPanel({
    labelWidth: 75,
    title: 'Form Layout',
    bodyStyle:'padding:15px',
    width: 350,
    labelPad: 10,
    defaultType: 'textfield',
    defaults: {
        // applied to each contained item
        width: 230,
        msgTarget: 'side'
    },
    layoutConfig: {
        // layout-specific configs go here
        labelSeparator: ''
    },
    items: [{
            fieldLabel: 'First Name',
            name: 'first',
            allowBlank: false
        },{
            fieldLabel: 'Last Name',
            name: 'last'
        },{
            fieldLabel: 'Company',
            name: 'company'
        },{
            fieldLabel: 'Email',
            name: 'email',
            vtype:'email'
        }
    ],
    buttons: [{
        text: 'Save'
    },{
        text: 'Cancel'
    }]
});</description>
        </interface>
        <interface name="Ext.layout.TableLayout" private="True" extends="Ext.layout.ContainerLayout">
          <description>This layout allows you to easily render content into an HTML table.  The total number of columns can be
specified, and rowspan and colspan can be used to create complex layouts within the table.
This class is intended to be extended or created via the layout:'table' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
Note that when creating a layout via config, the layout-specific config properties must be passed in via
the Ext.Container.layoutConfig object which will then be applied internally to the layout.  In the
case of TableLayout, the only valid layout config property is columns.  However, the items added to a
TableLayout can supply the following table-specific config properties:

rowspan Applied to the table cell containing the item.
colspan Applied to the table cell containing the item.
cellId An id applied to the table cell containing the item.
cellCls A CSS class name added to the table cell containing the item.

The basic concept of building up a TableLayout is conceptually very similar to building up a standard
HTML table.  You simply add each panel (or "cell") that you want to include along with any span attributes
specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
total column count in the layoutConfig and start adding panels in their natural order from left to right,
top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
up correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:
// This code will generate a layout table that is 3 columns by 2 rows
// with some spanning included.  The basic layout will be:
// +--------+-----------------+
// |   A    |   B             |
// |        |--------+--------|
// |        |   C    |   D    |
// +--------+--------+--------+
var table = new Ext.Panel({
    title: 'Table Layout',
    layout:'table',
    defaults: {
        // applied to each contained panel
        bodyStyle:'padding:20px'
    },
    layoutConfig: {
        // The total column count must be specified here
        columns: 3
    },
    items: [{
        html: '&lt;p&gt;Cell A content&lt;/p&gt;',
        rowspan: 2
    },{
        html: '&lt;p&gt;Cell B content&lt;/p&gt;',
        colspan: 2
    },{
        html: '&lt;p&gt;Cell C content&lt;/p&gt;',
        cellCls: 'highlight'
    },{
        html: '&lt;p&gt;Cell D content&lt;/p&gt;'
    }]
});</description>
        </interface>
        <interface name="Ext.LoadMask" private="True" extends="Object">
          <description>A simple utility class for generically masking elements while loading data.  If the store
config option is specified, the masking will be automatically synchronized with the store's loading
process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
element's Updater load indicator and will be destroyed after the initial load.
Example usage:
// Basic mask:
var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
myMask.show();</description>
          <attributes>
            <attribute name="disabled" type="Boolean" readonly="True">
              <description>Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="LoadMask" returns="LoadMask">
              <description>Create a new LoadMask</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The element or DOM node, or its id</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The element or DOM node, or its id</description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disables the mask to prevent it from being displayed</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables the mask so that it can be displayed</description>
            </function>
            <function name="hide" returns="void">
              <description>Hide this LoadMask.</description>
            </function>
            <function name="show" returns="void">
              <description>Show this LoadMask over the configured Element.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.Adapter" private="True" extends="Ext.menu.BaseItem">
          <description>A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.
It provides basic rendering, activation management and enable/disable logic required to work in menus.</description>
          <functions>
            <function name="Adapter" returns="Adapter">
              <description>Creates a new Adapter</description>
              <params>
                <param name="component" type="Ext.Component" optional="False">
                  <description>The component being adapted to render into a menu</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The component being adapted to render into a menu</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.BaseItem" private="True" extends="Ext.Component">
          <description>The base class for all items that render into menus.  BaseItem provides default rendering, activated state
management and base configuration options shared by all menu components.</description>
          <attributes>
            <attribute name="parentMenu" type="Ext.menu.Menu" readonly="False">
              <description>The parent Menu of this Item.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="BaseItem" returns="BaseItem">
              <description>Creates a new BaseItem</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="setHandler" returns="void">
              <description>Sets the function that will handle click events for this item (equivalent to passing in the handler
config property).  If an existing handler is already registered, it will be unregistered for you.</description>
              <params>
                <param name="handler" type="Function" optional="False">
                  <description>The scope that should be passed to the handler</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The scope that should be passed to the handler</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.CheckItem" private="True" extends="Ext.menu.Item">
          <description>Adds a menu item that contains a checkbox by default, but can also be part of a radio group.</description>
          <functions>
            <function name="CheckItem" returns="CheckItem">
              <description>Creates a new CheckItem</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="checkHandler" returns="void">
              <description>A function that handles the checkchange event.  The function is undefined by default, but if an implementation
is provided, it will be called automatically when the checkchange event fires.</description>
              <params>
                <param name="this" type="Ext.menu.CheckItem" optional="False">
                  <description>The checked value that was set</description>
                </param>
                <param name="checked" type="Boolean" optional="False">
                  <description>The checked value that was set</description>
                </param>
              </params>
            </function>
            <function name="setChecked" returns="void">
              <description>Set the checked state of this item</description>
              <params>
                <param name="checked" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="suppressEvent" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.ColorItem" private="True" extends="Ext.menu.Adapter">
          <description>A menu item that wraps the Ext.ColorPalette component.</description>
          <attributes>
            <attribute name="palette" type="Ext.ColorPalette" readonly="False">
              <description>The Ext.ColorPalette object</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ColorItem" returns="ColorItem">
              <description>Creates a new ColorItem</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.ColorMenu" private="True" extends="Ext.menu.Menu">
          <description>A menu containing a Ext.menu.ColorItem component (which provides a basic color picker).</description>
          <attributes>
            <attribute name="palette" type="ColorPalette" readonly="False">
              <description>The Ext.ColorPalette instance for this ColorMenu</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ColorMenu" returns="ColorMenu">
              <description>Creates a new ColorMenu</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.DateItem" private="True" extends="Ext.menu.Adapter">
          <description>A menu item that wraps the Ext.DatePicker component.</description>
          <attributes>
            <attribute name="picker" type="Ext.DatePicker" readonly="False">
              <description>The Ext.DatePicker object</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DateItem" returns="DateItem">
              <description>Creates a new DateItem</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.DateMenu" private="True" extends="Ext.menu.Menu">
          <description>A menu containing a Ext.menu.DateItem component (which provides a date picker).</description>
          <attributes>
            <attribute name="picker" type="DatePicker" readonly="False">
              <description>The Ext.DatePicker instance for this DateMenu</description>
            </attribute>
          </attributes>
          <functions>
            <function name="DateMenu" returns="DateMenu">
              <description>Creates a new DateMenu</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.Item" private="True" extends="Ext.menu.BaseItem">
          <description>A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
display items.  Item extends the base functionality of Ext.menu.BaseItem by adding menu-specific
activation and click handling.</description>
          <functions>
            <function name="Item" returns="Item">
              <description>Creates a new Item</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="setIconClass" returns="void">
              <description>Sets the CSS class to apply to the item's icon element</description>
              <params>
                <param name="cls" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setText" returns="void">
              <description>Sets the text to display in this menu item</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.Menu" private="True" extends="Ext.util.Observable">
          <description>A menu object.  This is the container to which you add all other menu items.  Menu can also serve as a base class
when you want a specialized menu based off of another component (like Ext.menu.DateMenu for example).</description>
          <attributes>
            <attribute name="items" type="Ext.util.MixedCollection" readonly="False">
              <description>A MixedCollection of this Menu's items</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Menu" returns="Menu">
              <description>Creates a new Menu</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
            <function name="add" returns="Ext.menu.Item">
              <description>Adds one or more items of any type supported by the Menu class, or that can be converted into menu items.
Any of the following are valid:

Any menu item object based on Ext.menu.BaseItem
An HTMLElement object which will be converted to a menu item
A menu item config object that will be created as a new menu item
A string, which can either be '-' or 'separator' to add a menu separator, otherwise
it will be converted into a Ext.menu.TextItem and added

Usage:
// Create the menu
var menu = new Ext.menu.Menu();

// Create a menu item to add by reference
var menuItem = new Ext.menu.Item({ text: 'New Item!' });

// Add a bunch of items at once using different methods.
// Only the last item added will be returned.
var item = menu.add(
    menuItem,                // add existing item by ref
    'Dynamic Item',          // new TextItem
    '-',                     // new separator
    { text: 'Config Item' }  // new item by config
);</description>
              <params>
                <param name="args" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addElement" returns="Ext.menu.Item">
              <description>Adds an Ext.Element object to the menu</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addItem" returns="Ext.menu.Item">
              <description>Adds an existing object based on Ext.menu.BaseItem to the menu</description>
              <params>
                <param name="item" type="Ext.menu.Item" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addMenuItem" returns="Ext.menu.Item">
              <description>Creates a new Ext.menu.Item based an the supplied config object and adds it to the menu</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addSeparator" returns="Ext.menu.Item">
              <description>Adds a separator bar to the menu</description>
            </function>
            <function name="addText" returns="Ext.menu.Item">
              <description>Creates a new Ext.menu.TextItem with the supplied text and adds it to the menu</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the menu by  unregistering it from Ext.menu.MenuMgr, purging event listeners,
removing all of the menus items, then destroying the underlying Ext.Element</description>
            </function>
            <function name="getEl" returns="Ext.Element">
              <description>Returns this menu's underlying Ext.Element object</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides this menu and optionally all parent menus</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insert" returns="Ext.menu.Item">
              <description>Inserts an existing object based on Ext.menu.BaseItem to the menu at a specified index</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="item" type="Ext.menu.Item" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isVisible" returns="void">
              <description>Read-only.  Returns true if the menu is currently displayed, else false.</description>
            </function>
            <function name="remove" returns="void">
              <description>Removes an Ext.menu.Item from the menu and destroys the object</description>
              <params>
                <param name="item" type="Ext.menu.Item" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeAll" returns="void">
              <description>Removes and destroys all items in the menu</description>
            </function>
            <function name="show" returns="void">
              <description>Displays this menu relative to another element</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="position" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="parentMenu" type="Ext.menu.Menu" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showAt" returns="void">
              <description>Displays this menu at a specific xy position</description>
              <params>
                <param name="xyPosition" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="parentMenu" type="Ext.menu.Menu" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.MenuMgr" private="True" extends="Object">
          <description>Provides a common registry of all menu items on a page so that they can be easily accessed by id.This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="get" returns="Ext.menu.Menu">
              <description>Returns a Ext.menu.Menu object</description>
              <params>
                <param name="menu" type="String/Object" optional="False">
                  <description>The string menu id, an existing menu object reference, or a Menu config that will
be used to generate and return a new Menu instance.</description>
                </param>
              </params>
            </function>
            <function name="hideAll" returns="void">
              <description>Hides all menus that are currently visible</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.Separator" private="True" extends="Ext.menu.BaseItem">
          <description>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
add one of these by using "-" in you call to add() or in your items config rather than creating one directly.</description>
          <functions>
            <function name="Separator" returns="Separator">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>Configuration options</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.menu.TextItem" private="True" extends="Ext.menu.BaseItem">
          <description>Adds a static text string to a menu, usually used as either a heading or group separator.</description>
          <functions>
            <function name="TextItem" returns="TextItem">
              <description>Creates a new TextItem</description>
              <params>
                <param name="config" type="Object/String" optional="False">
                  <description>If config is a string, it is used as the text to display, otherwise it
is applied as a config object (and should contain a text property).</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.MessageBox" private="True" extends="Object">
          <description>Utility class for generating different styles of message boxes.  The alias Ext.Msg can also be used.
Note that the MessageBox is asynchronous.  Unlike a regular JavaScript alert (which will halt
browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
that should only run after some user feedback from the MessageBox, you must use a callback function
(see the function parameter for show for more details).
Example usage:
// Basic alert:
Ext.Msg.alert('Status', 'Changes saved successfully.');

// Prompt for user data and process the result using a callback:
Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){
    if (btn == 'ok'){
        // process text value and close...
    }
});

// Show a dialog using config options:
Ext.Msg.show({
   title:'Save Changes?',
   msg: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',
   buttons: Ext.Msg.YESNOCANCEL,
   fn: processResult,
   animEl: 'elId',
   icon: Ext.MessageBox.QUESTION
});This class is a singleton and cannot be created directly.</description>
          <attributes>
            <attribute name="CANCEL" type="Object" readonly="False">
              <description>Button config that displays a single Cancel button</description>
            </attribute>
            <attribute name="ERROR" type="String" readonly="False">
              <description>The CSS class that provides the ERROR icon image</description>
            </attribute>
            <attribute name="INFO" type="String" readonly="False">
              <description>The CSS class that provides the INFO icon image</description>
            </attribute>
            <attribute name="OK" type="Object" readonly="False">
              <description>Button config that displays a single OK button</description>
            </attribute>
            <attribute name="OKCANCEL" type="Object" readonly="False">
              <description>Button config that displays OK and Cancel buttons</description>
            </attribute>
            <attribute name="QUESTION" type="String" readonly="False">
              <description>The CSS class that provides the QUESTION icon image</description>
            </attribute>
            <attribute name="WARNING" type="String" readonly="False">
              <description>The CSS class that provides the WARNING icon image</description>
            </attribute>
            <attribute name="YESNO" type="Object" readonly="False">
              <description>Button config that displays Yes and No buttons</description>
            </attribute>
            <attribute name="YESNOCANCEL" type="Object" readonly="False">
              <description>Button config that displays Yes, No and Cancel buttons</description>
            </attribute>
            <attribute name="buttonText" type="Object" readonly="False">
              <description>An object containing the default button text strings that can be overriden for localized language support.
Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific
resource file for handling language support across the framework.
Customize the default text like so: Ext.MessageBox.buttonText.yes = "oui"; //french</description>
            </attribute>
            <attribute name="defaultTextHeight" type="Number" readonly="False">
              <description>The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)</description>
            </attribute>
            <attribute name="maxWidth" type="Number" readonly="False">
              <description>The maximum width in pixels of the message box (defaults to 600)</description>
            </attribute>
            <attribute name="minProgressWidth" type="Number" readonly="False">
              <description>The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful
for setting a different minimum width than text-only dialogs may need (defaults to 250)</description>
            </attribute>
            <attribute name="minWidth" type="Number" readonly="False">
              <description>The minimum width in pixels of the message box (defaults to 100)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="alert" returns="Ext.MessageBox">
              <description>Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
If a callback function is passed it will be called after the user clicks the button, and the
id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).</description>
              <params>
                <param name="title" type="String" optional="False">
                  <description>The title bar text</description>
                </param>
                <param name="msg" type="String" optional="False">
                  <description>The title bar text</description>
                </param>
                <param name="fn" type="Function" optional="True">
                  <description>The title bar text</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The title bar text</description>
                </param>
              </params>
            </function>
            <function name="confirm" returns="Ext.MessageBox">
              <description>Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
If a callback function is passed it will be called after the user clicks either button,
and the id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).</description>
              <params>
                <param name="title" type="String" optional="False">
                  <description>The message box body text</description>
                </param>
                <param name="msg" type="String" optional="False">
                  <description>The message box body text</description>
                </param>
                <param name="fn" type="Function" optional="True">
                  <description>The message box body text</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The message box body text</description>
                </param>
              </params>
            </function>
            <function name="getDialog" returns="Ext.Window">
              <description>Returns a reference to the underlying Ext.Window element</description>
            </function>
            <function name="hide" returns="Ext.MessageBox">
              <description>Hides the message box if it is displayed</description>
            </function>
            <function name="isVisible" returns="Boolean">
              <description>Returns true if the message box is currently displayed</description>
            </function>
            <function name="progress" returns="Ext.MessageBox">
              <description>Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
the user.  You are responsible for updating the progress bar as needed via Ext.MessageBox.updateProgress
and closing the message box when the process is complete.</description>
              <params>
                <param name="title" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="msg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="progressText" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="prompt" returns="Ext.MessageBox">
              <description>Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
clicks either button, and the id of the button that was clicked (could also be the top-right
close button) and the text that was entered will be passed as the two parameters to the callback.</description>
              <params>
                <param name="title" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="msg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="multiline" type="Boolean/Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setIcon" returns="Ext.MessageBox">
              <description>Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default
styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
to clear any existing icon.  The following built-in icon classes are supported, but you can also pass
in a custom class name:
Ext.MessageBox.INFO
Ext.MessageBox.WARNING
Ext.MessageBox.QUESTION
Ext.MessageBox.ERROR</description>
              <params>
                <param name="icon" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="Ext.MessageBox">
              <description>Displays a new message box, or reinitializes an existing message box, based on the config options
passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,
although those calls are basic shortcuts and do not support all of the config options allowed here.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateProgress" returns="Ext.MessageBox">
              <description>Updates a progress-style message box's text and progress bar. Only relevant on message boxes
initiated via Ext.MessageBox.progress or Ext.MessageBox.wait,
or by calling Ext.MessageBox.show with progress: true.</description>
              <params>
                <param name="value" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="progressText" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="msg" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateText" returns="Ext.MessageBox">
              <description>Updates the message box body text</description>
              <params>
                <param name="text" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="wait" returns="Ext.MessageBox">
              <description>Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
interaction while waiting for a long-running process to complete that does not have defined intervals.
You are responsible for closing the message box when the process is complete.</description>
              <params>
                <param name="msg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="title" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.PagingToolbar" private="True" extends="Ext.Toolbar">
          <description>A specialized toolbar that is bound to a Ext.data.Store and provides automatic paging control. This
Component loads blocks of data into the Store passing parameters who's names are
specified by the store's paramNames property.</description>
          <attributes>
            <attribute name="afterPageText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "of {0}"). Note that this string is
formatted using {0} as a token that is replaced by the number of total pages. This token should be
preserved when overriding this string if showing the total page count is desired.</description>
            </attribute>
            <attribute name="beforePageText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "Page")</description>
            </attribute>
            <attribute name="firstText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "First Page")</description>
            </attribute>
            <attribute name="lastText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "Last Page")</description>
            </attribute>
            <attribute name="nextText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "Next Page")</description>
            </attribute>
            <attribute name="paramNames" type="Object" readonly="False">
              <description>Object mapping of parameter names for load calls (defaults to {start: 'start', limit: 'limit'})</description>
            </attribute>
            <attribute name="prevText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "Previous Page")</description>
            </attribute>
            <attribute name="refreshText" type="String" readonly="False">
              <description>Customizable piece of the default paging text (defaults to "Refresh")</description>
            </attribute>
          </attributes>
          <functions>
            <function name="PagingToolbar" returns="PagingToolbar">
              <description>Create a new PagingToolbar</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="bind" returns="void">
              <description>Binds the paging toolbar to the specified Ext.data.Store</description>
              <params>
                <param name="store" type="Ext.data.Store" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="changePage" returns="void">
              <description>Change the active page</description>
              <params>
                <param name="page" type="Integer" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unbind" returns="void">
              <description>Unbinds the paging toolbar from the specified Ext.data.Store</description>
              <params>
                <param name="store" type="Ext.data.Store" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Panel" private="True" extends="Ext.Container">
          <description>Panel is a container that has specific functionality and structural components that make it the perfect building
block for application-oriented user interfaces. The Panel contains bottom and top toolbars, along with separate
header, footer and body sections.  It also provides built-in expandable and collapsible behavior, along with a
variety of prebuilt tool buttons that can be wired up to provide other customized behavior.  Panels can be easily
dropped into any Container or layout, and the layout and rendering pipeline is completely managed by the framework.</description>
          <attributes>
            <attribute name="body" type="Ext.Element" readonly="True">
              <description>The Panel's body Element which may be used to contain HTML content.
The content may be specified in the html config, or it may be loaded using the
autoLoad config, or through the Panel's Updater. Read-only.
If this is used to load visible HTML elements in either way, then
the Panel may not be used as a Layout for hosting nested Panels.
If this Panel is intended to be used as the host of a Layout (See layout
then the body Element must not be loaded or changed - it is under the control
of the Panel's Layout.</description>
            </attribute>
            <attribute name="buttons" type="Array" readonly="False">
              <description>This Panel's Array of buttons as created from the buttons
config property. Read only.</description>
            </attribute>
            <attribute name="dd" type="Ext.dd.DragSource." readonly="False">
              <description>If this Panel is configured draggable, this property will contain
an instance of Ext.dd.DragSource which handles dragging the Panel.
The developer must provide implementations of the abstract methods of Ext.dd.DragSource
in order to supply behaviour for each stage of the drag/drop process. See draggable.</description>
            </attribute>
            <attribute name="footer" type="Ext.Element" readonly="True">
              <description>The Panel's footer Element. Read-only.
This Element is used to house the Panel's buttons.</description>
            </attribute>
            <attribute name="header" type="Ext.Element" readonly="True">
              <description>The Panel's header Element. Read-only.
This Element is used to house the title and tools</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Panel" returns="Panel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="addButton" returns="Ext.Button">
              <description>Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
approach is to add buttons via the buttons config.</description>
              <params>
                <param name="config" type="String/Object" optional="False">
                  <description>The function to be called on button Ext.Button.click</description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>The function to be called on button Ext.Button.click</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>The function to be called on button Ext.Button.click</description>
                </param>
              </params>
            </function>
            <function name="collapse" returns="Ext.Panel">
              <description>Collapses the panel body so that it becomes hidden.  Fires the beforecollapse event which will
cancel the collapse action if it returns false.</description>
              <params>
                <param name="animate" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="expand" returns="Ext.Panel">
              <description>Expands the panel body so that it becomes visible.  Fires the beforeexpand event which will
cancel the expand action if it returns false.</description>
              <params>
                <param name="animate" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBottomToolbar" returns="Ext.Toolbar">
              <description>Returns the toolbar from the bottom (bbar) section of the panel.</description>
            </function>
            <function name="getFrameHeight" returns="Number">
              <description>Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
header and footer elements, but not including the body height).  To retrieve the body height see getInnerHeight.</description>
            </function>
            <function name="getFrameWidth" returns="Number">
              <description>Returns the width in pixels of the framing elements of this panel (not including the body width).  To
retrieve the body width see getInnerWidth.</description>
            </function>
            <function name="getInnerHeight" returns="Number">
              <description>Returns the height in pixels of the body element (not including the height of any framing elements).
For the frame height see getFrameHeight.</description>
            </function>
            <function name="getInnerWidth" returns="Number">
              <description>Returns the width in pixels of the body element (not including the width of any framing elements).
For the frame width see getFrameWidth.</description>
            </function>
            <function name="getTool" returns="Object">
              <description>Retrieve a tool by id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTopToolbar" returns="Ext.Toolbar">
              <description>Returns the toolbar from the top (tbar) section of the panel.</description>
            </function>
            <function name="getUpdater" returns="Ext.Updater">
              <description>Get the Ext.Updater for this panel. Enables you to perform Ajax updates of this panel's body.</description>
            </function>
            <function name="load" returns="Ext.Panel">
              <description>Loads this content panel immediately with content returned from an XHR call.</description>
              <params>
                <param name="config" type="Object/String/Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setIconClass" returns="void">
              <description>Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
icon class if one has already been set.</description>
              <params>
                <param name="cls" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setTitle" returns="void">
              <description>Sets the title text for the panel and optionally the icon class.
In order to be able to set the title, a header element must have been created
for the Panel. This is triggered either by configuring the Panel with a non-blank title,
or configuring it with header: true.</description>
              <params>
                <param name="title" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iconCls" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggleCollapse" returns="Ext.Panel">
              <description>Shortcut for performing an expand or collapse based on the current state of the panel.</description>
              <params>
                <param name="animate" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.ProgressBar" private="True" extends="Ext.BoxComponent">
          <description>An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.
In manual mode, you are responsible for showing, updating (via updateProgress) and clearing the
progress bar as needed from your own code.  This method is most appropriate when you want to show progress
throughout an operation that has predictable points of interest at which you can update the control.
In automatic mode, you simply call wait and let the progress bar run indefinitely, only clearing it
once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in
which you have no need for indicating intermediate progress.</description>
          <functions>
            <function name="isWaiting" returns="Boolean">
              <description>Returns true if the progress bar is currently in a wait operation</description>
            </function>
            <function name="reset" returns="Ext.ProgressBar">
              <description>Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
bar will also be hidden (using the hideMode property internally).</description>
              <params>
                <param name="hide" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSize" returns="Ext.ProgressBar">
              <description>Sets the size of the progress bar.</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="syncProgressBar" returns="void">
              <description>Synchronizes the inner bar width to the proper proportion of the total componet width based
on the current progress value.  This will be called automatically when the ProgressBar
is resized by a layout, but if it is rendered auto width, this method can be called from
another resize handler to sync the ProgressBar if necessary.</description>
            </function>
            <function name="updateProgress" returns="Ext.ProgressBar">
              <description>Updates the progress bar value, and optionally its text.  If the text argument is not specified,
any existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even
if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for
determining when the progress is complete and calling reset to clear and/or hide the control.</description>
              <params>
                <param name="value" type="Float" optional="True">
                  <description>
                  </description>
                </param>
                <param name="text" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateText" returns="Ext.ProgressBar">
              <description>Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
bar itself will display the updated text.</description>
              <params>
                <param name="text" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="wait" returns="Ext.ProgressBar">
              <description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:
Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.
text       String        Optional text to display in the progress bar element (defaults to '').
fn         Function      A callback function to execute after the progress bar finishes auto-
                         updating.  The function will be called with no arguments.  This function
                         will be ignored if duration is not specified since in that case the
                         progress bar can only be stopped programmatically, so any required function
                         should be called by the same code after it resets the progress bar.
scope      Object        The scope that is passed to the callback function (only applies when
                         duration and fn are both passed).
Example usage:
var p = new Ext.ProgressBar({
   renderTo: 'my-el'
});

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15,
   text: 'Updating...',
   scope: this,
   fn: function(){
      Ext.fly('status').update('Done!');
   }
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
    Ext.fly('status').update('Done!');
});</description>
              <params>
                <param name="config" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.QuickTip" private="True" extends="Ext.ToolTip">
          <description>A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
Ext.QuickTips instance.  See the QuickTips class header for additional usage details and examples.</description>
          <functions>
            <function name="QuickTip" returns="QuickTip">
              <description>Create a new Tip</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
            <function name="register" returns="config">
              <description>Configures a new quick tip instance and assigns it to a target element.  The following config values are
supported (for example usage, see the Ext.QuickTips class header):

        Parameters:
        config : ObjectThe config object
        Returns:

            void</description>
            </function>
            <function name="unregister" returns="void">
              <description>Removes this quick tip from its element and destroys it.</description>
              <params>
                <param name="el" type="String/HTMLElement/Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.QuickTips" private="True" extends="Object">
          <description>Provides attractive and customizable tooltips for any element. The QuickTips
singleton is used to configure and manage tooltips globally for multiple elements
in a generic manner.  To create individual tooltips with maximum customizability,
you should consider either Ext.Tip or Ext.ToolTip.
Quicktips can be configured via tag attributes directly in markup, or by
registering quick tips programmatically via the register method.
The singleton's instance of Ext.QuickTip is available via
getQuickTip, and supports all the methods, and all the all the
configuration properties of Ext.QuickTip. These settings will apply to all
tooltips shown by the singleton.
Below is the summary of the configuration properties which can be used.
For detailed descriptions see getQuickTip
QuickTips singleton configs (all are optional)
dismissDelay
hideDelay
maxWidth
minWidth
showDelay
trackMouse
Target element configs (optional unless otherwise noted)
autoHide
cls
dismissDelay (overrides singleton value)
target (required)
text (required)
title
width
Here is an example showing how some of these config options could be used:
// Init the singleton.  Any tag-based quick tips will start working.
Ext.QuickTips.init();

// Apply a set of config properties to the singleton
Ext.apply(Ext.QuickTips.getQuickTip(), {
    maxWidth: 200,
    minWidth: 100,
    showDelay: 50,
    trackMouse: true
});

// Manually register a quick tip for a specific element
Ext.QuickTips.register({
    target: 'my-div',
    title: 'My Tooltip',
    text: 'This tooltip was added in code',
    width: 100,
    dismissDelay: 20
});
To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with
the ext: namespace.  The HTML element itself is automatically set as the quick tip target. Here is the summary
of supported attributes (optional unless otherwise noted):
hide: Specifying "user" is equivalent to setting autoHide = false.  Any other value will be the
same as autoHide = true.
qclass: A CSS class to be applied to the quick tip (equivalent to the 'cls' target element config).
qtip (required): The quick tip text (equivalent to the 'text' target element config).
qtitle: The quick tip title (equivalent to the 'title' target element config).
qwidth: The quick tip width (equivalent to the 'width' target element config).
Here is an example of configuring an HTML element to display a tooltip from markup:
// Add a quick tip to an HTML button
&lt;input type="button" value="OK" ext:qtitle="OK Button" ext:qwidth="100"
     ext:qtip="This is a quick tip from markup!"&gt;&lt;/input&gt;This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="disable" returns="void">
              <description>Disable quick tips globally.</description>
            </function>
            <function name="enable" returns="void">
              <description>Enable quick tips globally.</description>
            </function>
            <function name="getQuickTip" returns="void">
              <description>Gets the global QuickTips instance.</description>
            </function>
            <function name="init" returns="void">
              <description>Initialize the global QuickTips instance and prepare any quick tips.</description>
              <params>
                <param name="autoRender" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isEnabled" returns="Boolean">
              <description>Returns true if quick tips are enabled, else false.</description>
            </function>
            <function name="register" returns="void">
              <description>Configures a new quick tip instance and assigns it to a target element.  See
Ext.QuickTip.register for details.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="tips" returns="void">
              <description>Alias of register.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>Removes any registered quick tip from the target element and destroys it.</description>
              <params>
                <param name="el" type="String/HTMLElement/Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Resizable" private="True" extends="Ext.util.Observable">
          <description>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
the textarea in a div and set "resizeChild" to true (or to the id of the element), or set wrap:true in your config and
the element will be wrapped for you automatically.
Here is the list of valid resize handles:
Value   Description
------  -------------------
 'n'     north
 's'     south
 'e'     east
 'w'     west
 'nw'    northwest
 'sw'    southwest
 'se'    southeast
 'ne'    northeast
 'all'   all
Here's an example showing the creation of a typical Resizable:
var resizer = new Ext.Resizable("element-id", {
    handles: 'all',
    minWidth: 200,
    minHeight: 100,
    maxWidth: 500,
    maxHeight: 400,
    pinned: true
});
resizer.on("resize", myHandler);
To hide a particular handle, set its display to none in CSS, or through script:
resizer.east.setDisplayed(false);</description>
          <attributes>
            <attribute name="proxy" type="Ext.Element." readonly="False">
              <description>The proxy Element that is resized in place of the real Element during the resize operation.
This may be queried using Ext.Element.getBox to provide the new area to resize to.
Read only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Resizable" returns="Resizable">
              <description>Create a new resizable component</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The id or element to resize</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The id or element to resize</description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys this resizable. If the element was wrapped and
removeEl is not true then the element remains.</description>
              <params>
                <param name="removeEl" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Ext.Element">
              <description>Returns the element this component is bound to.</description>
            </function>
            <function name="getResizeChild" returns="Ext.Element">
              <description>Returns the resizeChild element (or null).</description>
            </function>
            <function name="resizeElement" returns="void">
              <description>Performs resizing of the associated Element. This method is called internally by this
class, and should not be called by user code.
If a Resizable is being used to resize an Element which encapsulates a more complex UI
component such as a Panel, this method may be overridden by specifying an implementation
as a config option to provide appropriate behaviour at the end of the resize operation on
mouseup, for example resizing the Panel, and relaying the Panel's content.
The new area to be resized to is available by examining the state of the proxy
Element. Example:
new Ext.Panel({
    title: 'Resize me',
    x: 100,
    y: 100,
    renderTo: Ext.getBody(),
    floating: true,
    frame: true,
    width: 400,
    height: 200,
    listeners: {
        render: function(p) {
            new Ext.Resizable(p.getEl(), {
                handles: 'all',
                pinned: true,
                transparent: true,
                resizeElement: function() {
                    var box = this.proxy.getBox();
                    p.updateBox(box);
                    if (p.layout) {
                        p.doLayout();
                    }
                    return box;
                }
           });
       }
    }
}).show();</description>
            </function>
            <function name="resizeTo" returns="void">
              <description>Perform a manual resize</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Shadow" private="True" extends="Object">
          <description>Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
functionality that can also provide the same shadow effect, see the Ext.Layer class.</description>
          <functions>
            <function name="Shadow" returns="Shadow">
              <description>Create a new Shadow</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="hide" returns="void">
              <description>Hides this shadow</description>
            </function>
            <function name="isVisible" returns="void">
              <description>Returns true if the shadow is visible, else false</description>
            </function>
            <function name="realign" returns="void">
              <description>Direct alignment when values are already available. Show must be called at least once before
calling this method to ensure it is initialized.</description>
              <params>
                <param name="left" type="Number" optional="False">
                  <description>The target element height</description>
                </param>
                <param name="top" type="Number" optional="False">
                  <description>The target element height</description>
                </param>
                <param name="width" type="Number" optional="False">
                  <description>The target element height</description>
                </param>
                <param name="height" type="Number" optional="False">
                  <description>The target element height</description>
                </param>
              </params>
            </function>
            <function name="setZIndex" returns="void">
              <description>Adjust the z-index of this shadow</description>
              <params>
                <param name="zindex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Displays the shadow under the target element</description>
              <params>
                <param name="targetEl" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Slider" private="True" extends="Ext.BoxComponent">
          <description>Slider which supports vertical or horizontal orientation, keyboard adjustments,
configurable snapping, axis clicking and animation. Can be added as an item to
any container. Example usage:
new Ext.Slider({
    renderTo: Ext.getBody(),
    width: 200,
    value: 50,
    increment: 10,
    minValue: 0,
    maxValue: 100
});</description>
          <attributes>
            <attribute name="dragging" type="boolean" readonly="False">
              <description>True while the thumb is in a drag operation</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getValue" returns="Number">
              <description>Returns the current value of the slider</description>
            </function>
            <function name="setValue" returns="void">
              <description>Programmatically sets the value of the Slider. Ensures that the value is constrained within
the minValue and maxValue.</description>
              <params>
                <param name="value" type="Number" optional="False">
                  <description>Turn on or off animation, defaults to true</description>
                </param>
                <param name="animate" type="Boolean" optional="False">
                  <description>Turn on or off animation, defaults to true</description>
                </param>
              </params>
            </function>
            <function name="syncThumb" returns="void">
              <description>Synchronizes the thumb position to the proper proportion of the total component width based
on the current slider value.  This will be called automatically when the Slider
is resized by a layout, but if it is rendered auto width, this method can be called from
another resize handler to sync the Slider if necessary.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.SplitBar" private="True" extends="Ext.util.Observable">
          <description>Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).

Usage:
var split = new Ext.SplitBar("elementToDrag", "elementToSize",
                   Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);
split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter("container"));
split.minSize = 100;
split.maxSize = 600;
split.animate = true;
split.on('moved', splitterMoved);</description>
          <attributes>
            <attribute name="animate" type="Boolean" readonly="False">
              <description>Whether to animate the transition to the new size</description>
            </attribute>
            <attribute name="maxSize" type="Number" readonly="False">
              <description>The maximum size of the resizing element. (Defaults to 2000)</description>
            </attribute>
            <attribute name="minSize" type="Number" readonly="False">
              <description>The minimum size of the resizing element. (Defaults to 0)</description>
            </attribute>
            <attribute name="useShim" type="Boolean" readonly="False">
              <description>Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.</description>
            </attribute>
            <attribute name="AbsoluteLayoutAdapter" type="Ext.SplitBar.AbsoluteLayoutAdapter" readonly="True" />
            <attribute name="BasicLayoutAdapter" type="Ext.SplitBar.BasicLayoutAdapter" readonly="True" />
          </attributes>
          <functions>
            <function name="SplitBar" returns="SplitBar">
              <description>Create a new SplitBar</description>
              <params>
                <param name="dragElement" type="Mixed" optional="False">
                  <description>The element to be dragged and act as the SplitBar.</description>
                </param>
                <param name="resizingElement" type="Mixed" optional="False">
                  <description>The element to be dragged and act as the SplitBar.</description>
                </param>
                <param name="orientation" type="Number" optional="True">
                  <description>The element to be dragged and act as the SplitBar.</description>
                </param>
                <param name="placement" type="Number" optional="True">
                  <description>The element to be dragged and act as the SplitBar.</description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroy this splitbar.</description>
              <params>
                <param name="removeEl" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAdapter" returns="The">
              <description>Get the adapter this SplitBar uses</description>
            </function>
            <function name="getMaximumSize" returns="Number">
              <description>Gets the maximum size for the resizing element</description>
            </function>
            <function name="getMinimumSize" returns="Number">
              <description>Gets the minimum size for the resizing element</description>
            </function>
            <function name="setAdapter" returns="void">
              <description>Set the adapter this SplitBar uses</description>
              <params>
                <param name="adapter" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setCurrentSize" returns="void">
              <description>Sets the initialize size for the resizing element</description>
              <params>
                <param name="size" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMaximumSize" returns="void">
              <description>Sets the maximum size for the resizing element</description>
              <params>
                <param name="maxSize" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMinimumSize" returns="void">
              <description>Sets the minimum size for the resizing element</description>
              <params>
                <param name="minSize" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.SplitBar.AbsoluteLayoutAdapter" private="True" extends="Ext.SplitBar.BasicLayoutAdapter">
          <description>Adapter that  moves the splitter element to align with the resized sizing element.
Used with an absolute positioned SplitBar.</description>
          <attributes>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.BOTTOM" type="Number" readonly="False">
              <description>&lt;static&gt; Placement constant - The resizing element is positioned under splitter element</description>
            </attribute>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.HORIZONTAL" type="Number" readonly="False">
              <description>&lt;static&gt; Orientation constant - Create a horizontal SplitBar</description>
            </attribute>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.LEFT" type="Number" readonly="False">
              <description>&lt;static&gt; Placement constant - The resizing element is to the left of the splitter element</description>
            </attribute>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.RIGHT" type="Number" readonly="False">
              <description>&lt;static&gt; Placement constant - The resizing element is to the right of the splitter element</description>
            </attribute>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.TOP" type="Number" readonly="False">
              <description>&lt;static&gt; Placement constant - The resizing element is positioned above the splitter element</description>
            </attribute>
            <attribute name="SplitBar.AbsoluteLayoutAdapter.VERTICAL" type="Number" readonly="False">
              <description>&lt;static&gt; Orientation constant - Create a vertical SplitBar</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="Ext.SplitBar.BasicLayoutAdapter" private="True" extends="Object">
          <description>Default Adapter. It assumes the splitter and resizing element are not positioned
elements and only gets/sets the width of the element. Generally used for table based layouts.</description>
          <functions>
            <function name="getElementSize" returns="void">
              <description>Called before drag operations to get the current size of the resizing element.</description>
              <params>
                <param name="s" type="Ext.SplitBar" optional="False">
                  <description>The SplitBar using this adapter</description>
                </param>
              </params>
            </function>
            <function name="setElementSize" returns="void">
              <description>Called after drag operations to set the size of the resizing element.</description>
              <params>
                <param name="s" type="Ext.SplitBar" optional="False">
                  <description>The new size to set</description>
                </param>
                <param name="newSize" type="Number" optional="False">
                  <description>The new size to set</description>
                </param>
                <param name="onComplete" type="Function" optional="False">
                  <description>The new size to set</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.SplitButton" private="True" extends="Ext.Button">
          <description>A split button that provides a built-in dropdown arrow that can fire an event separately from the default
click event of the button.  Typically this would be used to display a dropdown menu that provides additional
options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
// display a dropdown menu:
new Ext.SplitButton({
	renderTo: 'button-ct', // the container id
   	text: 'Options',
   	handler: optionsHandler, // handle a click on the button itself
   	menu: new Ext.menu.Menu({
        items: [
        	// these items will render as dropdown menu items when the arrow is clicked:
	        {text: 'Item 1', handler: item1Handler},
	        {text: 'Item 2', handler: item2Handler}
        ]
   	})
});

// Instead of showing a menu, you provide any type of custom
// functionality you want when the dropdown arrow is clicked:
new Ext.SplitButton({
	renderTo: 'button-ct',
   	text: 'Options',
   	handler: optionsHandler,
   	arrowHandler: myCustomHandler
});</description>
          <functions>
            <function name="SplitButton" returns="SplitButton">
              <description>Create a new menu button</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="setArrowHandler" returns="void">
              <description>Sets this button's arrow click handler.</description>
              <params>
                <param name="handler" type="Function" optional="False">
                  <description>(optional) Scope for the function passed above</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) Scope for the function passed above</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.sql.Proxy" private="True" extends="Ext.data.DataProxy">
          <description>An implementation of Ext.data.DataProxy that reads from a SQLLite
database.</description>
          <functions>
            <function name="Proxy" returns="Proxy">
              <description>
              </description>
              <params>
                <param name="conn" type="Object" optional="False">
                  <description>an Ext.sql.Connection object</description>
                </param>
                <param name="table" type="String" optional="False">
                  <description>an Ext.sql.Connection object</description>
                </param>
                <param name="keyName" type="String" optional="False">
                  <description>an Ext.sql.Connection object</description>
                </param>
                <param name="store" type="Ext.data.Store" optional="False">
                  <description>an Ext.sql.Connection object</description>
                </param>
                <param name="readonly" type="Boolean" optional="False">
                  <description>an Ext.sql.Connection object</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.sql.SQLiteStore" private="True" extends="Ext.data.Store">
          <description>Convenience class which assists in setting up SQLiteStore's.
This class will create the necessary table if it does not exist.
This class requires that all fields stored in the database will also be kept
in the Ext.data.Store.</description>
          <functions>
            <function name="constructor" returns="void">
              <description>
              </description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.state.CookieProvider" private="True" extends="Ext.state.Provider">
          <description>The default Provider implementation which saves state via cookies.
Usage:
 var cp = new Ext.state.CookieProvider({
       path: "/cgi-bin/",
       expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
       domain: "extjs.com"
   });
   Ext.state.Manager.setProvider(cp);</description>
          <functions>
            <function name="CookieProvider" returns="CookieProvider">
              <description>Create a new CookieProvider</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration object</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.state.Manager" private="True" extends="Object">
          <description>This is the global state manager. By default all components that are "state aware" check this class
for state information if you don't pass them a custom state provider. In order for this class
to be useful, it must be initialized with a provider when your application initializes. Example usage:
 // in your initialization function
init : function(){
   Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
   var win = new Window(...);
   win.restoreState();
}This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="clear" returns="void">
              <description>Clears a value from the state</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The key name</description>
                </param>
              </params>
            </function>
            <function name="get" returns="Mixed">
              <description>Returns the current value for a key</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The default value to return if the key lookup does not match</description>
                </param>
                <param name="defaultValue" type="Mixed" optional="False">
                  <description>The default value to return if the key lookup does not match</description>
                </param>
              </params>
            </function>
            <function name="getProvider" returns="Provider">
              <description>Gets the currently configured state provider</description>
            </function>
            <function name="set" returns="void">
              <description>Sets the value for a key</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setProvider" returns="void">
              <description>Configures the default state provider for your application</description>
              <params>
                <param name="stateProvider" type="Provider" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.state.Provider" private="True" extends="Object">
          <description>Abstract base class for state provider implementations. This class provides methods
for encoding and decoding typed variables including dates and defines the
Provider interface.</description>
          <functions>
            <function name="clear" returns="void">
              <description>Clears a value from the state</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The key name</description>
                </param>
              </params>
            </function>
            <function name="decodeValue" returns="Mixed">
              <description>Decodes a string previously encoded with encodeValue.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="encodeValue" returns="String">
              <description>Encodes a value including type information.  Decode with decodeValue.</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="Mixed">
              <description>Returns the current value for a key</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="void">
              <description>Sets the value for a key</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.StatusBar" private="True" extends="Ext.Toolbar">
          <description>Basic status bar component that can be used as the bottom toolbar of any Ext.Panel.  In addition to
supporting the standard Ext.Toolbar interface for adding buttons, menus and other items, the StatusBar
provides a greedy status element that can be aligned to either side and has convenient methods for setting the
status text and icon.  You can also indicate that something is processing using the showBusy method.
Note: Although StatusBar supports xtype:'statusbar', at this time Ext.Toolbar (the base class) does
not support xtype.  For this reason, if you are adding Toolbar items into the StatusBar you must declare it
using the "new StatusBar()" syntax for the items to render correctly.
new Ext.Panel({
    title: 'StatusBar',
    // etc.
    bbar: new Ext.StatusBar({
        id: 'my-status',

        // defaults to use when the status is cleared:
        defaultText: 'Default status text',
        defaultIconCls: 'default-icon',

        // values to set initially:
        text: 'Ready',
        iconCls: 'ready-icon',

        // any standard Toolbar items:
        items: [{
            text: 'A Button'
        }, '-', 'Plain Text']
    })
});

// Update the status bar later in code:
var sb = Ext.getCmp('my-status');
sb.setStatus({
    text: 'OK',
    iconCls: 'ok-icon',
    clear: true // auto-clear after a set interval
});

// Set the status bar to show that something is processing:
sb.showBusy();

// processing....

sb.clearStatus(); // once completeed</description>
          <functions>
            <function name="StatusBar" returns="StatusBar">
              <description>Creates a new StatusBar</description>
              <params>
                <param name="config" type="Object/Array" optional="False">
                  <description>A config object</description>
                </param>
              </params>
            </function>
            <function name="clearStatus" returns="Ext.StatusBar">
              <description>Clears the status text and iconCls. Also supports clearing via an optional fade out animation.</description>
              <params>
                <param name="config" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getText" returns="String">
              <description>Returns the current status text.</description>
            </function>
            <function name="setIcon" returns="Ext.StatusBar">
              <description>Convenience method for setting the status icon directly.  For more flexible options see setStatus.
See iconCls for complete details about customizing the icon.</description>
              <params>
                <param name="iconCls" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStatus" returns="Ext.StatusBar">
              <description>Sets the status text and/or iconCls. Also supports automatically clearing the
status that was set after a specified interval.</description>
              <params>
                <param name="config" type="Object/String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setText" returns="Ext.StatusBar">
              <description>Convenience method for setting the status text directly.  For more flexible options see setStatus.</description>
              <params>
                <param name="text" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showBusy" returns="Ext.StatusBar">
              <description>Convenience method for setting the status text and icon to special values that are pre-configured to indicate
a "busy" state, usually for loading or processing activities.</description>
              <params>
                <param name="config" type="Object/String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.StoreMgr" private="True" extends="Ext.util.MixedCollection">
          <description>The default global group of stores.This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="lookup" returns="Ext.data.Store">
              <description>Gets a registered Store by id</description>
              <params>
                <param name="id" type="String/Object" optional="False">
                  <description>The id of the Store, or a Store instance</description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Registers one or more Stores with the StoreMgr. You do not normally need to register stores
manually.  Any store initialized with a Ext.data.Store.storeId will be auto-registered.</description>
              <params>
                <param name="store1" type="Ext.data.Store" optional="False">
                  <description>(optional)</description>
                </param>
                <param name="store2" type="Ext.data.Store" optional="True">
                  <description>(optional)</description>
                </param>
                <param name="etc..." type="Ext.data.Store" optional="True">
                  <description>(optional)</description>
                </param>
              </params>
            </function>
            <function name="unregister" returns="void">
              <description>Unregisters one or more Stores with the StoreMgr</description>
              <params>
                <param name="id1" type="String/Object" optional="False">
                  <description>(optional)</description>
                </param>
                <param name="id2" type="String/Object" optional="True">
                  <description>(optional)</description>
                </param>
                <param name="etc..." type="String/Object" optional="True">
                  <description>(optional)</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.TabPanel" private="True" extends="Ext.Panel">
          <description>A basic tab container. TabPanels can be used exactly like a standard Ext.Panel for layout
purposes, but also have special support for containing child Components that are managed using a CardLayout
layout manager, and displayed as seperate tabs.
There is no actual tab class â€” each tab is simply an Component such
as a Panel. However, when rendered in a TabPanel, each child Component can fire
additional events that only exist for tabs and are not available from other Component. These are:

activate: Fires when this Component becomes the active tab.

Listeners will be called with the following arguments:
tab : PanelThe tab that was activated

deactivate: Fires when the Component that was the active tab becomes deactivated.

Listeners will be called with the following arguments:
tab : PanelThe tab that was deactivated


To add Components to a TabPanel which are generated dynamically on the server, it is necessary to
create a server script to generate the Javascript to create the Component required.
For example, to add a GridPanel to a TabPanel where the GridPanel is generated by the server
based on certain parameters, you would need to execute an Ajax request to invoke your the script,
and process the response object to add it to the TabPanel:Ext.Ajax.request({
    url: 'gen-invoice-grid.php',
    params: {
        startDate = Ext.getCmp('start-date').getValue(),
        endDate = Ext.getCmp('end-date').getValue()
    },
    success: function(xhr) {
        var newComponent = eval(xhr.responseText);
        myTabPanel.add(newComponent);
        myTabPanel.setActiveTab(newComponent);
    },
    failure: function() {
        Ext.Msg.alert("Grid create failed", "Server communication failure");
    }
});
The server script would need to return an executable Javascript statement which, when processed
using eval() will return either a config object with an xtype,
or an instantiated Component. For example:(function() {
    function formatDate(value){
        return value ? value.dateFormat('M d, Y') : '';
    };

    var store = new Ext.data.Store({
        url: 'get-invoice-data.php',
        baseParams: {
            startDate: '01/01/2008',
            endDate: '01/31/2008'
        },
        reader: new Ext.data.JsonReader({
            record: 'transaction',
            id: 'id',
            totalRecords: 'total'
        }, [
           'customer',
           'invNo',
           {name: 'date', type: 'date', dateFormat: 'm/d/Y'},
           {name: 'value', type: 'float'}
        ])
    });

    var grid = new Ext.grid.GridPanel({
        title: 'Invoice Report',
        bbar: new Ext.PagingToolbar(store),
        store: store,
        columns: [
            {header: "Customer", width: 250, dataIndex: 'customer', sortable: true},
            {header: "Invoice Number", width: 120, dataIndex: 'invNo', sortable: true},
            {header: "Invoice Date", width: 100, dataIndex: 'date', renderer: formatDate, sortable: true},
            {header: "Value", width: 120, dataIndex: 'value', renderer: 'usMoney', sortable: true}
        ],
    });
    store.load();
    return grid;
})();
Since that code is generated by a server script, the baseParams for the Store
can be configured into the Store. The metadata to allow generation of the Record layout, and the
ColumnModel is also known on the server, so these can be generated into the code.
When that code fragment is passed through the eval function in the success handler
of the Ajax request, the code is executed by the Javascript processor, and the anonymous function
runs, and returns the grid.
There are several other methods available for creating TabPanels. The output of the following
examples should produce exactly the same appearance. The tabs can be created and rendered completely
in code, as in this example:
var tabs = new Ext.TabPanel({
    renderTo: Ext.getBody(),
    activeTab: 0,
    items: [{
        title: 'Tab 1',
        html: 'A simple tab'
    },{
        title: 'Tab 2',
        html: 'Another one'
    }]
});
TabPanels can also be rendered from pre-existing markup in a couple of ways.  See the autoTabs example for
rendering entirely from markup that is already structured correctly as a TabPanel (a container div with
one or more nested tab divs with class 'x-tab'). You can also render from markup that is not strictly
structured by simply specifying by id which elements should be the container and the tabs. Using this method,
tab content can be pulled from different elements within the page by id regardless of page structure.  Note
that the tab divs in this example contain the class 'x-hide-display' so that they can be rendered deferred
without displaying outside the tabs. You could alternately set deferredRender to false to render all
content tabs on page load. For example:
var tabs = new Ext.TabPanel({
    renderTo: 'my-tabs',
    activeTab: 0,
    items:[
        {contentEl:'tab1', title:'Tab 1'},
        {contentEl:'tab2', title:'Tab 2'}
    ]
});

// Note that the tabs do not have to be nested within the container (although they can be)
&lt;div id="my-tabs"&gt;&lt;/div&gt;
&lt;div id="tab1" class="x-hide-display"&gt;A simple tab&lt;/div&gt;
&lt;div id="tab2" class="x-hide-display"&gt;Another one&lt;/div&gt;</description>
          <functions>
            <function name="TabPanel" returns="TabPanel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
            <function name="activate" returns="void">
              <description>Sets the specified tab as the active tab. This method fires the beforetabchange event which
can return false to cancel the tab change.</description>
              <params>
                <param name="tab" type="String/Panel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="beginUpdate" returns="void">
              <description>Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate</description>
            </function>
            <function name="endUpdate" returns="void">
              <description>Resumes calculations and scrolling at the end of a bulk operation. See beginUpdate</description>
            </function>
            <function name="getActiveTab" returns="Panel">
              <description>Gets the currently active tab.</description>
            </function>
            <function name="getItem" returns="Panel">
              <description>Gets the specified tab by id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTabEl" returns="HTMLElement">
              <description>Gets the DOM element for tab strip item which activates the
child panel with the specified ID. Access this to change the visual treatment of the
item, for example by changing the CSS class name.</description>
              <params>
                <param name="tab" type="Panel/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideTabStripItem" returns="void">
              <description>Hides the tab strip item for the passed tab</description>
              <params>
                <param name="item" type="Number/String/Panel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="readTabs" returns="void">
              <description>True to scan the markup in this tab panel for autoTabs using the autoTabSelector</description>
              <params>
                <param name="removeExisting" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollToTab" returns="void">
              <description>Scrolls to a particular tab if tab scrolling is enabled</description>
              <params>
                <param name="item" type="Panel" optional="False">
                  <description>
                  </description>
                </param>
                <param name="animate" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setActiveTab" returns="void">
              <description>Sets the specified tab as the active tab. This method fires the beforetabchange event which
can return false to cancel the tab change.</description>
              <params>
                <param name="tab" type="String/Panel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unhideTabStripItem" returns="void">
              <description>Unhides the tab strip item for the passed tab</description>
              <params>
                <param name="item" type="Number/String/Panel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.TaskMgr" private="True" extends="Object">
          <description>A static Ext.util.TaskRunner instance that can be used to start and stop arbitrary tasks.  See
Ext.util.TaskRunner for supported methods and task config properties.
// Start a simple clock task that updates a div once per second
var task = {
    run: function(){
        Ext.fly('clock').update(new Date().format('g:i:s A'));
    },
    interval: 1000 //1 second
}
Ext.TaskMgr.start(task);This class is a singleton and cannot be created directly.</description>
        </interface>
        <interface name="Ext.Template" private="True" extends="Object">
          <description>Represents an HTML fragment template. Templates can be precompiled for greater performance.
For a list of available format functions, see Ext.util.Format.
Usage:
var t = new Ext.Template(
    '&lt;div name="{id}"&gt;',
        '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
    '&lt;/div&gt;'
);
t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});</description>
          <attributes>
            <attribute name="disableFormats" type="Boolean" readonly="False">
              <description>True to disable format functions (defaults to false)</description>
            </attribute>
            <attribute name="re" type="RegExp" readonly="False">
              <description>The regular expression used to match template variables</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Template" returns="Template">
              <description>
              </description>
              <params>
                <param name="html" type="String/Array" optional="False">
                  <description>The HTML fragment or an array of fragments to join("") or multiple arguments to join("")</description>
                </param>
              </params>
            </function>
            <function name="Template.from" returns="Ext.Template">
              <description>&lt;static&gt; Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>A configuration object</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>A configuration object</description>
                </param>
              </params>
            </function>
            <function name="append" returns="HTMLElement/Ext.Element">
              <description>Applies the supplied values to the template and appends the new node(s) to el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>(optional) true to return a Ext.Element (defaults to undefined)</description>
                </param>
                <param name="values" type="Object/Array" optional="False">
                  <description>(optional) true to return a Ext.Element (defaults to undefined)</description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>(optional) true to return a Ext.Element (defaults to undefined)</description>
                </param>
              </params>
            </function>
            <function name="apply" returns="String">
              <description>Alias for applyTemplate
Returns an HTML fragment of this template with the specified values applied.</description>
              <params>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyTemplate" returns="String">
              <description>Returns an HTML fragment of this template with the specified values applied.</description>
              <params>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="compile" returns="Ext.Template">
              <description>Compiles the template into an internal function, eliminating the RegEx overhead.</description>
            </function>
            <function name="insertAfter" returns="HTMLElement/Ext.Element">
              <description>Applies the supplied values to the template and inserts the new node(s) after el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="HTMLElement/Ext.Element">
              <description>Applies the supplied values to the template and inserts the new node(s) before el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertFirst" returns="HTMLElement/Ext.Element">
              <description>Applies the supplied values to the template and inserts the new node(s) as the first child of el.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="overwrite" returns="HTMLElement/Ext.Element">
              <description>Applies the supplied values to the template and overwrites the content of el with the new node(s).</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="returnElement" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="Ext.Template">
              <description>Sets the HTML used as the template and optionally compiles it.</description>
              <params>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="compile" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Tip" private="True" extends="Ext.Panel">
          <description>This is the base class for Ext.QuickTip and Ext.Tooltip that provides the basic layout and
positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
tips that are displayed programmatically, or it can be extended to provide custom tip implementations.</description>
          <functions>
            <function name="Tip" returns="Tip">
              <description>Create a new Tip</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
            <function name="showAt" returns="void">
              <description>Shows this tip at the specified XY position.  Example usage:
// Show the tip at x:50 and y:100
tip.showAt([50,100]);</description>
              <params>
                <param name="xy" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showBy" returns="void">
              <description>Experimental. Shows this tip at a position relative to another element using a standard Ext.Element.alignTo
anchor position value.  Example usage:
// Show the tip at the default position ('tl-br?')
tip.showBy('my-el');

// Show the tip's top-left corner anchored to the element's top-right corner
tip.showBy('my-el', 'tl-tr');</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="position" type="String" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar" private="True" extends="Ext.BoxComponent">
          <description>Basic Toolbar class. Toolbar elements can be created explicitly via their constructors, or implicitly
via their xtypes.  Some items also have shortcut strings for creation.</description>
          <attributes>
            <attribute name="items" type="Ext.util.MixedCollection" readonly="False">
              <description>A MixedCollection of this Toolbar's items</description>
            </attribute>
            <attribute name="Button" type="Ext.Toolbar.Button" readonly="True" />
            <attribute name="Fill" type="Ext.Toolbar.Fill" readonly="True" />
            <attribute name="Item" type="Ext.Toolbar.Item" readonly="True" />
            <attribute name="Separator" type="Ext.Toolbar.Separator" readonly="True" />
            <attribute name="Spacer" type="Ext.Toolbar.Spacer" readonly="True" />
            <attribute name="SplitButton" type="Ext.Toolbar.SplitButton" readonly="True" />
            <attribute name="TextItem" type="Ext.Toolbar.TextItem" readonly="True" />
          </attributes>
          <functions>
            <function name="Toolbar" returns="Toolbar">
              <description>Creates a new Toolbar</description>
              <params>
                <param name="config" type="Object/Array" optional="False">
                  <description>A config object or an array of buttons to add</description>
                </param>
              </params>
            </function>
            <function name="add" returns="void">
              <description>Adds element(s) to the toolbar -- this function takes a variable number of
arguments of mixed type and adds them to the toolbar.</description>
              <params>
                <param name="arg1" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="arg2" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="etc." type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addButton" returns="Ext.Toolbar.Button/Array">
              <description>Adds a button (or buttons). See Ext.Toolbar.Button for more info on the config.</description>
              <params>
                <param name="config" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addDom" returns="Ext.Toolbar.Item">
              <description>Adds a new element to the toolbar from the passed Ext.DomHelper config</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addElement" returns="Ext.Toolbar.Item">
              <description>Adds any standard HTML element to the toolbar</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addField" returns="Ext.Toolbar.Item">
              <description>Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have
been rendered yet. For a field that has already been rendered, use addElement.</description>
              <params>
                <param name="field" type="Ext.form.Field" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addFill" returns="Ext.Toolbar.Fill">
              <description>Adds a fill element that forces subsequent additions to the right side of the toolbar</description>
            </function>
            <function name="addItem" returns="Ext.Toolbar.Item">
              <description>Adds any Toolbar.Item or subclass</description>
              <params>
                <param name="item" type="Ext.Toolbar.Item" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addSeparator" returns="Ext.Toolbar.Item">
              <description>Adds a separator</description>
            </function>
            <function name="addSpacer" returns="Ext.Toolbar.Spacer">
              <description>Adds a spacer element</description>
            </function>
            <function name="addText" returns="Ext.Toolbar.Item">
              <description>Adds text to the toolbar</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertButton" returns="Ext.Toolbar.Button/Item">
              <description>Inserts any Ext.Toolbar.Item/Ext.Toolbar.Button at the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="item" type="Object/Ext.Toolbar.Item/Ext.Toolbar.Button/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.Button" private="True" extends="Ext.Button">
          <description>A button that renders into a toolbar. Use the handler config to specify a callback function
to handle the button's click event.
new Ext.Panel({
	tbar : [
		{text: 'OK', handler: okHandler} // tbbutton is the default xtype if not specified
	]
});</description>
          <functions>
            <function name="Toolbar.Button" returns="Toolbar.Button">
              <description>Creates a new Button</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A standard Ext.Button config object</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.Fill" private="True" extends="Ext.Toolbar.Spacer">
          <description>A simple element that adds a greedy (100% width) horizontal space between items in a toolbar.
new Ext.Panel({
	tbar : [
		'Item 1',
		{xtype: 'tbfill'}, // or '-&gt;'
		'Item 2'
	]
});</description>
          <functions>
            <function name="Toolbar.Fill" returns="Toolbar.Fill">
              <description>Creates a new Spacer</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.Item" private="True" extends="Object">
          <description>The base class that other classes should extend in order to get some basic common toolbar item functionality.</description>
          <functions>
            <function name="Toolbar.Item" returns="Toolbar.Item">
              <description>Creates a new Item</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes and destroys this item.</description>
            </function>
            <function name="disable" returns="void">
              <description>Disables this item.</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables this item.</description>
            </function>
            <function name="focus" returns="void">
              <description>Try to focus this item</description>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Get this item's HTML Element</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides this item.</description>
            </function>
            <function name="setVisible" returns="void">
              <description>Convenience function for boolean show/hide.</description>
              <params>
                <param name="visible" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows this item.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.Separator" private="True" extends="Ext.Toolbar.Item">
          <description>A simple class that adds a vertical separator bar between toolbar items.  Example usage:
new Ext.Panel({
	tbar : [
		'Item 1',
		{xtype: 'tbseparator'}, // or '-'
		'Item 2'
	]
});</description>
          <functions>
            <function name="Toolbar.Separator" returns="Toolbar.Separator">
              <description>Creates a new Separator</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.Spacer" private="True" extends="Ext.Toolbar.Item">
          <description>A simple element that adds extra horizontal space between items in a toolbar.
new Ext.Panel({
	tbar : [
		'Item 1',
		{xtype: 'tbspacer'}, // or ' '
		'Item 2'
	]
});</description>
          <functions>
            <function name="Toolbar.Spacer" returns="Toolbar.Spacer">
              <description>Creates a new Spacer</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.SplitButton" private="True" extends="Ext.SplitButton">
          <description>A split button that renders into a toolbar.
new Ext.Panel({
	tbar : [
		{
			xtype: 'tbsplit',
		   	text: 'Options',
		   	handler: optionsHandler, // handle a click on the button itself
		   	menu: new Ext.menu.Menu({
		        items: [
		        	// These items will display in a dropdown menu when the split arrow is clicked
			        {text: 'Item 1', handler: item1Handler},
			        {text: 'Item 2', handler: item2Handler}
		        ]
		   	})
		}
	]
});</description>
          <functions>
            <function name="Toolbar.SplitButton" returns="Toolbar.SplitButton">
              <description>Creates a new SplitButton</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A standard Ext.SplitButton config object</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Toolbar.TextItem" private="True" extends="Ext.Toolbar.Item">
          <description>A simple class that renders text directly into a toolbar.
new Ext.Panel({
	tbar : [
		{xtype: 'tbtext', text: 'Item 1'} // or simply 'Item 1'
	]
});</description>
          <functions>
            <function name="Toolbar.TextItem" returns="Toolbar.TextItem">
              <description>Creates a new TextItem</description>
              <params>
                <param name="text" type="String/Object" optional="False">
                  <description>A text string, or a config object containing a text property</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.ToolTip" private="True" extends="Ext.Tip">
          <description>A standard tooltip implementation for providing additional information when hovering over a target element.</description>
          <functions>
            <function name="ToolTip" returns="ToolTip">
              <description>Create a new Tooltip</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The configuration options</description>
                </param>
              </params>
            </function>
            <function name="hide" returns="void">
              <description>Hides this tooltip if visible.</description>
            </function>
            <function name="show" returns="void">
              <description>Shows this tooltip at the current event target XY position.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.AsyncTreeNode" private="True" extends="Ext.tree.TreeNode">
          <description>
          </description>
          <attributes>
            <attribute name="loader" type="TreeLoader" readonly="False">
              <description>The loader used by this node (defaults to using the tree's defined loader)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="AsyncTreeNode" returns="AsyncTreeNode">
              <description>
              </description>
              <params>
                <param name="attributes" type="Object/String" optional="False">
                  <description>The attributes/config for the node or just a string with the text for the node</description>
                </param>
              </params>
            </function>
            <function name="isLoaded" returns="Boolean">
              <description>Returns true if this node has been loaded</description>
            </function>
            <function name="isLoading" returns="Boolean">
              <description>Returns true if this node is currently loading</description>
            </function>
            <function name="reload" returns="void">
              <description>Trigger a reload for this node</description>
              <params>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.DefaultSelectionModel" private="True" extends="Ext.util.Observable">
          <description>The default single selection for a TreePanel.</description>
          <functions>
            <function name="clearSelections" returns="void">
              <description>Clear all selections</description>
            </function>
            <function name="getSelectedNode" returns="TreeNode">
              <description>Get the selected node</description>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns true if the node is selected</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="TreeNode">
              <description>Select a node.</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectNext" returns="TreeNode">
              <description>Selects the node above the selected node in the tree, intelligently walking the nodes</description>
            </function>
            <function name="selectPrevious" returns="TreeNode">
              <description>Selects the node above the selected node in the tree, intelligently walking the nodes</description>
            </function>
            <function name="unselect" returns="void">
              <description>Deselect a node.</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.MultiSelectionModel" private="True" extends="Ext.util.Observable">
          <description>Multi selection for a TreePanel.</description>
          <functions>
            <function name="clearSelections" returns="void">
              <description>Clear all selections</description>
            </function>
            <function name="getSelectedNodes" returns="Array">
              <description>Returns an array of the selected nodes</description>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns true if the node is selected</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="select" returns="TreeNode">
              <description>Select a node.</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="EventObject" optional="True">
                  <description>
                  </description>
                </param>
                <param name="keepExisting" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unselect" returns="void">
              <description>Deselect a node.</description>
              <params>
                <param name="node" type="TreeNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.RootTreeNodeUI" private="True" extends="Object">
          <description>This class provides the default UI implementation for root Ext TreeNodes.
The RootTreeNode UI implementation allows customizing the appearance of the root tree node.

If you are customizing the Tree's user interface, you
may need to extend this class, but you should never need to instantiate this class.</description>
        </interface>
        <interface name="Ext.tree.TreeDragZone" private="True" extends="Ext.dd.DragZone">
          <description>
          </description>
          <attributes>
            <attribute name="tree" type="Ext.tree.TreePanel" readonly="False">
              <description>The TreePanel for this drag zone</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TreeDragZone" returns="TreeDragZone">
              <description>
              </description>
              <params>
                <param name="tree" type="String/HTMLElement/Element" optional="False">
                  <description>The Ext.tree.TreePanel for which to enable dragging</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The Ext.tree.TreePanel for which to enable dragging</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeDropZone" private="True" extends="Ext.dd.DropZone">
          <description>
          </description>
          <attributes>
            <attribute name="dragOverData" type="Ext.tree.TreePanel" readonly="False">
              <description>Arbitrary data that can be associated with this tree and will be included in the event object that gets
passed to any nodedragover event handler (defaults to {})</description>
            </attribute>
            <attribute name="tree" type="Ext.tree.TreePanel" readonly="False">
              <description>The TreePanel for this drop zone</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TreeDropZone" returns="TreeDropZone">
              <description>
              </description>
              <params>
                <param name="tree" type="String/HTMLElement/Element" optional="False">
                  <description>The Ext.tree.TreePanel for which to enable dropping</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The Ext.tree.TreePanel for which to enable dropping</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeEditor" private="True" extends="Ext.Editor">
          <description>Provides editor functionality for inline tree node editing.  Any valid Ext.form.Field subclass can be used
as the editor field.</description>
          <attributes>
            <attribute name="editNode" type="Ext.tree.TreeNode" readonly="True">
              <description>The tree node this editor is bound to. Read-only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TreeEditor" returns="TreeEditor">
              <description>
              </description>
              <params>
                <param name="tree" type="TreePanel" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fieldConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeFilter" private="True" extends="Object">
          <description>Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes</description>
          <functions>
            <function name="clear" returns="void">
              <description>Clears the current filter. Note: with the "remove" option
set a filter cannot be cleared.</description>
            </function>
            <function name="filter" returns="void">
              <description>Filter the data by a specific attribute.</description>
              <params>
                <param name="value" type="String/RegExp" optional="False">
                  <description>(optional) The attribute passed in your node's attributes collection. Defaults to "text".</description>
                </param>
                <param name="attr" type="String" optional="True">
                  <description>(optional) The attribute passed in your node's attributes collection. Defaults to "text".</description>
                </param>
                <param name="startNode" type="TreeNode" optional="True">
                  <description>(optional) The attribute passed in your node's attributes collection. Defaults to "text".</description>
                </param>
              </params>
            </function>
            <function name="filterBy" returns="void">
              <description>Filter by a function. The passed function will be called with each
node in the tree (or from the startNode). If the function returns true, the node is kept
otherwise it is filtered. If a node is filtered, its children are also filtered.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeLoader" private="True" extends="Ext.util.Observable">
          <description>A TreeLoader provides for lazy loading of an Ext.tree.TreeNode's child
nodes from a specified URL. The response must be a JavaScript Array definition
whose elements are node definition objects. eg:
[{
        id: 1,
        text: 'A leaf Node',
        leaf: true
    },{
        id: 2,
        text: 'A folder Node',
        children: [{
            id: 3,
            text: 'A child Node',
            leaf: true
        }]
   }]

A server request is sent, and child nodes are loaded only when a node is expanded.
The loading node's id is passed to the server under the parameter name "node" to
enable the server to produce the correct child nodes.

To pass extra parameters, an event handler may be attached to the "beforeload"
event, and the parameters specified in the TreeLoader's baseParams property:
myTreeLoader.on("beforeload", function(treeLoader, node) {
        this.baseParams.category = node.attributes.category;
    }, this);
This would pass an HTTP parameter called "category" to the server containing
the value of the Node's "category" attribute.</description>
          <functions>
            <function name="TreeLoader" returns="TreeLoader">
              <description>Creates a new Treeloader.</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>A config object containing config properties.</description>
                </param>
              </params>
            </function>
            <function name="createNode" returns="void">
              <description>Override this function for custom TreeNode node implementation, or to
modify the attributes at creation time.
Example:new Ext.tree.TreePanel({
    ...
    new Ext.tree.TreeLoader({
        url: 'dataUrl',
        createNode: function(attr) {
//          Allow consolidation consignments to have
//          consignments dropped into them.
            if (attr.isConsolidation) {
                attr.iconCls = 'x-consol',
                attr.allowDrop = true;
            }
            return Ext.tree.TreeLoader.prototype.call(this, attr);
        }
    }),
    ...
});</description>
              <params>
                <param name="{Object}" type="attr" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="load" returns="void">
              <description>Load an Ext.tree.TreeNode from the URL specified in the constructor.
This is called automatically when a node is expanded, but may be used to reload
a node (or append new children if the clearOnLoad option is false.)</description>
              <params>
                <param name="node" type="Ext.tree.TreeNode" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeNode" private="True" extends="Ext.data.Node">
          <description>
          </description>
          <attributes>
            <attribute name="disabled" type="Boolean" readonly="False">
              <description>True if this node is disabled.</description>
            </attribute>
            <attribute name="text" type="String" readonly="True">
              <description>Read-only. The text for this node. To change it use setText().</description>
            </attribute>
            <attribute name="ui" type="TreeNodeUI" readonly="True">
              <description>Read-only. The UI for this node</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TreeNode" returns="TreeNode">
              <description>
              </description>
              <params>
                <param name="attributes" type="Object/String" optional="False">
                  <description>The attributes/config for the node or just a string with the text for the node</description>
                </param>
              </params>
            </function>
            <function name="collapse" returns="void">
              <description>Collapse this node.</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>(optional) false to cancel the default animation</description>
                </param>
                <param name="anim" type="Boolean" optional="True">
                  <description>(optional) false to cancel the default animation</description>
                </param>
              </params>
            </function>
            <function name="collapseChildNodes" returns="void">
              <description>Collapse all child nodes</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disables this node</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables this node</description>
            </function>
            <function name="ensureVisible" returns="void">
              <description>Ensures all parent nodes are expanded, and if necessary, scrolls
the node into view.</description>
              <params>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="expand" returns="void">
              <description>Expand this node.</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="anim" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="expandChildNodes" returns="void">
              <description>Expand all child nodes</description>
              <params>
                <param name="deep" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getUI" returns="TreeNodeUI">
              <description>Returns the UI object for this node.</description>
            </function>
            <function name="isExpanded" returns="Boolean">
              <description>Returns true if this node is expanded</description>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns true if this node is selected</description>
            </function>
            <function name="select" returns="void">
              <description>Triggers selection of this node</description>
            </function>
            <function name="setText" returns="void">
              <description>Sets the text for this node</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggle" returns="void">
              <description>Toggles expanded/collapsed state of the node</description>
            </function>
            <function name="unselect" returns="void">
              <description>Triggers deselection of this node</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeNodeUI" private="True" extends="Object">
          <description>This class provides the default UI implementation for Ext TreeNodes.
The TreeNode UI implementation is separate from the
tree implementation, and allows customizing of the appearance of
tree nodes.

If you are customizing the Tree's user interface, you
may need to extend this class, but you should never need to instantiate this class.

This class provides access to the user interface components of an Ext TreeNode, through
Ext.tree.TreeNode.getUI</description>
          <functions>
            <function name="addClass" returns="void">
              <description>Adds one or more CSS classes to the node's UI element.
Duplicate classes are automatically filtered out.</description>
              <params>
                <param name="className" type="String/Array" optional="False">
                  <description>The CSS class to add, or an array of classes</description>
                </param>
              </params>
            </function>
            <function name="getAnchor" returns="HtmlElement">
              <description>Returns the &lt;a&gt; element that provides focus for the node's UI.</description>
            </function>
            <function name="getIconEl" returns="HtmlElement">
              <description>Returns the icon &lt;img&gt; element.</description>
            </function>
            <function name="getTextEl" returns="HtmlNode">
              <description>Returns the text node.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides this node.</description>
            </function>
            <function name="isChecked" returns="Boolean">
              <description>Returns the checked status of the node. If the node was rendered with no
checkbox, it returns false.</description>
            </function>
            <function name="removeClass" returns="void">
              <description>Removes one or more CSS classes from the node's UI element.</description>
              <params>
                <param name="className" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows this node.</description>
            </function>
            <function name="toggleCheck" returns="void">
              <description>Sets the checked status of the tree node to the passed value, or, if no value was passed,
toggles the checked status. If the node was rendered with no checkbox, this has no effect.</description>
              <params>
                <param name="(optional)" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreePanel" private="True" extends="Ext.Panel">
          <description>The TreePanel provides tree-structured UI representation of tree-structured data.
TreeNodes added to the TreePanel may each contain metadata
used by your application in their attributes property.
A TreePanel must have a root node before it is rendered. This may either be
specified using the root config option, or using the setRootNode method.</description>
          <attributes>
            <attribute name="dragZone" type="Ext.tree.TreeDragZone" readonly="False">
              <description>The dragZone used by this tree if drag is enabled</description>
            </attribute>
            <attribute name="dropZone" type="Ext.tree.TreeDropZone" readonly="False">
              <description>The dropZone used by this tree if drop is enabled</description>
            </attribute>
            <attribute name="root" type="Ext.tree.TreeNode" readonly="False">
              <description>The root node of this tree.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TreePanel" returns="TreePanel">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapseAll" returns="void">
              <description>Collapse all nodes</description>
            </function>
            <function name="expandAll" returns="void">
              <description>Expand all nodes</description>
            </function>
            <function name="expandPath" returns="void">
              <description>Expands a specified path in this TreePanel. A path can be retrieved from a node with Ext.data.Node.getPath</description>
              <params>
                <param name="path" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getChecked" returns="Array">
              <description>Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. "id")</description>
              <params>
                <param name="attribute" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="startNode" type="TreeNode" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="Element">
              <description>Returns the container element for this TreePanel.</description>
            </function>
            <function name="getLoader" returns="Ext.tree.TreeLoader">
              <description>Returns the default Ext.tree.TreeLoader for this TreePanel.</description>
            </function>
            <function name="getNodeById" returns="Node">
              <description>Gets a node in this tree by its id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRootNode" returns="Node">
              <description>Returns this root node for this tree</description>
            </function>
            <function name="getSelectionModel" returns="TreeSelectionModel">
              <description>Returns the selection model used by this TreePanel.</description>
            </function>
            <function name="getTreeEl" returns="Ext.Element">
              <description>Returns the underlying Element for this tree</description>
            </function>
            <function name="selectPath" returns="void">
              <description>Selects the node in this tree at the specified path. A path can be retrieved from a node with Ext.data.Node.getPath</description>
              <params>
                <param name="path" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRootNode" returns="Node">
              <description>Sets the root node for this tree during initialization.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.tree.TreeSorter" private="True" extends="Object">
          <description>Provides sorting of nodes in a Ext.tree.TreePanel.  The TreeSorter automatically monitors events on the
associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
Example usage:
new Ext.tree.TreeSorter(myTree, {
    folderSort: true,
    dir: "desc",
    sortType: function(node) {
        // sort by a custom, typed attribute:
        return parseInt(node.id, 10);
    }
});</description>
          <functions>
            <function name="TreeSorter" returns="TreeSorter">
              <description>
              </description>
              <params>
                <param name="tree" type="TreePanel" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Updater" private="True" extends="Ext.util.Observable">
          <description>Provides AJAX-style update capabilities for Element objects.  Updater can be used to update an Element once,
or you can use startAutoRefresh to set up an auto-updating Element on a specific interval.
Usage:
// Get it from a Ext.Element object
var el = Ext.get("foo");
var mgr = el.getUpdater();
mgr.update({
        url: "http://myserver.com/index.php",
        params: {
            param1: "foo",
            param2: "bar"
        }
});
...
mgr.formUpdate("myFormId", "http://myserver.com/index.php");

// or directly (returns the same Updater instance)
var mgr = new Ext.Updater("myElementId");
mgr.startAutoRefresh(60, "http://myserver.com/index.php");
mgr.on("update", myFcnNeedsToKnow);

// short handed call directly from the element object
Ext.get("foo").load({
        url: "bar.php",
        scripts: true,
        params: "param1=foo&amp;param2=bar",
        text: "Loading Foo..."
});</description>
          <attributes>
            <attribute name="defaultUrl" type="String" readonly="False">
              <description>Cached url to use for refreshes. Overwritten every time update() is called unless "discardUrl" param is set to true.</description>
            </attribute>
            <attribute name="disableCaching" type="Boolean" readonly="False">
              <description>Whether to append unique parameter on get request to disable caching (defaults to Ext.Updater.defaults.disableCaching).</description>
            </attribute>
            <attribute name="el" type="Ext.Element" readonly="False">
              <description>The Element object</description>
            </attribute>
            <attribute name="formUpdateDelegate" type="Function" readonly="False">
              <description>Delegate for formUpdate() prebound to "this", use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </attribute>
            <attribute name="indicatorText" type="String" readonly="False">
              <description>Text for loading indicator (defaults to Ext.Updater.defaults.indicatorText).</description>
            </attribute>
            <attribute name="loadScripts" type="Boolean" readonly="False">
              <description>True to process scripts in the output (defaults to Ext.Updater.defaults.loadScripts).</description>
            </attribute>
            <attribute name="refreshDelegate" type="Function" readonly="False">
              <description>Delegate for refresh() prebound to "this", use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </attribute>
            <attribute name="renderer" type="Object" readonly="False">
              <description>The renderer for this Updater (defaults to Ext.Updater.BasicRenderer).</description>
            </attribute>
            <attribute name="showLoadIndicator" type="String" readonly="False">
              <description>Whether to show indicatorText when loading (defaults to Ext.Updater.defaults.showLoadIndicator).</description>
            </attribute>
            <attribute name="sslBlankUrl" type="String" readonly="False">
              <description>Blank page URL to use with SSL file uploads (defaults to Ext.Updater.defaults.sslBlankUrl).</description>
            </attribute>
            <attribute name="timeout" type="Number" readonly="False">
              <description>Timeout for requests or form posts in seconds (defaults to Ext.Updater.defaults.timeout).</description>
            </attribute>
            <attribute name="transaction" type="Object" readonly="False">
              <description>Transaction object of the current executing transaction, or null if there is no active transaction.</description>
            </attribute>
            <attribute name="updateDelegate" type="Function" readonly="False">
              <description>Delegate for update() prebound to "this", use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </attribute>
            <attribute name="BasicRenderer" type="Ext.Updater.BasicRenderer" readonly="True" />
            <attribute name="defaults" type="Ext.Updater.defaults" readonly="True" />
          </attributes>
          <functions>
            <function name="Updater" returns="Updater">
              <description>Create new Updater directly.</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The element to update</description>
                </param>
                <param name="forceNew" type="Boolean" optional="True">
                  <description>The element to update</description>
                </param>
              </params>
            </function>
            <function name="Updater.updateElement" returns="void">
              <description>Deprecated. &lt;static&gt; Static convenience method. This method is deprecated in favor of el.load({url:'foo.php', ...}).
Usage:
Ext.Updater.updateElement("my-div", "stuff.php");</description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The url</description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>The url</description>
                </param>
                <param name="params" type="String/Object" optional="True">
                  <description>The url</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>The url</description>
                </param>
              </params>
            </function>
            <function name="abort" returns="void">
              <description>Aborts the currently executing transaction, if any.</description>
            </function>
            <function name="formUpdate" returns="void">
              <description>Performs an async form post, updating this element with the response. If the form has the attribute
enctype="multipart/form-data", it assumes it's a file upload.
Uses this.sslBlankUrl for SSL file uploads to prevent IE security warning.
File uploads are not performed using normal "Ajax" techniques, that is they are not
performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
DOM &lt;form&gt; element temporarily modified to have its
target set to refer
to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document
but removed after the return data has been gathered.
Be aware that file upload packets, sent with the content type multipart/form-data
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</description>
              <params>
                <param name="form" type="String/HTMLElement" optional="False">
                  <description>(optional) Callback when transaction is complete. The following
parameters are passed:
el : Ext.ElementThe Element being updated.
success : BooleanTrue for success, false for failure.
response : XMLHttpRequestThe XMLHttpRequest which processed the update.</description>
                </param>
                <param name="url" type="String" optional="True">
                  <description>(optional) Callback when transaction is complete. The following
parameters are passed:
el : Ext.ElementThe Element being updated.
success : BooleanTrue for success, false for failure.
response : XMLHttpRequestThe XMLHttpRequest which processed the update.</description>
                </param>
                <param name="reset" type="Boolean" optional="True">
                  <description>(optional) Callback when transaction is complete. The following
parameters are passed:
el : Ext.ElementThe Element being updated.
success : BooleanTrue for success, false for failure.
response : XMLHttpRequestThe XMLHttpRequest which processed the update.</description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>(optional) Callback when transaction is complete. The following
parameters are passed:
el : Ext.ElementThe Element being updated.
success : BooleanTrue for success, false for failure.
response : XMLHttpRequestThe XMLHttpRequest which processed the update.</description>
                </param>
              </params>
            </function>
            <function name="getDefaultRenderer" returns="void">
              <description>This is an overrideable method which returns a reference to a default
renderer class if none is specified when creating the Ext.Updater.
Defaults to Ext.Updater.BasicRenderer</description>
            </function>
            <function name="getEl" returns="Ext.Element">
              <description>Get the Element this Updater is bound to</description>
            </function>
            <function name="getRenderer" returns="Object">
              <description>Returns the content renderer for this Updater. See Ext.Updater.BasicRenderer.render for more details.</description>
            </function>
            <function name="isAutoRefreshing" returns="void">
              <description>Returns true if the Updater is currently set to auto refresh its content (see startAutoRefresh), otherwise false.</description>
            </function>
            <function name="isUpdating" returns="Boolean">
              <description>Returns true if an update is in progress, otherwise false.</description>
            </function>
            <function name="refresh" returns="void">
              <description>Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately</description>
              <params>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDefaultUrl" returns="void">
              <description>Sets the default URL used for updates.</description>
              <params>
                <param name="defaultUrl" type="String/Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRenderer" returns="void">
              <description>Sets the content renderer for this Updater. See Ext.Updater.BasicRenderer.render for more details.</description>
              <params>
                <param name="renderer" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showLoading" returns="void">
              <description>Display the element's "loading" state. By default, the element is updated with indicatorText. This
method may be overridden to perform a custom action while this Updater is actively updating its contents.</description>
            </function>
            <function name="startAutoRefresh" returns="void">
              <description>Set this element to auto refresh.  Can be canceled by calling stopAutoRefresh.</description>
              <params>
                <param name="interval" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String/Object/Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="params" type="String/Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="refreshNow" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopAutoRefresh" returns="void">
              <description>Stop auto refresh on this element.</description>
            </function>
            <function name="update" returns="void">
              <description>Performs an asynchronous request, updating this element with the response.
If params are specified it uses POST, otherwise it uses GET.
Note: Due to the asynchronous nature of remote server requests, the Element
will not have been fully updated when the function returns. To post-process the returned
data, use the callback option, or an update event handler.</description>
              <params>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Updater.BasicRenderer" private="True" extends="Object">
          <description>Default Content renderer. Updates the elements innerHTML with the responseText.</description>
          <functions>
            <function name="render" returns="void">
              <description>This is called when the transaction is completed and it's time to update the element - The BasicRenderer
updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),
create an object with a "render(el, response)" method and pass it to setRenderer on the Updater.</description>
              <params>
                <param name="el" type="Ext.Element" optional="False">
                  <description>The element being rendered</description>
                </param>
                <param name="response" type="Object" optional="False">
                  <description>The element being rendered</description>
                </param>
                <param name="updateManager" type="Updater" optional="False">
                  <description>The element being rendered</description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>The element being rendered</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Updater.defaults" private="True" extends="Object">
          <description>The defaults collection enables customizing the default properties of Updater</description>
          <attributes>
            <attribute name="disableCaching" type="Boolean" readonly="False">
              <description>True to append a unique parameter to GET requests to disable caching (defaults to false).</description>
            </attribute>
            <attribute name="indicatorText" type="String" readonly="False">
              <description>Text for loading indicator (defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').</description>
            </attribute>
            <attribute name="loadScripts" type="Boolean" readonly="False">
              <description>True to process scripts by default (defaults to false).</description>
            </attribute>
            <attribute name="showLoadIndicator" type="Boolean" readonly="False">
              <description>Whether or not to show indicatorText during loading (defaults to true).</description>
            </attribute>
            <attribute name="sslBlankUrl" type="String" readonly="False">
              <description>Blank page URL to use with SSL file uploads (defaults to Ext.SSL_SECURE_URL if set, or "javascript:false").</description>
            </attribute>
            <attribute name="timeout" type="Number" readonly="False">
              <description>Timeout for requests or form posts in seconds (defaults to 30 seconds).</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="Ext.util.ClickRepeater" private="True" extends="Ext.util.Observable">
          <description>A wrapper class which can be applied to any element. Fires a "click" event while the
 mouse is pressed. The interval between firings may be specified in the config but
 defaults to 20 milliseconds.

 Optionally, a CSS class may be applied to the element during the time it is pressed.</description>
          <functions>
            <function name="ClickRepeater" returns="ClickRepeater">
              <description>
              </description>
              <params>
                <param name="el" type="Mixed" optional="False">
                  <description>The element to listen on</description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>The element to listen on</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.CSS" private="True" extends="Object">
          <description>Utility class for manipulating CSS rulesThis class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="createStyleSheet" returns="StyleSheet">
              <description>Creates a stylesheet from a text blob of rules.
These rules will be wrapped in a STYLE tag and appended to the HEAD of the document.</description>
              <params>
                <param name="cssText" type="String" optional="False">
                  <description>The text containing the css rules</description>
                </param>
                <param name="id" type="String" optional="False">
                  <description>The text containing the css rules</description>
                </param>
              </params>
            </function>
            <function name="getRule" returns="CSSRule">
              <description>Gets an an individual CSS rule by selector(s)</description>
              <params>
                <param name="selector" type="String/Array" optional="False">
                  <description>true to refresh the internal cache if you have recently updated any rules or added styles dynamically</description>
                </param>
                <param name="refreshCache" type="Boolean" optional="False">
                  <description>true to refresh the internal cache if you have recently updated any rules or added styles dynamically</description>
                </param>
              </params>
            </function>
            <function name="getRules" returns="Object">
              <description>Gets all css rules for the document</description>
              <params>
                <param name="refreshCache" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refreshCache" returns="Object">
              <description>Refresh the rule cache if you have dynamically added stylesheets</description>
            </function>
            <function name="removeStyleSheet" returns="void">
              <description>Removes a style or link tag by id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="swapStyleSheet" returns="void">
              <description>Dynamically swaps an existing stylesheet reference for a new one</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateRule" returns="Boolean">
              <description>Updates a rule property</description>
              <params>
                <param name="selector" type="String/Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.DelayedTask" private="True" extends="Object">
          <description>Provides a convenient method of performing setTimeout where a new
timeout cancels the old timeout. An example would be performing validation on a keypress.
You can use this class to buffer
the keypress events for a certain number of milliseconds, and perform only if they stop
for that amount of time.</description>
          <functions>
            <function name="DelayedTask" returns="DelayedTask">
              <description>The parameters to this constructor serve as defaults and are not required.</description>
              <params>
                <param name="fn" type="Function" optional="True">
                  <description>(optional) The default function to timeout</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) The default function to timeout</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>(optional) The default function to timeout</description>
                </param>
              </params>
            </function>
            <function name="cancel" returns="void">
              <description>Cancel the last queued timeout</description>
            </function>
            <function name="delay" returns="void">
              <description>Cancels any pending timeout and queues a new one</description>
              <params>
                <param name="delay" type="Number" optional="False">
                  <description>(optional) Overrides scope passed to constructor</description>
                </param>
                <param name="newFn" type="Function" optional="True">
                  <description>(optional) Overrides scope passed to constructor</description>
                </param>
                <param name="newScope" type="Object" optional="True">
                  <description>(optional) Overrides scope passed to constructor</description>
                </param>
                <param name="newArgs" type="Array" optional="True">
                  <description>(optional) Overrides scope passed to constructor</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.Format" private="True" extends="Object">
          <description>Reusable data formatting functionsThis class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="capitalize" returns="String">
              <description>Converts the first character only of a string to upper case</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>The text to convert</description>
                </param>
              </params>
            </function>
            <function name="date" returns="String">
              <description>Parse a value into a formatted date using the specified format pattern.</description>
              <params>
                <param name="value" type="String/Date" optional="False">
                  <description>(optional) Any valid date format string (defaults to 'm/d/Y')</description>
                </param>
                <param name="format" type="String" optional="True">
                  <description>(optional) Any valid date format string (defaults to 'm/d/Y')</description>
                </param>
              </params>
            </function>
            <function name="dateRenderer" returns="Function">
              <description>Returns a date rendering function that can be reused to apply a date format multiple times efficiently</description>
              <params>
                <param name="format" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="defaultValue" returns="String">
              <description>Checks a reference and converts it to the default value if it's empty</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
                <param name="defaultValue" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="ellipsis" returns="String">
              <description>Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="length" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fileSize" returns="String">
              <description>Simple format for a file size (xxx bytes, xxx KB, xxx MB)</description>
              <params>
                <param name="size" type="Number/String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="htmlDecode" returns="String">
              <description>Convert certain characters (&amp;, &lt;, &gt;, and ') from their HTML character equivalents.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="htmlEncode" returns="String">
              <description>Convert certain characters (&amp;, &lt;, &gt;, and ') to their HTML character equivalents for literal display in web pages.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lowercase" returns="String">
              <description>Converts a string to all lower case letters</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="nl2br" returns="String">
              <description>Converts newline characters to the HTML tag &lt;br/&gt;</description>
              <params>
                <param name="The" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stripScripts" returns="String">
              <description>Strips all script tags</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stripTags" returns="String">
              <description>Strips all HTML tags</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="substr" returns="String">
              <description>Returns a substring from within an original string</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="start" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="length" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="trim" returns="String">
              <description>Trims any whitespace from either side of a string</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="undef" returns="Mixed">
              <description>Checks a reference and converts it to empty string if it is undefined</description>
              <params>
                <param name="value" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="uppercase" returns="String">
              <description>Converts a string to all upper case letters</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="usMoney" returns="String">
              <description>Format a number as US currency</description>
              <params>
                <param name="value" type="Number/String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.JSON" private="True" extends="Object">
          <description>Modified version of Douglas Crockford"s json.js that doesn"t
mess with the Object prototype
http://www.json.org/js.htmlThis class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="decode" returns="Object">
              <description>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError.</description>
              <params>
                <param name="json" type="String" optional="False">
                  <description>The JSON string</description>
                </param>
              </params>
            </function>
            <function name="encode" returns="String">
              <description>Encodes an Object, Array or other value</description>
              <params>
                <param name="o" type="Mixed" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.MixedCollection" private="True" extends="Ext.util.Observable">
          <description>A Collection class that maintains both numeric indexes and keys and exposes events.</description>
          <functions>
            <function name="MixedCollection" returns="MixedCollection">
              <description>
              </description>
              <params>
                <param name="allowFunctions" type="Boolean" optional="False">
                  <description>True if the addAll function should add function references to the
collection (defaults to false)</description>
                </param>
                <param name="keyFn" type="Function" optional="False">
                  <description>True if the addAll function should add function references to the
collection (defaults to false)</description>
                </param>
              </params>
            </function>
            <function name="add" returns="Object">
              <description>Adds an item to the collection. Fires the add event when complete.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>The item to add.</description>
                </param>
                <param name="o" type="Object" optional="False">
                  <description>The item to add.</description>
                </param>
              </params>
            </function>
            <function name="addAll" returns="void">
              <description>Adds all elements of an Array or an Object to the collection.</description>
              <params>
                <param name="objs" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clear" returns="void">
              <description>Removes all items from the collection.  Fires the clear event when complete.</description>
            </function>
            <function name="clone" returns="MixedCollection">
              <description>Creates a shallow copy of this collection</description>
            </function>
            <function name="contains" returns="Boolean">
              <description>Returns true if the collection contains the passed Object as an item.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="containsKey" returns="Boolean">
              <description>Returns true if the collection contains the passed Object as a key.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="each" returns="fn">
              <description>Executes the specified function once for every item in the collection, passing the following arguments:

The function should return a boolean value. Returning false from the function will stop the iteration.
        Parameters:
        fn : FunctionThe function to execute for each item.scope : Object(optional) The scope in which to execute the function.
        Returns:

            void</description>
            </function>
            <function name="eachKey" returns="void">
              <description>Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter" returns="MixedCollection">
              <description>Filter the objects in this collection by a specific property.
Returns a new collection that has been filtered.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/RegExp" optional="False">
                  <description>
                  </description>
                </param>
                <param name="anyMatch" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="caseSensitive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filterBy" returns="MixedCollection">
              <description>Filter by a function. Returns a new collection that has been filtered.
The passed function will be called with each object in the collection.
If the function returns true, the value is included otherwise it is filtered.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="find" returns="Object">
              <description>Returns the first item in the collection which elicits a true return value from the
passed selection function.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findIndex" returns="Number">
              <description>Finds the index of the first matching object in this collection by a specific property/value.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String/RegExp" optional="False">
                  <description>
                  </description>
                </param>
                <param name="start" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="anyMatch" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
                <param name="caseSensitive" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findIndexBy" returns="Number">
              <description>Find the index of the first matching object in this collection by a function.
If the function returns true it is considered a match.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="start" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="first" returns="Object">
              <description>Returns the first item in the collection.</description>
            </function>
            <function name="get" returns="Object">
              <description>Returns the item associated with the passed key or index.</description>
              <params>
                <param name="key" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCount" returns="Number">
              <description>Returns the number of items in the collection.</description>
            </function>
            <function name="getKey" returns="Object">
              <description>MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
simply returns item.id but you can provide your own implementation
to return a different value as in the following examples:
// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);</description>
              <params>
                <param name="item" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRange" returns="Array">
              <description>Returns a range of items in this collection</description>
              <params>
                <param name="startIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
                <param name="endIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="indexOf" returns="Number">
              <description>Returns index within the collection of the passed Object.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="indexOfKey" returns="Number">
              <description>Returns index within the collection of the passed key.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insert" returns="Object">
              <description>Inserts an item at the specified index in the collection. Fires the add event when complete.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="item" returns="Object">
              <description>Returns the item associated with the passed key OR index. Key has priority over index.  This is the equivalent
of calling key first, then if nothing matched calling itemAt.</description>
              <params>
                <param name="key" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="itemAt" returns="Object">
              <description>Returns the item at the specified index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="key" returns="Object">
              <description>Returns the item associated with the passed key.</description>
              <params>
                <param name="key" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="keySort" returns="void">
              <description>Sorts this collection by keys</description>
              <params>
                <param name="direction" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="last" returns="Object">
              <description>Returns the last item in the collection.</description>
            </function>
            <function name="remove" returns="Object">
              <description>Remove an item from the collection.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeAt" returns="Object">
              <description>Remove an item from a specified index in the collection. Fires the remove event when complete.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeKey" returns="Object">
              <description>Removed an item associated with the passed key fom the collection.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replace" returns="Object">
              <description>Replaces an item in the collection. Fires the replace event when complete.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="{Object}" type="o" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sort" returns="void">
              <description>Sorts this collection with the passed comparison function</description>
              <params>
                <param name="direction" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.Observable" private="True" extends="Object">
          <description>Abstract base class that provides a common interface for publishing events. Subclasses are expected to
to have a property "events" with all the events defined.
For example:
Employee = function(name){
    this.name = name;
    this.addEvents({
        "fired" : true,
        "quit" : true
    });
 }
 Ext.extend(Employee, Ext.util.Observable);</description>
          <functions>
            <function name="Observable.capture" returns="void">
              <description>&lt;static&gt; Starts capture on the specified Observable. All events will be passed
to the supplied function with the event name + standard signature of the event
before the event is fired. If the supplied function returns false,
the event will not fire.</description>
              <params>
                <param name="o" type="Observable" optional="False">
                  <description>The Observable to capture</description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>The Observable to capture</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The Observable to capture</description>
                </param>
              </params>
            </function>
            <function name="Observable.releaseCapture" returns="void">
              <description>&lt;static&gt; Removes all added captures from the Observable.</description>
              <params>
                <param name="o" type="Observable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addEvents" returns="void">
              <description>Used to define events on this Observable</description>
              <params>
                <param name="object" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addListener" returns="void">
              <description>Appends an event handler to this component</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:
scope : ObjectThe scope in which to execute the handler function. The handler function's "this" context.
delay : NumberThe number of milliseconds to delay the invocation of the handler after the event fires.
single : BooleanTrue to add a handler to handle just the next firing of the event, and then remove itself.
buffer : NumberCauses the handler to be scheduled to run in an Ext.util.DelayedTask delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is not invoked, but the new handler is scheduled in its place.


Combining Options
Using the options argument, it is possible to combine different types of listeners:

A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    forumId: 4
});

Attaching multiple handlers in 1 call
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.

foo.on({
    'click' : {
        fn: this.onClick,
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver,
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut,
        scope: this
    }
});

Or a shorthand syntax:
foo.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut,
     scope: this
});</description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:
scope : ObjectThe scope in which to execute the handler function. The handler function's "this" context.
delay : NumberThe number of milliseconds to delay the invocation of the handler after the event fires.
single : BooleanTrue to add a handler to handle just the next firing of the event, and then remove itself.
buffer : NumberCauses the handler to be scheduled to run in an Ext.util.DelayedTask delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is not invoked, but the new handler is scheduled in its place.


Combining Options
Using the options argument, it is possible to combine different types of listeners:

A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    forumId: 4
});

Attaching multiple handlers in 1 call
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.

foo.on({
    'click' : {
        fn: this.onClick,
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver,
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut,
        scope: this
    }
});

Or a shorthand syntax:
foo.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut,
     scope: this
});</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:
scope : ObjectThe scope in which to execute the handler function. The handler function's "this" context.
delay : NumberThe number of milliseconds to delay the invocation of the handler after the event fires.
single : BooleanTrue to add a handler to handle just the next firing of the event, and then remove itself.
buffer : NumberCauses the handler to be scheduled to run in an Ext.util.DelayedTask delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is not invoked, but the new handler is scheduled in its place.


Combining Options
Using the options argument, it is possible to combine different types of listeners:

A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    forumId: 4
});

Attaching multiple handlers in 1 call
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.

foo.on({
    'click' : {
        fn: this.onClick,
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver,
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut,
        scope: this
    }
});

Or a shorthand syntax:
foo.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut,
     scope: this
});</description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:
scope : ObjectThe scope in which to execute the handler function. The handler function's "this" context.
delay : NumberThe number of milliseconds to delay the invocation of the handler after the event fires.
single : BooleanTrue to add a handler to handle just the next firing of the event, and then remove itself.
buffer : NumberCauses the handler to be scheduled to run in an Ext.util.DelayedTask delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is not invoked, but the new handler is scheduled in its place.


Combining Options
Using the options argument, it is possible to combine different types of listeners:

A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    forumId: 4
});

Attaching multiple handlers in 1 call
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.

foo.on({
    'click' : {
        fn: this.onClick,
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver,
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut,
        scope: this
    }
});

Or a shorthand syntax:
foo.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut,
     scope: this
});</description>
                </param>
              </params>
            </function>
            <function name="fireEvent" returns="Boolean">
              <description>Fires the specified event with the passed parameters (minus the event name).</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object..." optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasListener" returns="Boolean">
              <description>Checks to see if this object has any listeners for a specified event</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="on" returns="void">
              <description>Appends an event handler to this element (shorthand for addListener)</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="purgeListeners" returns="void">
              <description>Removes all listeners for this object</description>
            </function>
            <function name="relayEvents" returns="void">
              <description>Relays selected events from the specified Observable as if the events were fired by this.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="events" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeListener" returns="void">
              <description>Removes a listener</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resumeEvents" returns="void">
              <description>Resume firing events. (see suspendEvents)</description>
            </function>
            <function name="suspendEvents" returns="void">
              <description>Suspend the firing of all events. (see resumeEvents)</description>
            </function>
            <function name="un" returns="void">
              <description>Removes a listener (shorthand for removeListener)</description>
              <params>
                <param name="eventName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.TaskRunner" private="True" extends="Object">
          <description>Provides the ability to execute one or more arbitrary tasks in a multithreaded manner.  Generally, you can use
the singleton Ext.TaskMgr instead, but if needed, you can create separate instances of TaskRunner.  Any
number of separate tasks can be started at any time and will run independently of each other.  Example usage:
// Start a simple clock task that updates a div once per second
var task = {
    run: function(){
        Ext.fly('clock').update(new Date().format('g:i:s A'));
    },
    interval: 1000 //1 second
}
var runner = new Ext.util.TaskRunner();
runner.start(task);</description>
          <functions>
            <function name="TaskRunner" returns="TaskRunner">
              <description>
              </description>
              <params>
                <param name="interval" type="Number" optional="True">
                  <description>(optional) The minimum precision in milliseconds supported by this TaskRunner instance
(defaults to 10)</description>
                </param>
              </params>
            </function>
            <function name="start" returns="Object">
              <description>Starts a new task.</description>
              <params>
                <param name="task" type="Object" optional="True">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="run" type="Function" optional="False">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="interval" type="Number" optional="False">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="duration" type="Number" optional="True">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
                <param name="repeat" type="Number" optional="True">
                  <description>The function to execute each time the task is run. The
function will be called at each interval and passed the args argument if specified. If a
particular scope is required, be sure to specify it using the scope argument.</description>
                </param>
              </params>
            </function>
            <function name="stop" returns="Object">
              <description>Stops an existing running task.</description>
              <params>
                <param name="task" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopAll" returns="void">
              <description>Stops all tasks that are currently running.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.util.TextMetrics" private="True" extends="Object">
          <description>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
wide, in pixels, a given block of text will be.This class is a singleton and cannot be created directly.</description>
          <functions>
            <function name="bind" returns="void">
              <description>Binds this TextMetrics instance to an element from which to copy existing CSS styles
that can affect the size of the rendered text</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>The element, dom node or id</description>
                </param>
              </params>
            </function>
            <function name="createInstance" returns="Ext.util.TextMetrics.Instance">
              <description>Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
the overhead of multiple calls to initialize the style properties on each measurement.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>(optional) If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height</description>
                </param>
                <param name="fixedWidth" type="Number" optional="True">
                  <description>(optional) If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height</description>
                </param>
              </params>
            </function>
            <function name="getHeight" returns="Number">
              <description>Returns the measured height of the specified text.  For multiline text, be sure to call
setFixedWidth if necessary.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSize" returns="Object">
              <description>Returns the size of the specified text based on the internal element's style and width properties</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getWidth" returns="Number">
              <description>Returns the measured width of the specified text</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="measure" returns="Object">
              <description>Measures the size of the specified text</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fixedWidth" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFixedWidth" returns="void">
              <description>Sets a fixed width on the internal measurement element.  If the text will be multiline, you have
to set a fixed width in order to accurately measure the text height.</description>
              <params>
                <param name="width" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.ux.form.DateTime" private="True" extends="Ext.form.Field">
          <description>Ext.ux.form.DateTime Extension Class for Ext 2.x Library</description>
        </interface>
        <interface name="Ext.Viewport" private="True" extends="Ext.Container">
          <description>A specialized container representing the viewable application area (the browser viewport).
 The Viewport renders itself to the document body, and automatically sizes itself to the size of
the browser viewport and manages window resizing. There may only be one Viewport created
in a page. Inner layouts are available by virtue of the fact that all Panels
added to the Viewport, either through its items, or through the items, or the add
method of any of its child Panels may themselves have a layout.
The Viewport does not provide scrolling, so child Panels within the Viewport should provide
for scrolling if needed using the autoScroll config.
Example showing a classic application border layout :new Ext.Viewport({
    layout: 'border',
    items: [{
        region: 'north',
        html: '&lt;h1 class="x-panel-header"&gt;Page Title&lt;/h1&gt;',
        autoHeight: true,
        border: false,
        margins: '0 0 5 0'
    }, {
        region: 'west',
        collapsible: true,
        title: 'Navigation',
        xtype: 'treepanel',
        width: 200,
        autoScroll: true,
        split: true,
        loader: new Ext.tree.TreeLoader(),
        root: new Ext.tree.AsyncTreeNode({
            expanded: true,
            children: [{
                text: 'Menu Option 1',
                leaf: true
            }, {
                text: 'Menu Option 2',
                leaf: true
            }, {
                text: 'Menu Option 3',
                leaf: true
            }]
        }),
        rootVisible: false,
        listeners: {
            click: function(n) {
                Ext.Msg.alert('Navigation Tree Click', 'You clicked: "' + n.attributes.text + '"');
            }
        }
    }, {
        region: 'center',
        xtype: 'tabpanel',
        items: {
            title: 'Default Tab',
            html: 'The first tab\'s content. Others may be added dynamically'
        }
    }, {
        region: 'south',
        title: 'Information',
        collapsible: true,
        html: 'Information goes here',
        split: true,
        height: 100,
        minHeight: 100
    }]
});</description>
          <functions>
            <function name="Viewport" returns="Viewport">
              <description>Create a new Viewport</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.Window" private="True" extends="Ext.Panel">
          <description>A specialized panel intended for use as an application window.  Windows are floated and draggable by default, and
also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the
minimize behavior is application-specific).  Windows can also be linked to a Ext.WindowGroup or managed
by the Ext.WindowMgr to provide grouping, activation, to front/back and other application-specific behavior.</description>
          <attributes>
            <attribute name="dd" type="Ext.dd.DD" readonly="False">
              <description>If this Window is configured draggable, this property will contain
an instance of Ext.dd.DD which handles dragging the Window's DOM Element.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Window" returns="Window">
              <description>
              </description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>The config object</description>
                </param>
              </params>
            </function>
            <function name="alignTo" returns="Ext.Window">
              <description>Aligns the window to the specified element</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>The position to align to (see Ext.Element.alignTo for more details).</description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>The position to align to (see Ext.Element.alignTo for more details).</description>
                </param>
                <param name="offsets" type="Array" optional="True">
                  <description>The position to align to (see Ext.Element.alignTo for more details).</description>
                </param>
              </params>
            </function>
            <function name="anchorTo" returns="Ext.Window">
              <description>Anchors this window to another element and realigns it when the window is resized or scrolled.</description>
              <params>
                <param name="element" type="Mixed" optional="False">
                  <description>(optional) Offset the positioning by [x, y]</description>
                </param>
                <param name="position" type="String" optional="False">
                  <description>(optional) Offset the positioning by [x, y]</description>
                </param>
                <param name="offsets" type="Array" optional="True">
                  <description>(optional) Offset the positioning by [x, y]</description>
                </param>
                <param name="monitorScroll" type="Boolean/Number" optional="True">
                  <description>(optional) Offset the positioning by [x, y]</description>
                </param>
              </params>
            </function>
            <function name="center" returns="Ext.Window">
              <description>Centers this window in the viewport</description>
            </function>
            <function name="close" returns="void">
              <description>Closes the window, removes it from the DOM and destroys the window object.  The beforeclose event is fired
before the close happens and will cancel the close action if it returns false.</description>
            </function>
            <function name="focus" returns="void">
              <description>Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
window itself will receive focus.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the window, setting it to invisible and applying negative offsets.</description>
              <params>
                <param name="animateTarget" type="String/Element" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="maximize" returns="void">
              <description>Fits the window within its current container and automatically replaces the 'maximize' tool button with
the 'restore' tool button.</description>
            </function>
            <function name="minimize" returns="void">
              <description>Placeholder method for minimizing the window.  By default, this method simply fires the minimize event
since the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,
either the minimize event can be handled or this method can be overridden.</description>
            </function>
            <function name="restore" returns="void">
              <description>Restores a maximized window back to its original size and position prior to being maximized and also replaces
the 'restore' tool button with the 'maximize' tool button.</description>
            </function>
            <function name="setActive" returns="void">
              <description>Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
fires the activate or deactivate event depending on which action occurred.</description>
              <params>
                <param name="active" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAnimateTarget" returns="void">
              <description>Sets the target element from which the window should animate while opening.</description>
              <params>
                <param name="el" type="String/Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.</description>
              <params>
                <param name="animateTarget" type="String/Element" optional="True">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="True">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toBack" returns="Ext.Window">
              <description>Sends this window to the back of (lower z-index than) any other visible windows</description>
            </function>
            <function name="toFront" returns="Ext.Window">
              <description>Brings this window to the front of any other visible windows</description>
            </function>
            <function name="toggleMaximize" returns="void">
              <description>A shortcut method for toggling between maximize and restore based on the current maximized
state of the window.</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.WindowGroup" private="True" extends="Object">
          <description>An object that represents a group of Ext.Window instances and provides z-order management
and window activation behavior.</description>
          <attributes>
            <attribute name="zseed" type="Number" readonly="False">
              <description>The starting z-index for windows (defaults to 9000)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="WindowGroup" returns="WindowGroup">
              <description>
              </description>
            </function>
            <function name="bringToFront" returns="Boolean">
              <description>Brings the specified window to the front of any other active windows.</description>
              <params>
                <param name="win" type="String/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="each" returns="void">
              <description>Executes the specified function once for every window in the group, passing each
window as the only parameter. Returning false from the function will stop the iteration.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="Ext.Window">
              <description>Gets a registered window by id.</description>
              <params>
                <param name="id" type="String/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getActive" returns="Ext.Window">
              <description>Gets the currently-active window in the group.</description>
            </function>
            <function name="getBy" returns="Array">
              <description>Returns zero or more windows in the group using the custom search function passed to this method.
The function should accept a single Ext.Window reference as its only argument and should
return true if the window matches the search criteria, otherwise it should return false.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideAll" returns="void">
              <description>Hides all windows in the group.</description>
            </function>
            <function name="sendToBack" returns="Ext.Window">
              <description>Sends the specified window to the back of other active windows.</description>
              <params>
                <param name="win" type="String/Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Ext.WindowMgr" private="True" extends="Ext.WindowGroup">
          <description>The default global window group that is available automatically.  To have more than one group of windows
with separate z-order stacks, create additional instances of Ext.WindowGroup as needed.This class is a singleton and cannot be created directly.</description>
        </interface>
        <interface name="Ext.XTemplate" private="True" extends="Ext.Template">
          <description>A template class that supports advanced functionality like autofilling arrays, conditional processing with
basic comparison operators, sub-templates, basic math function support, special built-in template variables,
inline code execution and more.  XTemplate also provides the templating mechanism built into Ext.DataView.
XTemplate supports many special tags and built-in operators that aren't defined as part of the API, but are
supported in the templates that can be created.  The following examples demonstrate all of the supported features.
This is the data object used for reference in each code example:
var data = {
    name: 'Jack Slocum',
    title: 'Lead Developer',
    company: 'Ext JS, LLC',
    email: 'jack@extjs.com',
    address: '4 Red Bulls Drive',
    city: 'Cleveland',
    state: 'Ohio',
    zip: '44102',
    drinks: ['Red Bull', 'Coffee', 'Water'],
    kids: [{
        name: 'Sara Grace',
        age:3
    },{
        name: 'Zachary',
        age:2
    },{
        name: 'John James',
        age:0
    }]
};
Auto filling of arrays and scope switchingUsing the tpl tag and the for operator,
you can switch to the scope of the object specified by for and access its members to populate the template.
If the variable in for is an array, it will auto-fill, repeating the template block inside the tpl
tag for each item in the array:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Title: {title}&lt;/p&gt;',
    '&lt;p&gt;Company: {company}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
        '&lt;p&gt;{name}&lt;/p&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);
Access to parent object from within sub-template scopeWhen processing a sub-template, for example while
looping through a child array, you can access the parent object's members via the parent object:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
        '&lt;tpl if="age &amp;gt; 1"&gt;',  // &lt;-- Note that the &gt; is encoded
            '&lt;p&gt;{name}&lt;/p&gt;',
            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);
Array item index and basic math support While processing an array, the special variable {#}
will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators
+ - * and / that can be applied directly on numeric data values:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
        '&lt;tpl if="age &amp;gt; 1"&gt;',  // &lt;-- Note that the &gt; is encoded
            '&lt;p&gt;{#}: {name}&lt;/p&gt;',  // &lt;-- Auto-number each item
            '&lt;p&gt;In 5 Years: {age+5}&lt;/p&gt;',  // &lt;-- Basic math
            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);
Auto-rendering of flat arrays Flat arrays that contain values (and not objects) can be auto-rendered
using the special {.} variable inside a loop.  This variable will represent the value of
the array at the current index:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;{name}\'s favorite beverages:&lt;/p&gt;',
    '&lt;tpl for="drinks"&gt;',
       '&lt;div&gt; - {.}&lt;/div&gt;',
    '&lt;/tpl&gt;'
);
tpl.overwrite(panel.body, data);
Basic conditional logic Using the tpl tag and the if
operator you can provide conditional checks for deciding whether or not to render specific parts of the template.
Note that there is no else operator â€” if needed, you should use two opposite if statements.
Properly-encoded attributes are required as seen in the following example:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
        '&lt;tpl if="age &amp;gt; 1"&gt;',  // &lt;-- Note that the &gt; is encoded
            '&lt;p&gt;{name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);
Ability to execute arbitrary inline code In an XTemplate, anything between {[ ... ]}  is considered
code to be executed in the scope of the template. There are some special variables available in that code:

values: The values in the current scope. If you are using scope changing sub-templates, you
can change what values is.
parent: The scope (values) of the ancestor template.
xindex: If you are in a looping template, the index of the loop you are in (1-based).
xcount: If you are in a looping template, the total length of the array you are looping.
fm: An alias for Ext.util.Format.

This example demonstrates basic row striping using an inline code block and the xindex variable:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
       '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}"&gt;',
        '{name}',
        '&lt;/div&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);
Template member functions One or more member functions can be defined directly on the config
object passed into the XTemplate constructor for more complex processing:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for="kids"&gt;',
        '&lt;tpl if="this.isGirl(name)"&gt;',
            '&lt;p&gt;Girl: {name} - {age}&lt;/p&gt;',
        '&lt;/tpl&gt;',
        '&lt;tpl if="this.isGirl(name) == false"&gt;',
            '&lt;p&gt;Boy: {name} - {age}&lt;/p&gt;',
        '&lt;/tpl&gt;',
        '&lt;tpl if="this.isBaby(age)"&gt;',
            '&lt;p&gt;{name} is a baby!&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;', {
     isGirl: function(name){
         return name == 'Sara Grace';
     },
     isBaby: function(age){
        return age &lt; 1;
     }
});
tpl.overwrite(panel.body, data);</description>
          <functions>
            <function name="XTemplate" returns="XTemplate">
              <description>
              </description>
              <params>
                <param name="parts" type="String/Array/Object" optional="False">
                  <description>The HTML fragment or an array of fragments to join(""), or multiple arguments
to join("") that can also include a config object</description>
                </param>
              </params>
            </function>
            <function name="XTemplate.from" returns="Ext.Template">
              <description>&lt;static&gt; Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="apply" returns="String">
              <description>Alias for applyTemplate
Returns an HTML fragment of this template with the specified values applied.</description>
              <params>
                <param name="values" type="Object/Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyTemplate" returns="String">
              <description>Returns an HTML fragment of this template with the specified values applied.</description>
              <params>
                <param name="values" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="compile" returns="Function">
              <description>Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.</description>
            </function>
          </functions>
        </interface>
        <interface name="Function" private="False" extends="Object">
          <description>These functions are available on every Function object (any JavaScript function).</description>
          <functions>
            <function name="createCallback" returns="Function">
              <description>Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Call directly on any function. Example: myFunction.createCallback(arg1, arg2)
Will create a function that is bound to those 2 args. If a specific scope is required in the
callback, use createDelegate instead. The function returned by createCallback always
executes in the window scope.
This method is required when you want to pass arguments to a callback function.  If no arguments
are needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).
However, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function
would simply execute immediately when the code is parsed. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

// clicking the button alerts "Hi, Fred"
new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody(),
    handler: sayHi.createCallback('Fred')
});</description>
            </function>
            <function name="createDelegate" returns="Function">
              <description>Creates a delegate (callback) that sets the scope to obj.
Call directly on any function. Example: this.myFunction.createDelegate(this, [arg1, arg2])
Will create a function that is automatically scoped to obj so that the this variable inside the
callback points to obj. Example usage:
var sayHi = function(name){
    // Note this use of "this.text" here.  This function expects to
    // execute within a scope that contains a text property.  In this
    // example, the "this" variable is pointing to the btn object that
    // was passed in createDelegate below.
    alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
}

var btn = new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody()
});

// This callback will execute in the scope of the
// button instance. Clicking the button alerts
// "Hi, Fred. You clicked the "Say Hi" button."
btn.on('click', sayHi.createDelegate(btn, ['Fred']));</description>
              <params>
                <param name="obj" type="Object" optional="True">
                  <description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description>
                </param>
                <param name="appendArgs" type="Boolean/Number" optional="True">
                  <description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description>
                </param>
              </params>
            </function>
            <function name="createInterceptor" returns="Function">
              <description>Creates an interceptor function. The passed fcn is called before the original one. If it returns false,
the original one is not called. The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts "Hi, Fred"

// create a new function that validates input without
// directly modifying the original function:
var sayHiToFriend = sayHi.createInterceptor(function(name){
    return name == 'Brian';
});

sayHiToFriend('Fred');  // no alert
sayHiToFriend('Brian'); // alerts "Hi, Brian"</description>
              <params>
                <param name="fcn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createSequence" returns="Function">
              <description>Create a combined function call sequence of the original function + the passed function.
The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts "Hi, Fred"

var sayGoodbye = sayHi.createSequence(function(name){
    alert('Bye, ' + name);
});

sayGoodbye('Fred'); // both alerts show</description>
              <params>
                <param name="fcn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="defer" returns="Number">
              <description>Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

// executes immediately:
sayHi('Fred');

// executes after 2 seconds:
sayHi.defer(2000, this, ['Fred']);

// this syntax is sometimes useful for deferring
// execution of an anonymous function:
(function(){
    alert('Anonymous');
}).defer(100);</description>
              <params>
                <param name="millis" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="True">
                  <description>
                  </description>
                </param>
                <param name="args" type="Array" optional="True">
                  <description>
                  </description>
                </param>
                <param name="appendArgs" type="Boolean/Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="Number" private="False" extends="Object">
          <description>
          </description>
          <functions>
            <function name="constrain" returns="Number">
              <description>Checks whether or not the current number is within a desired range.  If the number is already within the
range it is returned, otherwise the min or max value is returned depending on which side of the range is
exceeded.  Note that this method returns the constrained value but does not change the current number.</description>
              <params>
                <param name="min" type="Number" optional="False">
                  <description>The minimum number in the range</description>
                </param>
                <param name="max" type="Number" optional="False">
                  <description>The minimum number in the range</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="String" private="False" extends="Object">
          <description>These functions are available as static methods on the JavaScript String object.</description>
          <functions>
            <function name="escape" returns="String">
              <description>&lt;static&gt; Escapes the passed string for ' and \</description>
              <params>
                <param name="string" type="String" optional="False">
                  <description>The string to escape</description>
                </param>
              </params>
            </function>
            <function name="format" returns="String">
              <description>&lt;static&gt; Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
var cls = 'my-class', text = 'Some text';
var s = String.format('&lt;div class="{0}"&gt;{1}&lt;/div&gt;', cls, text);
// s now contains the string: '&lt;div class="my-class"&gt;Some text&lt;/div&gt;'</description>
              <params>
                <param name="string" type="String" optional="False">
                  <description>The value to replace token {0}</description>
                </param>
                <param name="value1" type="String" optional="False">
                  <description>The value to replace token {0}</description>
                </param>
                <param name="value2" type="String" optional="False">
                  <description>The value to replace token {0}</description>
                </param>
              </params>
            </function>
            <function name="leftPad" returns="String">
              <description>&lt;static&gt; Pads the left side of a string with a specified character.  This is especially useful
for normalizing number and date strings.  Example usage:
var s = String.leftPad('123', 5, '0');
// s now contains the string: '00123'</description>
              <params>
                <param name="string" type="String" optional="False">
                  <description>(optional) The character with which to pad the original string (defaults to empty string " ")</description>
                </param>
                <param name="size" type="Number" optional="False">
                  <description>(optional) The character with which to pad the original string (defaults to empty string " ")</description>
                </param>
                <param name="char" type="String" optional="True">
                  <description>(optional) The character with which to pad the original string (defaults to empty string " ")</description>
                </param>
              </params>
            </function>
            <function name="toggle" returns="String">
              <description>Utility function that allows you to easily switch a string between two alternating values.  The passed value
is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
they are already different, the first value passed in is returned.  Note that this method returns the new value
but does not change the current string.
// alternate sort directions
sort = sort.toggle('ASC', 'DESC');

// instead of conditional logic:
sort = (sort == 'ASC' ? 'DESC' : 'ASC');</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="other" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="trim" returns="String">
              <description>Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
var s = '  foo bar  ';
alert('-' + s + '-');         //alerts "- foo bar -"
alert('-' + s.trim() + '-');  //alerts "-foo bar-"</description>
            </function>
          </functions>
        </interface>
        <interface name="Ext.air" private="True" extends="Object">
          <attributes>
            <attribute name="Clipboard" type="Ext.air.Clipboard" readonly="True" />
            <attribute name="DragType" type="Ext.air.DragType" readonly="True" />
            <attribute name="FileProvider" type="Ext.air.FileProvider" readonly="True" />
            <attribute name="NativeObservable" type="Ext.air.NativeObservable" readonly="True" />
            <attribute name="NativeWindow" type="Ext.air.NativeWindow" readonly="True" />
            <attribute name="NativeWindowGroup" type="Ext.air.NativeWindowGroup" readonly="True" />
            <attribute name="NativeWindowManager" type="Ext.air.NativeWindowManager" readonly="True" />
            <attribute name="Sound" type="Ext.air.Sound" readonly="True" />
            <attribute name="SystemMenu" type="Ext.air.SystemMenu" readonly="True" />
            <attribute name="SystemTray" type="Ext.air.SystemTray" readonly="True" />
            <attribute name="VideoPanel" type="Ext.air.VideoPanel" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.data" private="True" extends="Object">
          <attributes>
            <attribute name="ArrayReader" type="Ext.data.ArrayReader" readonly="True" />
            <attribute name="Connection" type="Ext.data.Connection" readonly="True" />
            <attribute name="DataProxy" type="Ext.data.DataProxy" readonly="True" />
            <attribute name="DataReader" type="Ext.data.DataReader" readonly="True" />
            <attribute name="Field" type="Ext.data.Field" readonly="True" />
            <attribute name="GroupingStore" type="Ext.data.GroupingStore" readonly="True" />
            <attribute name="HttpProxy" type="Ext.data.HttpProxy" readonly="True" />
            <attribute name="JsonReader" type="Ext.data.JsonReader" readonly="True" />
            <attribute name="JsonStore" type="Ext.data.JsonStore" readonly="True" />
            <attribute name="MemoryProxy" type="Ext.data.MemoryProxy" readonly="True" />
            <attribute name="Node" type="Ext.data.Node" readonly="True" />
            <attribute name="Record" type="Ext.data.Record" readonly="True" />
            <attribute name="ScriptTagProxy" type="Ext.data.ScriptTagProxy" readonly="True" />
            <attribute name="SimpleStore" type="Ext.data.SimpleStore" readonly="True" />
            <attribute name="SortTypes" type="Ext.data.SortTypes" readonly="True" />
            <attribute name="Store" type="Ext.data.Store" readonly="True" />
            <attribute name="Tree" type="Ext.data.Tree" readonly="True" />
            <attribute name="XmlReader" type="Ext.data.XmlReader" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.dd" private="True" extends="Object">
          <attributes>
            <attribute name="DD" type="Ext.dd.DD" readonly="True" />
            <attribute name="DDProxy" type="Ext.dd.DDProxy" readonly="True" />
            <attribute name="DDTarget" type="Ext.dd.DDTarget" readonly="True" />
            <attribute name="DragDrop" type="Ext.dd.DragDrop" readonly="True" />
            <attribute name="DragDropMgr" type="Ext.dd.DragDropMgr" readonly="True" />
            <attribute name="DragSource" type="Ext.dd.DragSource" readonly="True" />
            <attribute name="DragZone" type="Ext.dd.DragZone" readonly="True" />
            <attribute name="DropTarget" type="Ext.dd.DropTarget" readonly="True" />
            <attribute name="DropZone" type="Ext.dd.DropZone" readonly="True" />
            <attribute name="PanelProxy" type="Ext.dd.PanelProxy" readonly="True" />
            <attribute name="Registry" type="Ext.dd.Registry" readonly="True" />
            <attribute name="ScrollManager" type="Ext.dd.ScrollManager" readonly="True" />
            <attribute name="StatusProxy" type="Ext.dd.StatusProxy" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.form" private="True" extends="Object">
          <attributes>
            <attribute name="Action" type="Ext.form.Action" readonly="True" />
            <attribute name="BasicForm" type="Ext.form.BasicForm" readonly="True" />
            <attribute name="Checkbox" type="Ext.form.Checkbox" readonly="True" />
            <attribute name="CheckboxGroup" type="Ext.form.CheckboxGroup" readonly="True" />
            <attribute name="ComboBox" type="Ext.form.ComboBox" readonly="True" />
            <attribute name="DateField" type="Ext.form.DateField" readonly="True" />
            <attribute name="Field" type="Ext.form.Field" readonly="True" />
            <attribute name="FieldSet" type="Ext.form.FieldSet" readonly="True" />
            <attribute name="FormPanel" type="Ext.form.FormPanel" readonly="True" />
            <attribute name="Hidden" type="Ext.form.Hidden" readonly="True" />
            <attribute name="HtmlEditor" type="Ext.form.HtmlEditor" readonly="True" />
            <attribute name="Label" type="Ext.form.Label" readonly="True" />
            <attribute name="NumberField" type="Ext.form.NumberField" readonly="True" />
            <attribute name="Radio" type="Ext.form.Radio" readonly="True" />
            <attribute name="RadioGroup" type="Ext.form.RadioGroup" readonly="True" />
            <attribute name="TextArea" type="Ext.form.TextArea" readonly="True" />
            <attribute name="TextField" type="Ext.form.TextField" readonly="True" />
            <attribute name="TimeField" type="Ext.form.TimeField" readonly="True" />
            <attribute name="TriggerField" type="Ext.form.TriggerField" readonly="True" />
            <attribute name="VTypes" type="Ext.form.VTypes" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.grid" private="True" extends="Object">
          <attributes>
            <attribute name="AbstractSelectionModel" type="Ext.grid.AbstractSelectionModel" readonly="True" />
            <attribute name="CellSelectionModel" type="Ext.grid.CellSelectionModel" readonly="True" />
            <attribute name="CheckboxSelectionModel" type="Ext.grid.CheckboxSelectionModel" readonly="True" />
            <attribute name="ColumnModel" type="Ext.grid.ColumnModel" readonly="True" />
            <attribute name="EditorGridPanel" type="Ext.grid.EditorGridPanel" readonly="True" />
            <attribute name="GridDragZone" type="Ext.grid.GridDragZone" readonly="True" />
            <attribute name="GridPanel" type="Ext.grid.GridPanel" readonly="True" />
            <attribute name="GridView" type="Ext.grid.GridView" readonly="True" />
            <attribute name="GroupingView" type="Ext.grid.GroupingView" readonly="True" />
            <attribute name="PropertyColumnModel" type="Ext.grid.PropertyColumnModel" readonly="True" />
            <attribute name="PropertyGrid" type="Ext.grid.PropertyGrid" readonly="True" />
            <attribute name="PropertyRecord" type="Ext.grid.PropertyRecord" readonly="True" />
            <attribute name="PropertyStore" type="Ext.grid.PropertyStore" readonly="True" />
            <attribute name="RowNumberer" type="Ext.grid.RowNumberer" readonly="True" />
            <attribute name="RowSelectionModel" type="Ext.grid.RowSelectionModel" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.layout" private="True" extends="Object">
          <attributes>
            <attribute name="AbsoluteLayout" type="Ext.layout.AbsoluteLayout" readonly="True" />
            <attribute name="Accordion" type="Ext.layout.Accordion" readonly="True" />
            <attribute name="AnchorLayout" type="Ext.layout.AnchorLayout" readonly="True" />
            <attribute name="BorderLayout" type="Ext.layout.BorderLayout" readonly="True" />
            <attribute name="CardLayout" type="Ext.layout.CardLayout" readonly="True" />
            <attribute name="ColumnLayout" type="Ext.layout.ColumnLayout" readonly="True" />
            <attribute name="ContainerLayout" type="Ext.layout.ContainerLayout" readonly="True" />
            <attribute name="FitLayout" type="Ext.layout.FitLayout" readonly="True" />
            <attribute name="FormLayout" type="Ext.layout.FormLayout" readonly="True" />
            <attribute name="TableLayout" type="Ext.layout.TableLayout" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.menu" private="True" extends="Object">
          <attributes>
            <attribute name="Adapter" type="Ext.menu.Adapter" readonly="True" />
            <attribute name="BaseItem" type="Ext.menu.BaseItem" readonly="True" />
            <attribute name="CheckItem" type="Ext.menu.CheckItem" readonly="True" />
            <attribute name="ColorItem" type="Ext.menu.ColorItem" readonly="True" />
            <attribute name="ColorMenu" type="Ext.menu.ColorMenu" readonly="True" />
            <attribute name="DateItem" type="Ext.menu.DateItem" readonly="True" />
            <attribute name="DateMenu" type="Ext.menu.DateMenu" readonly="True" />
            <attribute name="Item" type="Ext.menu.Item" readonly="True" />
            <attribute name="Menu" type="Ext.menu.Menu" readonly="True" />
            <attribute name="MenuMgr" type="Ext.menu.MenuMgr" readonly="True" />
            <attribute name="Separator" type="Ext.menu.Separator" readonly="True" />
            <attribute name="TextItem" type="Ext.menu.TextItem" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.sql" private="True" extends="Object">
          <attributes>
            <attribute name="Proxy" type="Ext.sql.Proxy" readonly="True" />
            <attribute name="SQLiteStore" type="Ext.sql.SQLiteStore" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.state" private="True" extends="Object">
          <attributes>
            <attribute name="CookieProvider" type="Ext.state.CookieProvider" readonly="True" />
            <attribute name="Manager" type="Ext.state.Manager" readonly="True" />
            <attribute name="Provider" type="Ext.state.Provider" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.tree" private="True" extends="Object">
          <attributes>
            <attribute name="AsyncTreeNode" type="Ext.tree.AsyncTreeNode" readonly="True" />
            <attribute name="DefaultSelectionModel" type="Ext.tree.DefaultSelectionModel" readonly="True" />
            <attribute name="MultiSelectionModel" type="Ext.tree.MultiSelectionModel" readonly="True" />
            <attribute name="RootTreeNodeUI" type="Ext.tree.RootTreeNodeUI" readonly="True" />
            <attribute name="TreeDragZone" type="Ext.tree.TreeDragZone" readonly="True" />
            <attribute name="TreeDropZone" type="Ext.tree.TreeDropZone" readonly="True" />
            <attribute name="TreeEditor" type="Ext.tree.TreeEditor" readonly="True" />
            <attribute name="TreeFilter" type="Ext.tree.TreeFilter" readonly="True" />
            <attribute name="TreeLoader" type="Ext.tree.TreeLoader" readonly="True" />
            <attribute name="TreeNode" type="Ext.tree.TreeNode" readonly="True" />
            <attribute name="TreeNodeUI" type="Ext.tree.TreeNodeUI" readonly="True" />
            <attribute name="TreePanel" type="Ext.tree.TreePanel" readonly="True" />
            <attribute name="TreeSorter" type="Ext.tree.TreeSorter" readonly="True" />
          </attributes>
        </interface>
        <interface name="Ext.util" private="True" extends="Object">
          <attributes>
            <attribute name="ClickRepeater" type="Ext.util.ClickRepeater" readonly="True" />
            <attribute name="CSS" type="Ext.util.CSS" readonly="True" />
            <attribute name="DelayedTask" type="Ext.util.DelayedTask" readonly="True" />
            <attribute name="Format" type="Ext.util.Format" readonly="True" />
            <attribute name="JSON" type="Ext.util.JSON" readonly="True" />
            <attribute name="MixedCollection" type="Ext.util.MixedCollection" readonly="True" />
            <attribute name="Observable" type="Ext.util.Observable" readonly="True" />
            <attribute name="TaskRunner" type="Ext.util.TaskRunner" readonly="True" />
            <attribute name="TextMetrics" type="Ext.util.TextMetrics" readonly="True" />
          </attributes>
        </interface>
      </interfaces>
    </module>
  </modules>
</javascript>
