<?xml version="1.0"?>
<!-- Copyright MPSOFTWARE --><javascript>
  <modules>
    <module name="YUI 3.3" disabled="False">
      <interfaces>
        <interface name="DD" extends="YAHOO.util.DragDrop" private="False">
          <description>A DragDrop implementation where the linked element follows the
mouse cursor during a drag.</description>
          <attributes>
            <attribute name="scroll" type="boolean" readonly="False">
              <description>When set to true, the utility automatically tries to scroll the browser
window when a drag and drop element is dragged near the viewport boundary.
Defaults to true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="alignElWithMouse" returns="void">
              <description>Sets the element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>the element to move</description>
                </param>
                <param name="iPageX" type="int" optional="False">
                  <description>the element to move</description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>the element to move</description>
                </param>
              </params>
            </function>
            <function name="autoOffset" returns="void">
              <description>Sets the pointer offset to the distance between the linked element's top
left corner and the location the element was clicked</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>the Y coordinate of the click</description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>the Y coordinate of the click</description>
                </param>
              </params>
            </function>
            <function name="autoScroll" returns="void">
              <description>Private property
Auto-scroll the window if the dragged object has been moved beyond the
visible window boundary.</description>
              <params>
                <param name="x" type="int" optional="False">
                  <description>the height of the drag element</description>
                </param>
                <param name="y" type="int" optional="False">
                  <description>the height of the drag element</description>
                </param>
                <param name="h" type="int" optional="False">
                  <description>the height of the drag element</description>
                </param>
                <param name="w" type="int" optional="False">
                  <description>the height of the drag element</description>
                </param>
              </params>
            </function>
            <function name="cachePosition" returns="void">
              <description>Saves the most recent position so that we can reset the constraints and
tick marks on-demand.  We need to know this so that we can calculate the
number of pixels the element is offset from its original position.</description>
              <params>
                <param name="iPageX" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDelta" returns="void">
              <description>Sets the pointer offset.  You can call this directly to force the
offset to be in a particular location (e.g., pass in 0,0 to set it
to the center of the object, as done in YAHOO.widget.Slider)</description>
              <params>
                <param name="iDeltaX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDeltaY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDragElPos" returns="void">
              <description>Sets the drag element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DD" returns="DD">
              <description>Class DD constructor
A DragDrop implementation where the linked element follows the
mouse cursor during a drag.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="DDProxy" extends="YAHOO.util.DD" private="False">
          <description>A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the "frame" element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description>
          <attributes>
            <attribute name="centerFrame" type="boolean" readonly="False">
              <description>By default the frame is positioned exactly where the drag element is, so
we use the cursor offset provided by YAHOO.util.DD.  Another option that works only if
you do not have constraints on the obj is to have the drag frame centered
around the cursor.  Set centerFrame to true for this effect.</description>
            </attribute>
            <attribute name="resizeFrame" type="boolean" readonly="False">
              <description>By default we resize the drag frame to be the same size as the element
we want to drag (this is to get the frame effect).  We can turn it off
if we want a different behavior.</description>
            </attribute>
            <attribute name="dragElId" type="String" readonly="False">
              <description>The default drag frame div id</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_resizeProxy" returns="void">
              <description>Private property
The proxy is automatically resized to the dimensions of the linked
element when a drag is initiated, unless resizeFrame is set to false</description>
            </function>
            <function name="createFrame" returns="void">
              <description>Creates the proxy element if it does not yet exist</description>
            </function>
            <function name="initFrame" returns="void">
              <description>Initialization for the drag frame element.  Must be called in the
constructor of all subclasses</description>
            </function>
            <function name="showFrame" returns="void">
              <description>Private property
Resizes the drag frame to the dimensions of the clicked object, positions
it over the object, and finally displays it</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DDProxy" returns="DDProxy">
              <description>Class DDProxy constructor
A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the "frame" element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="DDTarget" extends="YAHOO.util.DragDrop" private="False">
          <description>A DragDrop implementation that does not move, but can be a drop
target.  You would get the same result by simply omitting implementation
for the event callbacks, but this way we reduce the processing cost of the
event listener and the callbacks.</description>
          <functions>
            <function name="DDTarget" returns="DDTarget">
              <description>Class DDTarget constructor
A DragDrop implementation that does not move, but can be a drop
target.  You would get the same result by simply omitting implementation
for the event callbacks, but this way we reduce the processing cost of the
event listener and the callbacks.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>the id of the element that is a drop target</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="EventProvider" extends="Object" private="False">
          <description>EventProvider is designed to be used with YAHOO.augment to wrap
CustomEvents in an interface that allows events to be subscribed to
and fired by name.  This makes it possible for implementing code to
subscribe to an event that either has not been created yet, or will
not be created at all.</description>
          <attributes>
            <attribute name="__yui_events" type="Object[]" readonly="False">
              <description>Private property
Private storage of custom events</description>
            </attribute>
            <attribute name="__yui_subscribers" type="Object[]" readonly="False">
              <description>Private property
Private storage of custom event subscribers</description>
            </attribute>
          </attributes>
          <functions>
            <function name="createEvent" returns="CustomEvent">
              <description>Creates a new custom event of the specified type.  If a custom event
by that name already exists, it will not be re-created.  In either
case the custom event is returned.</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>the type, or name of the event</description>
                </param>
                <param name="p_config" type="object" optional="False">
                  <description>the type, or name of the event</description>
                </param>
              </params>
            </function>
            <function name="fireEvent" returns="boolean">
              <description>Fire a custom event by name.  The callback functions will be executed
from the scope specified when the event was created, and with the
following parameters:

The first argument fire() was executed with
The custom object (if any) that was passed into the subscribe()
method</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>an arbitrary set of parameters to pass to
the handler.</description>
                </param>
                <param name="arguments" type="Object*" optional="False">
                  <description>an arbitrary set of parameters to pass to
the handler.</description>
                </param>
              </params>
            </function>
            <function name="hasEvent" returns="void">
              <description>Returns true if the custom event of the provided type has been created
with createEvent.</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subscribe" returns="void">
              <description>Subscribe to a CustomEvent by event type</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>If true, the obj passed in becomes the
execution scope of the listener</description>
                </param>
                <param name="p_fn" type="function" optional="False">
                  <description>If true, the obj passed in becomes the
execution scope of the listener</description>
                </param>
                <param name="p_obj" type="Object" optional="False">
                  <description>If true, the obj passed in becomes the
execution scope of the listener</description>
                </param>
                <param name="overrideContext" type="boolean" optional="False">
                  <description>If true, the obj passed in becomes the
execution scope of the listener</description>
                </param>
              </params>
            </function>
            <function name="unsubscribe" returns="boolean">
              <description>Unsubscribes one or more listeners the from the specified event</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unsubscribeAll" returns="void">
              <description>Removes all listeners from the specified event.  If the event type
is not specified, all listeners from all hosted custom events will
be removed.</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="JSON" extends="Object" private="False">
          <description>Provides methods to parse JSON strings and convert objects to JSON strings.</description>
          <attributes>
            <attribute name="_BRACKETS" type="{RegExp}" readonly="False">
              <description>Private property
Third step in the validation.  Regex used to remove all open square
brackets following a colon, comma, or at the beginning of the string.</description>
            </attribute>
            <attribute name="_CHARS" type="{Object}" readonly="False">
              <description>Private property
Character substitution map for common escapes and special characters.</description>
            </attribute>
            <attribute name="_ESCAPES" type="{RegExp}" readonly="False">
              <description>Private property
First step in the validation.  Regex used to replace all escape
sequences (i.e. "\\", etc) with '@' characters (a non-JSON character).</description>
            </attribute>
            <attribute name="_INVALID" type="{RegExp}" readonly="False">
              <description>Private property
Final step in the validation.  Regex used to test the string left after
all previous replacements for invalid characters.</description>
            </attribute>
            <attribute name="_SPECIAL_CHARS" type="{RegExp}" readonly="False">
              <description>Private property
Regex used to replace special characters in strings for JSON
stringification.</description>
            </attribute>
            <attribute name="_UNICODE_EXCEPTIONS" type="{RegExp}" readonly="False">
              <description>Private property
Replace certain Unicode characters that JavaScript may handle incorrectly
during eval--either by deleting them or treating them as line
endings--with escape sequences.
IMPORTANT NOTE: This regex will be used to modify the input if a match is
found.</description>
            </attribute>
            <attribute name="_VALUES" type="{RegExp}" readonly="False">
              <description>Private property
Second step in the validation.  Regex used to replace all simple
values with ']' characters.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_char" returns="String">
              <description>Escapes a special character to a safe Unicode representation</description>
              <params>
                <param name="c" type="String" optional="False">
                  <description>single character to escape</description>
                </param>
              </params>
            </function>
            <function name="_isValid" returns="boolean">
              <description>Four step determination whether a string is valid JSON.  In three steps,
escape sequences, safe values, and properly placed open square brackets
are replaced with placeholders or removed.  Then in the final step, the
result of all these replacements is checked for invalid characters.</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_prepare" returns="String">
              <description>Private property
Replace certain Unicode characters that may be handled incorrectly by
some browser implementations.</description>
              <params>
                <param name="s" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_revive" returns="MIXED">
              <description>Private property
Traverses nested objects, applying a filter or reviver function to
each value.  The value returned from the function will replace the
original value in the key:value pair.  If the value returned is
undefined, the key will be omitted from the returned object.</description>
              <params>
                <param name="data" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
                <param name="reviver" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_string" returns="String">
              <description>Private property
Enclose escaped strings in quotes</description>
              <params>
                <param name="s" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_stringify" returns="String">
              <description>Worker function used by public stringify.</description>
              <params>
                <param name="h" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="depth" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Array|Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pstack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="dateToString" returns="String">
              <description>Serializes a Date instance as a UTC date string.  Used internally by
stringify.  Override this method if you need Dates serialized in a
different format.</description>
              <params>
                <param name="d" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isValid" returns="boolean">
              <description>Four step determination whether a string is valid JSON.  In three steps,
escape sequences, safe values, and properly placed open square brackets
are replaced with placeholders or removed.  Then in the final step, the
result of all these replacements is checked for invalid characters.</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parse" returns="MIXED">
              <description>Parse a JSON string, returning the native JavaScript representation.
Only minor modifications from http://www.json.org/json2.js.</description>
              <params>
                <param name="s" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="reviver" type="function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stringify" returns="string">
              <description>Converts an arbitrary value to a JSON string representation.
Cyclical object or array references are replaced with null.
If a whitelist is provided, only matching object keys will be included.
If a depth limit is provided, objects and arrays at that depth will
be stringified as empty.</description>
              <params>
                <param name="o" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Array|Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stringToDate" returns="Date">
              <description>Reconstitute Date instances from the default JSON UTC serialization.
Reference this from a reviver function to rebuild Dates during the
parse operation.</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="LogMsg" extends="Object" private="False">
          <description>The LogMsg class defines a single log message.</description>
          <attributes>
            <attribute name="category" type="String" readonly="False">
              <description>Log category.</description>
            </attribute>
            <attribute name="msg" type="String" readonly="False">
              <description>Log message.</description>
            </attribute>
            <attribute name="source" type="String" readonly="False">
              <description>Log source. The first word passed in as the source argument.</description>
            </attribute>
            <attribute name="sourceDetail" type="String" readonly="False">
              <description>Log source detail. The remainder of the string passed in as the source argument, not
including the first word (if any).</description>
            </attribute>
            <attribute name="time" type="Date" readonly="False">
              <description>Log timestamp.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="LogMsg" returns="LogMsg">
              <description>Class LogMsg constructor
The LogMsg class defines a single log message.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>Object literal of configuration params.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="LogReader" extends="Object" private="False">
          <description>The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.</description>
          <attributes>
            <attribute name="_btnClear" type="HTMLElement" readonly="False">
              <description>Private property
Clear button element.</description>
            </attribute>
            <attribute name="_btnCollapse" type="HTMLElement" readonly="False">
              <description>Private property
LogReader collapse button element.</description>
            </attribute>
            <attribute name="_btnPause" type="HTMLElement" readonly="False">
              <description>Private property
LogReader pause button element.</description>
            </attribute>
            <attribute name="_buffer" type="Object[]" readonly="False">
              <description>Private property
Buffer of log message objects for batch output.</description>
            </attribute>
            <attribute name="_categoryFilters" type="String[]" readonly="False">
              <description>Private property
Array of filters for log message categories.</description>
            </attribute>
            <attribute name="_consoleMsgCount" type="Number" readonly="False">
              <description>Private property
Number of log messages output to console.</description>
            </attribute>
            <attribute name="_elBtns" type="HTMLElement" readonly="False">
              <description>Private property
LogReader buttons container element.</description>
            </attribute>
            <attribute name="_elCategoryFilters" type="HTMLElement" readonly="False">
              <description>Private property
Container element for LogReader category filter checkboxes.</description>
            </attribute>
            <attribute name="_elCollapse" type="HTMLElement" readonly="False">
              <description>Private property
LogReader collapse element.</description>
            </attribute>
            <attribute name="_elConsole" type="HTMLElement" readonly="False">
              <description>Private property
LogReader console element.</description>
            </attribute>
            <attribute name="_elContainer" type="HTMLElement" readonly="False">
              <description>Private property
LogReader container element.</description>
            </attribute>
            <attribute name="_elDefaultContainer" type="HTMLElement" readonly="False">
              <description>Private property
A class member shared by all LogReaders if a container needs to be
created during instantiation. Will be null if a container element never needs to
be created on the fly, such as when the implementer passes in their own element.</description>
            </attribute>
            <attribute name="_elFt" type="HTMLElement" readonly="False">
              <description>Private property
LogReader footer element.</description>
            </attribute>
            <attribute name="_elHd" type="HTMLElement" readonly="False">
              <description>Private property
LogReader header element.</description>
            </attribute>
            <attribute name="_elSourceFilters" type="HTMLElement" readonly="False">
              <description>Private property
Container element for LogReader source filter checkboxes.</description>
            </attribute>
            <attribute name="_filterCheckboxes" type="Object" readonly="False">
              <description>Private property
Hash of filters and their related checkbox elements.</description>
            </attribute>
            <attribute name="_lastTime" type="Date" readonly="False">
              <description>Private property
Date of last output log message.</description>
            </attribute>
            <attribute name="_memberName" type="Number" readonly="False">
              <description>Private property
Internal class member to index multiple LogReader instances.</description>
            </attribute>
            <attribute name="_sName" type="String" readonly="False">
              <description>Private property
Name of LogReader instance.</description>
            </attribute>
            <attribute name="_sourceFilters" type="String[]" readonly="False">
              <description>Private property
Array of filters for log message sources.</description>
            </attribute>
            <attribute name="_timeout" type="Number" readonly="False">
              <description>Private property
Batched output timeout ID.</description>
            </attribute>
            <attribute name="_title" type="HTMLElement" readonly="False">
              <description>Private property
LogReader title header element.</description>
            </attribute>
            <attribute name="BASIC_TEMPLATE" type="object" readonly="False">
              <description>Template used for innerHTML of compact entry output.</description>
            </attribute>
            <attribute name="bottom" type="String" readonly="False">
              <description>Public member to access CSS bottom position of the LogReader container.</description>
            </attribute>
            <attribute name="draggable" type="Boolean" readonly="False">
              <description>Enables draggable LogReader if DragDrop Utility is present.</description>
            </attribute>
            <attribute name="ENTRY_TEMPLATE" type="{HTMLElement}" readonly="False">
              <description>Node template for the log entries</description>
            </attribute>
            <attribute name="entryFormat" type="String" readonly="False">
              <description>Custom output format for log messages.  Defaults to null, which falls
back to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE
and LogReader.BASIC_TEMPLATE.  Use bracketed place holders to mark where
message info should go.  Available place holder names include:

category
label
sourceAndDetail
message
localTime
elapsedTime
totalTime</description>
            </attribute>
            <attribute name="fontSize" type="String" readonly="False">
              <description>Public member to access CSS font size of the LogReader container.</description>
            </attribute>
            <attribute name="footerEnabled" type="Boolean" readonly="False">
              <description>Whether or not the footer UI is enabled for the LogReader.</description>
            </attribute>
            <attribute name="height" type="String" readonly="False">
              <description>Public member to access CSS height of the LogReader container.</description>
            </attribute>
            <attribute name="isCollapsed" type="Boolean" readonly="False">
              <description>True when LogReader is in a collapsed state, false otherwise.</description>
            </attribute>
            <attribute name="isPaused" type="Boolean" readonly="False">
              <description>True when LogReader is in a paused state, false otherwise.</description>
            </attribute>
            <attribute name="left" type="String" readonly="False">
              <description>Public member to access CSS left position of the LogReader container.</description>
            </attribute>
            <attribute name="logReaderEnabled" type="Boolean" readonly="False">
              <description>Whether or not LogReader is enabled to output log messages.</description>
            </attribute>
            <attribute name="newestOnTop" type="Boolean" readonly="False">
              <description>Whether or not newest message is printed on top.</description>
            </attribute>
            <attribute name="outputBuffer" type="Number" readonly="False">
              <description>Output timeout buffer in milliseconds.</description>
            </attribute>
            <attribute name="right" type="String" readonly="False">
              <description>Public member to access CSS right position of the LogReader container.</description>
            </attribute>
            <attribute name="thresholdMax" type="Number" readonly="False">
              <description>Maximum number of messages a LogReader console will display.</description>
            </attribute>
            <attribute name="thresholdMin" type="Number" readonly="False">
              <description>When a LogReader console reaches its thresholdMax, it will clear out messages
and print out the latest thresholdMin number of messages.</description>
            </attribute>
            <attribute name="top" type="String" readonly="False">
              <description>Public member to access CSS top position of the LogReader container.</description>
            </attribute>
            <attribute name="VERBOSE_TEMPLATE" type="object" readonly="False">
              <description>Template used for innerHTML of verbose entry output.</description>
            </attribute>
            <attribute name="verboseOutput" type="Boolean" readonly="False">
              <description>Whether or not output is verbose (more readable). Setting to true will make
output more compact (less readable).</description>
            </attribute>
            <attribute name="width" type="String" readonly="False">
              <description>Public member to access CSS width of the LogReader container.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createCategoryCheckbox" returns="void">
              <description>Private property
Creates the UI for a category filter in the LogReader footer element.</description>
              <params>
                <param name="sCategory" type="String" optional="False">
                  <description>Category name.</description>
                </param>
              </params>
            </function>
            <function name="_createSourceCheckbox" returns="void">
              <description>Private property
Creates a checkbox in the LogReader footer element to filter by source.</description>
              <params>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_filterLogs" returns="void">
              <description>Private property
Reprints all log messages in the stack through filters.</description>
            </function>
            <function name="_initCategories" returns="void">
              <description>Private property
Initializes category filters.</description>
            </function>
            <function name="_initConsoleEl" returns="void">
              <description>Private property
Initializes the console element.</description>
            </function>
            <function name="_initContainerEl" returns="void">
              <description>Private property
Initializes the primary container element.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initDragDrop" returns="void">
              <description>Private property
Initializes Drag and Drop on the header element.</description>
            </function>
            <function name="_initFooterEl" returns="void">
              <description>Private property
Initializes the footer element.</description>
            </function>
            <function name="_initHeaderEl" returns="void">
              <description>Private property
Initializes the header element.</description>
            </function>
            <function name="_initSources" returns="void">
              <description>Private property
Initializes source filters.</description>
            </function>
            <function name="_onCategoryCreate" returns="void">
              <description>Private property
Handles Logger's categoryCreateEvent.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aArgs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onCheckCategory" returns="void">
              <description>Private property
Handles check events on the category filter checkboxes.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onCheckSource" returns="void">
              <description>Private property
Handles check events on the category filter checkboxes.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClickClearBtn" returns="void">
              <description>Private property
Handles click events on the clear button.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClickCollapseBtn" returns="void">
              <description>Private property
Handles click events on the collapse button.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClickPauseBtn" returns="void">
              <description>Private property
Handles click events on the pause button.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onNewLog" returns="void">
              <description>Private property
Handles Logger's newLogEvent.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aArgs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onReset" returns="void">
              <description>Private property
Handles Logger's resetEvent.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aArgs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onSourceCreate" returns="void">
              <description>Private property
Handles Logger's sourceCreateEvent.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aArgs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_printBuffer" returns="void">
              <description>Private property
Sends buffer of log messages to output and clears buffer.</description>
            </function>
            <function name="_printToConsole" returns="void">
              <description>Private property
Cycles through an array of log messages, and outputs each one to the console
if its category has not been filtered out.</description>
              <params>
                <param name="aEntries" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearConsole" returns="void">
              <description>Does not delete any log messages, but clears all printed log messages from
the console. Log messages will be printed out again if user re-filters. The
static method YAHOO.widget.Logger.reset() should be called in order to
actually delete log messages.</description>
            </function>
            <function name="collapse" returns="void">
              <description>Collapses UI of LogReader. Logging functionality is not disrupted.</description>
            </function>
            <function name="expand" returns="void">
              <description>Expands UI of LogReader. Logging functionality is not disrupted.</description>
            </function>
            <function name="getCategories" returns="String[]">
              <description>Returns array of enabled categories.</description>
            </function>
            <function name="getCheckbox" returns="Array">
              <description>Returns related checkbox element for given filter (i.e., category or source).</description>
              <params>
                <param name="Category" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLastTime" returns="Date">
              <description>Gets timestamp of the last log.</description>
            </function>
            <function name="getSources" returns="Array">
              <description>Returns array of enabled sources.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides UI of LogReader. Logging functionality is not disrupted.</description>
            </function>
            <function name="hideCategory" returns="void">
              <description>Hides log messages associated with given category.</description>
              <params>
                <param name="Category" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideSource" returns="void">
              <description>Hides log messages associated with given source.</description>
              <params>
                <param name="Source" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="html2Text" returns="void">
              <description>Private property
Converts input chars "&lt;", "&gt;", and "&amp;" to HTML entities.</description>
              <params>
                <param name="sHtml" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="pause" returns="void">
              <description>Pauses output of log messages. While paused, log messages are not lost, but
get saved to a buffer and then output upon resume of LogReader.</description>
            </function>
            <function name="resume" returns="void">
              <description>Resumes output of log messages, including outputting any log messages that
have been saved to buffer while paused.</description>
            </function>
            <function name="setTitle" returns="void">
              <description>Updates title to given string.</description>
              <params>
                <param name="sTitle" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows UI of LogReader. Logging functionality is not disrupted.</description>
            </function>
            <function name="showCategory" returns="void">
              <description>Shows log messages associated with given category.</description>
              <params>
                <param name="Category" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showSource" returns="void">
              <description>Shows log messages associated with given source.</description>
              <params>
                <param name="Source" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the LogReader instance.</description>
            </function>
            <function name="LogReader" returns="LogReader">
              <description>Class LogReader constructor
The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elContainer" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="LogWriter" extends="Object" private="False">
          <description>The LogWriter class provides a mechanism to log messages through
YAHOO.widget.Logger from a named source.</description>
          <attributes>
            <attribute name="_source" type="String" readonly="False">
              <description>Private property
Source of the LogWriter instance.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getSource" returns="String">
              <description>Public accessor to get the source name.</description>
            </function>
            <function name="log" returns="void">
              <description>Logs a message attached to the source of the LogWriter.</description>
              <params>
                <param name="sMsg" type="String" optional="False">
                  <description>Category name.</description>
                </param>
                <param name="sCategory" type="String" optional="False">
                  <description>Category name.</description>
                </param>
              </params>
            </function>
            <function name="setSource" returns="void">
              <description>Public accessor to set the source name.</description>
              <params>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the LogWriter instance.</description>
            </function>
            <function name="LogWriter" returns="LogWriter">
              <description>Class LogWriter constructor
The LogWriter class provides a mechanism to log messages through
YAHOO.widget.Logger from a named source.</description>
              <params>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO" extends="Object" private="False">
          <description>The YAHOO global namespace object.  If YAHOO is already defined, the
existing YAHOO object will not be overwritten so that defined
namespaces are preserved.</description>
          <attributes>
            <attribute name="env" type="YAHOO.env" readonly="False">
              <description>YAHOO.env is used to keep track of what is known about the YUI library and
the browsing environment</description>
            </attribute>
            <attribute name="lang" type="YAHOO.lang" readonly="False">
              <description>Provides the language utilites and extensions used by the library</description>
            </attribute>
            <attribute name="tool" type="YAHOO.tool" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="util" type="YAHOO.util" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="widget" type="YAHOO.widget" readonly="False">
              <description>
              </description>
            </attribute>
          </attributes>
          <functions>
            <function name="augment" returns="void">
              <description>An alias for YAHOO.lang.augment</description>
              <params>
                <param name="r" type="Function" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
                <param name="s" type="Function" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
                <param name="arguments" type="String*" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
              </params>
            </function>
            <function name="extend" returns="void">
              <description>An alias for YAHOO.lang.extend</description>
              <params>
                <param name="subc" type="Function" optional="False">
                  <description>the object to inherit</description>
                </param>
                <param name="superc" type="Function" optional="False">
                  <description>the object to inherit</description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>the object to inherit</description>
                </param>
              </params>
            </function>
            <function name="log" returns="Boolean">
              <description>Uses YAHOO.widget.Logger to output a log message, if the widget is
available.</description>
              <params>
                <param name="msg" type="String" optional="False">
                  <description>The source of the the message (opt)</description>
                </param>
                <param name="cat" type="String" optional="False">
                  <description>The source of the the message (opt)</description>
                </param>
                <param name="src" type="String" optional="False">
                  <description>The source of the the message (opt)</description>
                </param>
              </params>
            </function>
            <function name="namespace" returns="Object">
              <description>Returns the namespace specified and creates it if it doesn't exist
YAHOO.namespace("property.package");
YAHOO.namespace("YAHOO.property.package");

Either of the above would create YAHOO.property, then
YAHOO.property.package
Be careful when naming packages. Reserved words may work in some browsers
and not others. For instance, the following will fail in Safari:
YAHOO.namespace("really.long.nested.namespace");

This fails because "long" is a future reserved word in ECMAScript
For implementation code that uses YUI, do not create your components
in the namespaces created by the library.  defined by YUI -- create
your own (YAHOO.util, YAHOO.widget, YAHOO.lang, YAHOO.env)</description>
              <params>
                <param name="arguments" type="String*" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Registers a module with the YAHOO object</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="mainClass" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.env" extends="Object" private="True">
          <description>YAHOO.env is used to keep track of what is known about the YUI library and
the browsing environment</description>
          <attributes>
            <attribute name="listeners" type="Function[]" readonly="False">
              <description>List of functions that should be executed every time a YUI module
reports itself.</description>
            </attribute>
            <attribute name="modules" type="Object[]" readonly="False">
              <description>Keeps the version info for all YUI modules that have reported themselves</description>
            </attribute>
            <attribute name="ua" type="YAHOO.env.ua" readonly="False">
              <description>Do not fork for a browser if it can be avoided.  Use feature detection when
you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version
number for the browser engine, 0 otherwise.  This value may or may not map
to the version number of the browser using the engine.  The value is
presented as a float so that it can easily be used for boolean evaluation
as well as for looking for a particular range of versions.  Because of this,
some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9
reports 1.8).</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getVersion" returns="Object">
              <description>Returns the version data for the specified module:

name:      The name of the module
version:   The version in use
build:     The build number in use
versions:  All versions that were registered
builds:    All builds that were registered.
mainClass: An object that was was stamped with the
current version and build. If
mainClass.VERSION != version or mainClass.BUILD != build,
multiple versions of pieces of the library have been
loaded, potentially causing issues.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>the name of the module (event, slider, etc)</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.env.ua" extends="Object" private="True">
          <description>Do not fork for a browser if it can be avoided.  Use feature detection when
you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version
number for the browser engine, 0 otherwise.  This value may or may not map
to the version number of the browser using the engine.  The value is
presented as a float so that it can easily be used for boolean evaluation
as well as for looking for a particular range of versions.  Because of this,
some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9
reports 1.8).</description>
          <attributes>
            <attribute name="air" type="float" readonly="False">
              <description>Adobe AIR version number or 0.  Only populated if webkit is detected.
Example: 1.0</description>
            </attribute>
            <attribute name="caja" type="float" readonly="False">
              <description>Google Caja version number or 0.</description>
            </attribute>
            <attribute name="gecko" type="float" readonly="False">
              <description>Gecko engine revision number.  Will evaluate to 1 if Gecko
is detected but the revision could not be found. Other browsers
will be 0.  Example: 1.8
Firefox 1.0.0.4: 1.7.8   &lt;-- Reports 1.7
Firefox 1.5.0.9: 1.8.0.9 &lt;-- Reports 1.8
Firefox 2.0.0.3: 1.8.1.3 &lt;-- Reports 1.8
Firefox 3 alpha: 1.9a4   &lt;-- Reports 1.9</description>
            </attribute>
            <attribute name="ie" type="float" readonly="False">
              <description>Internet Explorer version number or 0.  Example: 6</description>
            </attribute>
            <attribute name="mobile" type="string" readonly="False">
              <description>The mobile property will be set to a string containing any relevant
user agent information when a modern mobile browser is detected.
Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
devices with the WebKit-based browser, and Opera Mini.</description>
            </attribute>
            <attribute name="opera" type="float" readonly="False">
              <description>Opera version number or 0.  Example: 9.2</description>
            </attribute>
            <attribute name="webkit" type="float" readonly="False">
              <description>AppleWebKit version.  KHTML browsers that are not WebKit browsers
will evaluate to 1, other browsers 0.  Example: 418.9.1
Safari 1.3.2 (312.6): 312.8.1 &lt;-- Reports 312.8 -- currently the
latest available for Mac OSX 10.3.
Safari 2.0.2:         416     &lt;-- hasOwnProperty introduced
Safari 2.0.4:         418     &lt;-- preventDefault fixed
Safari 2.0.4 (419.3): 418.9.1 &lt;-- One version of Safari may run
different versions of webkit
Safari 2.0.4 (419.3): 419     &lt;-- Tiger installations that have been
updated, but not updated
to the latest patch.
Webkit 212 nightly:   522+    &lt;-- Safari 3.0 precursor (with native SVG
and many major issues fixed).
3.x yahoo.com, flickr:422     &lt;-- Safari 3.x hacks the user agent
string when hitting yahoo.com and
flickr.com.
Safari 3.0.4 (523.12):523.12  &lt;-- First Tiger release - automatic update
from 2.x via the 10.4.11 OS patch
Webkit nightly 1/2008:525+    &lt;-- Supports DOMContentLoaded event.
yahoo.com user agent hack removed.

http://developer.apple.com/internet/safari/uamatrix.html</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.lang" extends="Object" private="True">
          <description>Provides the language utilites and extensions used by the library</description>
          <attributes>
            <attribute name="_IEEnumFix" type="object" readonly="False">
              <description>Private property
IE will not enumerate native functions in a derived object even if the
function was overridden.  This is a workaround for specific functions
we care about on the Object prototype.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="augment" returns="void">
              <description>Same as YAHOO.lang.augmentObject, except it only applies prototype
properties.  This is an alias for augmentProto.</description>
              <params>
                <param name="r" type="Function" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
                <param name="s" type="Function" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
                <param name="arguments" type="String*|boolean" optional="False">
                  <description>the object to receive the augmentation</description>
                </param>
              </params>
            </function>
            <function name="augmentObject" returns="void">
              <description>Applies all properties in the supplier to the receiver if the
receiver does not have these properties yet.  Optionally, one or
more methods/properties can be specified (as additional
parameters).  This option will overwrite the property if receiver
has it already.  If true is passed as the third parameter, all
properties will be applied and _will_ overwrite properties in
the receiver.</description>
              <params>
                <param name="r" type="Function" optional="False">
                  <description>the object that supplies the properties to augment</description>
                </param>
                <param name="s" type="Function" optional="False">
                  <description>the object that supplies the properties to augment</description>
                </param>
                <param name="arguments" type="String*|boolean" optional="False">
                  <description>the object that supplies the properties to augment</description>
                </param>
              </params>
            </function>
            <function name="augmentProto" returns="void">
              <description>Same as YAHOO.lang.augmentObject, except it only applies prototype properties</description>
              <params>
                <param name="r" type="Function" optional="False">
                  <description>zero or more properties methods
to augment the receiver with.  If none specified, everything
in the supplier will be used unless it would overwrite an existing
property in the receiver.  if true is specified as the third
parameter, all properties will be applied and will overwrite an
existing property in the receiver</description>
                </param>
                <param name="s" type="Function" optional="False">
                  <description>zero or more properties methods
to augment the receiver with.  If none specified, everything
in the supplier will be used unless it would overwrite an existing
property in the receiver.  if true is specified as the third
parameter, all properties will be applied and will overwrite an
existing property in the receiver</description>
                </param>
                <param name="arguments" type="String*|boolean" optional="False">
                  <description>zero or more properties methods
to augment the receiver with.  If none specified, everything
in the supplier will be used unless it would overwrite an existing
property in the receiver.  if true is specified as the third
parameter, all properties will be applied and will overwrite an
existing property in the receiver</description>
                </param>
              </params>
            </function>
            <function name="dump" returns="String">
              <description>Returns a simple string representation of the object or array.
Other types of objects will be returned unprocessed.  Arrays
are expected to be indexed.  Use object notation for
associative arrays.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="extend" returns="void">
              <description>Utility to set up the prototype, constructor and superclass properties to
support an inheritance strategy that can chain constructors and methods.
Static members will not be inherited.</description>
              <params>
                <param name="subc" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="superc" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasOwnProperty" returns="boolean">
              <description>Determines whether or not the property was added
to the object instance.  Returns false if the property is not present
in the object, or was inherited from the prototype.
This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.
There is a discrepancy between YAHOO.lang.hasOwnProperty and
Object.prototype.hasOwnProperty when the property is a primitive added to
both the instance AND prototype with the same value:
var A = function() {};
A.prototype.foo = 'foo';
var a = new A();
a.foo = 'foo';
alert(a.hasOwnProperty('foo')); // true
alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prop" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isArray" returns="boolean">
              <description>Determines wheather or not the provided object is an array.</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isBoolean" returns="boolean">
              <description>Determines whether or not the provided object is a boolean</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isFunction" returns="boolean">
              <description>Determines whether or not the provided object is a function.
Note: Internet Explorer thinks certain functions are objects:
var obj = document.createElement("object");
YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE
var input = document.createElement("input"); // append to body
YAHOO.lang.isFunction(input.focus) // reports false in IE
You will have to implement additional tests if these functions
matter to you.</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNull" returns="boolean">
              <description>Determines whether or not the provided object is null</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNumber" returns="boolean">
              <description>Determines whether or not the provided object is a legal number</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isObject" returns="boolean">
              <description>Determines whether or not the provided object is of type object
or function</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isString" returns="boolean">
              <description>Determines whether or not the provided object is a string</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isUndefined" returns="boolean">
              <description>Determines whether or not the provided object is undefined</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isValue" returns="boolean">
              <description>A convenience method for detecting a legitimate non-null value.
Returns false for null/undefined/NaN, true for other values,
including 0/false/''</description>
              <params>
                <param name="o" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="later" returns="void">
              <description>Executes the supplied function in the context of the supplied
object 'when' milliseconds later.  Executes the function a
single time unless periodic is set to true.</description>
              <params>
                <param name="when" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function|String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="periodic" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="merge" returns="void">
              <description>Returns a new object containing all of the properties of
all the supplied objects.  The properties from later objects
will overwrite those in earlier objects.</description>
              <params>
                <param name="arguments" type="Object*" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="substitute" returns="String">
              <description>Does variable substitution on a string. It scans through the string
looking for expressions enclosed in { } braces. If an expression
is found, it is used a key on the object.  If there is a space in
the key, the first word is used for the key and the rest is provided
to an optional function to be used to programatically determine the
value (the extra information might be used for this decision). If
the value for the key in the object, or what is returned from the
function has a string value, number value, or object value, it is
substituted for the bracket expression and it repeats.  If this
value is an object, it uses the Object's toString() if this has
been overridden, otherwise it does a shallow dump of the key/value
pairs.</description>
              <params>
                <param name="s" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="f" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="trim" returns="string">
              <description>Returns a string without any leading or trailing whitespace.  If
the input is not a string, the input will be returned untouched.</description>
              <params>
                <param name="s" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool" extends="Object" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="Profiler" type="YAHOO.tool.Profiler" readonly="False">
              <description>Profiles functions in JavaScript.</description>
            </attribute>
            <attribute name="TestCase" type="YAHOO.tool.TestCase" readonly="False">
              <description>Test case containing various tests to run.</description>
            </attribute>
            <attribute name="TestLogger" type="YAHOO.tool.TestLogger" readonly="False">
              <description>Displays test execution progress and results, providing filters based on
different key events.</description>
            </attribute>
            <attribute name="TestManager" type="YAHOO.tool.TestManager" readonly="False">
              <description>Runs pages containing test suite definitions.</description>
            </attribute>
            <attribute name="TestNode" type="YAHOO.tool.TestNode" readonly="False">
              <description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
            </attribute>
            <attribute name="TestReporter" type="YAHOO.tool.TestReporter" readonly="False">
              <description>An object capable of sending test results to a server.</description>
            </attribute>
            <attribute name="TestRunner" type="YAHOO.tool.TestRunner" readonly="False">
              <description>Runs test suites and test cases, providing events to allowing for the
interpretation of test results.</description>
            </attribute>
            <attribute name="TestSuite" type="YAHOO.tool.TestSuite" readonly="False">
              <description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.tool.Profiler" extends="Object" private="True">
          <description>Profiles functions in JavaScript.</description>
          <attributes>
            <attribute name="_container" type="Object" readonly="False">
              <description>Private property
Container object on which to put the original unprofiled methods.</description>
            </attribute>
            <attribute name="_report" type="Object" readonly="False">
              <description>Private property
Call information for functions.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_saveData" returns="Void">
              <description>Private property
Called when a method ends execution. Marks the start and end time of the
method so it can calculate how long the function took to execute. Also
updates min/max/avg calculations for the function.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The name of the function to mark as stopped.</description>
                </param>
                <param name="duration" type="int" optional="False">
                  <description>The name of the function to mark as stopped.</description>
                </param>
              </params>
            </function>
            <function name="getAverage" returns="float">
              <description>Returns the average amount of time (in milliseconds) that the function
with the given name takes to execute.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCallCount" returns="int">
              <description>Returns the number of times that the given function has been called.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFullReport" returns="Object">
              <description>Returns an object containing profiling data for all of the functions
that were profiled. The object has an entry for each function and
returns all information (min, max, average, calls, etc.) for each
function.</description>
            </function>
            <function name="getFunctionReport" returns="Object">
              <description>Returns an object containing profiling data for a single function.
The object has an entry for min, max, avg, calls, and points).</description>
            </function>
            <function name="getMax" returns="float">
              <description>Returns the maximum amount of time (in milliseconds) that the function
with the given name takes to execute.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMin" returns="float">
              <description>Returns the minimum amount of time (in milliseconds) that the function
with the given name takes to execute.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerConstructor" returns="Void">
              <description>Sets up a constructor for profiling, including all properties and methods on the prototype.</description>
              <params>
                <param name="name" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="owner" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerFunction" returns="Void">
              <description>Sets up a function for profiling. It essentially overwrites the function with one
that has instrumentation data. This method also creates an entry for the function
in the profile report. The original function is stored on the _container object.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="owner" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerObject" returns="Void">
              <description>Sets up an object for profiling. It takes the object and looks for functions.
When a function is found, registerMethod() is called on it. If set to recrusive
mode, it will also setup objects found inside of this object for profiling,
using the same methodology.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="owner" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="recurse" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregisterFunction" returns="Void">
              <description>Removes a constructor function from profiling. Reverses the registerConstructor() method.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unregisterObject" returns="Void">
              <description>Unregisters an object for profiling. It takes the object and looks for functions.
When a function is found, unregisterMethod() is called on it. If set to recrusive
mode, it will also unregister objects found inside of this object,
using the same methodology.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="recurse" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestCase" extends="Object" private="True">
          <description>Test case containing various tests to run.</description>
          <functions>
            <function name="resume" returns="Void">
              <description>Resumes a paused test and runs the given function.</description>
              <params>
                <param name="segment" type="Function" optional="False">
                  <description>(Optional) The function to run.
If omitted, the test automatically passes.</description>
                </param>
              </params>
            </function>
            <function name="setUp" returns="Void">
              <description>Function to run before each test is executed.</description>
            </function>
            <function name="tearDown" returns="Void">
              <description>Function to run after each test is executed.</description>
            </function>
            <function name="wait" returns="Void">
              <description>Causes the test case to wait a specified amount of time and then
continue executing the given code.</description>
              <params>
                <param name="segment" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="delay" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TestCase" returns="YAHOO.tool.TestCase">
              <description>Class YAHOO.tool.TestCase constructor
Test case containing various tests to run.</description>
              <params>
                <param name="template" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
          <attributes>
            <attribute name="Wait" type="YAHOO.tool.TestCase.Wait" readonly="False">
              <description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.tool.TestCase.Wait" extends="Object" private="True">
          <description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
          <attributes>
            <attribute name="delay" type="int" readonly="False">
              <description>The delay before running the segment of code.</description>
            </attribute>
            <attribute name="segment" type="Function" readonly="False">
              <description>The segment of code to run when the wait is over.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Wait" returns="YAHOO.tool.TestCase.Wait">
              <description>Class YAHOO.tool.TestCase.Wait constructor
Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
              <params>
                <param name="segment" type="Function" optional="False">
                  <description>A function to run when the wait is over.</description>
                </param>
                <param name="delay" type="int" optional="False">
                  <description>A function to run when the wait is over.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestLogger" extends="Object" private="True">
          <description>Displays test execution progress and results, providing filters based on
different key events.</description>
          <functions>
            <function name="_handleTestRunnerEvent" returns="Void">
              <description>Private property
Handles all TestRunner events, outputting appropriate data into the console.</description>
              <params>
                <param name="data" type="Object" optional="False">
                  <description>The event data object.</description>
                </param>
              </params>
            </function>
            <function name="clearTestRunner" returns="Void">
              <description>Clears the reference to the TestRunner from previous operations. This
unsubscribes all events and removes the object reference.</description>
            </function>
            <function name="formatMsg" returns="String">
              <description>Private property
Formats message string to HTML for output to console.</description>
              <params>
                <param name="oLogMsg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setTestRunner" returns="Void">
              <description>Sets the source test runner that the logger should monitor.</description>
              <params>
                <param name="testRunner" type="YAHOO.tool.TestRunner" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TestLogger" returns="YAHOO.tool.TestLogger">
              <description>Class YAHOO.tool.TestLogger constructor
Displays test execution progress and results, providing filters based on
different key events.</description>
              <params>
                <param name="element" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestManager" extends="Object" private="True">
          <description>Runs pages containing test suite definitions.</description>
          <attributes>
            <attribute name="_curPage" type="String" readonly="False">
              <description>Private property
The URL of the page currently being executed.</description>
            </attribute>
            <attribute name="_frame" type="Window" readonly="False">
              <description>Private property
The frame used to load and run tests.</description>
            </attribute>
            <attribute name="_logger" type="YAHOO.tool.TestLogger" readonly="False">
              <description>Private property
The logger used to output results from the various tests.</description>
            </attribute>
            <attribute name="_pages" type="String[]" readonly="False">
              <description>Private property
Array of pages to load.</description>
            </attribute>
            <attribute name="_results" type="Object" readonly="False">
              <description>Private property
Aggregated results</description>
            </attribute>
            <attribute name="_timeoutId" type="int" readonly="False">
              <description>Private property
The timeout ID for the next iteration through the tests.</description>
            </attribute>
            <attribute name="TEST_MANAGER_BEGIN_EVENT" type="string" readonly="False">
              <description>Constant for the testmanagerbegin custom event</description>
            </attribute>
            <attribute name="TEST_MANAGER_COMPLETE_EVENT" type="string" readonly="False">
              <description>Constant for the testmanagercomplete custom event</description>
            </attribute>
            <attribute name="TEST_PAGE_BEGIN_EVENT" type="string" readonly="False">
              <description>Constant for the testpagebegin custom event</description>
            </attribute>
            <attribute name="TEST_PAGE_COMPLETE_EVENT" type="string" readonly="False">
              <description>Constant for the testpagecomplete custom event</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_handleTestRunnerComplete" returns="Void">
              <description>Private property
Handles TestRunner.COMPLETE_EVENT, storing the results and beginning
the loop again.</description>
              <params>
                <param name="data" type="Object" optional="False">
                  <description>Data about the event.</description>
                </param>
              </params>
            </function>
            <function name="_processResults" returns="Void">
              <description>Private property
Processes the results of a test page run, outputting log messages
for failed tests.</description>
            </function>
            <function name="_run" returns="Void">
              <description>Private property
Loads the next test page into the iframe.</description>
            </function>
            <function name="load" returns="Void">
              <description>Signals that a test page has been loaded. This should be called from
within the test page itself to notify the TestManager that it is ready.</description>
            </function>
            <function name="setPages" returns="Void">
              <description>Sets the pages to be loaded.</description>
              <params>
                <param name="pages" type="String[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="start" returns="Void">
              <description>Begins the process of running the tests.</description>
            </function>
            <function name="stop" returns="Void">
              <description>Stops the execution of tests.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestNode" extends="Object" private="True">
          <description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
          <attributes>
            <attribute name="firstChild" type="TestNode" readonly="False">
              <description>Pointer to this node's first child.</description>
            </attribute>
            <attribute name="lastChild" type="TestNode" readonly="False">
              <description>Pointer to this node's last child.</description>
            </attribute>
            <attribute name="next" type="TestNode" readonly="False">
              <description>Pointer to this node's next sibling.</description>
            </attribute>
            <attribute name="parent" type="TestNode" readonly="False">
              <description>Pointer to this node's parent.</description>
            </attribute>
            <attribute name="results" type="object" readonly="False">
              <description>Test results for this test object.</description>
            </attribute>
            <attribute name="testObject" type="Variant" readonly="False">
              <description>The TestSuite, TestCase, or test function represented by this node.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="appendChild" returns="Void">
              <description>Appends a new test object (TestSuite, TestCase, or test function name) as a child
of this node.</description>
              <params>
                <param name="testObject" type="Variant" optional="False">
                  <description>A TestSuite, TestCase, or the name of a test function.</description>
                </param>
              </params>
            </function>
            <function name="TestNode" returns="YAHOO.tool.TestNode">
              <description>Class YAHOO.tool.TestNode constructor
A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
              <params>
                <param name="testObject" type="Variant" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestReporter" extends="Object" private="True">
          <description>An object capable of sending test results to a server.</description>
          <attributes>
            <attribute name="_fields" type="Object" readonly="False">
              <description>Private property
Extra fields to submit with the request.</description>
            </attribute>
            <attribute name="_form" type="HTMLFormElement" readonly="False">
              <description>Private property
The form element used to submit the results.</description>
            </attribute>
            <attribute name="_iframe" type="HTMLIFrameElement" readonly="False">
              <description>Private property
Iframe used as a target for form submission.</description>
            </attribute>
            <attribute name="format" type="Function" readonly="False">
              <description>The formatting function to call when submitting the data.</description>
            </attribute>
            <attribute name="url" type="String" readonly="False">
              <description>The URL to submit the data to.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_convertToISOString" returns="String">
              <description>Private property
Convert a date into ISO format.
From Douglas Crockford's json2.js</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>The date to convert.</description>
                </param>
              </params>
            </function>
            <function name="addField" returns="Void">
              <description>Adds a field to the form that submits the results.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The value of the field.</description>
                </param>
                <param name="value" type="Variant" optional="False">
                  <description>The value of the field.</description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="Void">
              <description>Cleans up the memory associated with the TestReporter, removing DOM elements
that were created.</description>
            </function>
            <function name="report" returns="Void">
              <description>Sends the report to the server.</description>
              <params>
                <param name="results" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TestReporter" returns="YAHOO.tool.TestReporter">
              <description>Class YAHOO.tool.TestReporter constructor
An object capable of sending test results to a server.</description>
              <params>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="format" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestRunner" extends="Object" private="True">
          <description>Runs test suites and test cases, providing events to allowing for the
interpretation of test results.</description>
          <attributes>
            <attribute name="_cur" type="TestNode" readonly="False">
              <description>Private property
Pointer to the current node in the test tree.</description>
            </attribute>
            <attribute name="_root" type="TestNode" readonly="False">
              <description>Private property
Pointer to the root node in the test tree.</description>
            </attribute>
            <attribute name="masterSuite" type="YAHOO.tool.TestSuite" readonly="False">
              <description>Private property
Suite on which to attach all TestSuites and TestCases to be run.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addTestCaseToTestTree" returns="Void">
              <description>Private property
Adds a test case to the test tree as a child of the specified node.</description>
              <params>
                <param name="parentNode" type="TestNode" optional="False">
                  <description>The node to add the test case to as a child.</description>
                </param>
                <param name="testCase" type="YAHOO.tool.TestCase" optional="False">
                  <description>The node to add the test case to as a child.</description>
                </param>
              </params>
            </function>
            <function name="_addTestSuiteToTestTree" returns="Void">
              <description>Private property
Adds a test suite to the test tree as a child of the specified node.</description>
              <params>
                <param name="parentNode" type="TestNode" optional="False">
                  <description>The test suite to add.</description>
                </param>
                <param name="testSuite" type="YAHOO.tool.TestSuite" optional="False">
                  <description>The test suite to add.</description>
                </param>
              </params>
            </function>
            <function name="_buildTestTree" returns="Void">
              <description>Private property
Builds the test tree based on items in the master suite. The tree is a hierarchical
representation of the test suites, test cases, and test functions. The resulting tree
is stored in _root and the pointer _cur is set to the root initially.</description>
            </function>
            <function name="_handleTestObjectComplete" returns="Void">
              <description>Private property
Handles the completion of a test object's tests. Tallies test results
from one level up to the next.</description>
              <params>
                <param name="node" type="TestNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_next" returns="TestNode">
              <description>Private property
Retrieves the next node in the test tree.</description>
            </function>
            <function name="_run" returns="Object">
              <description>Private property
Runs a test case or test suite, returning the results.</description>
              <params>
                <param name="testObject" type="YAHOO.tool.TestCase|YAHOO.tool.TestSuite" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_runTest" returns="Void">
              <description>Private property
Runs a single test based on the data provided in the node.</description>
              <params>
                <param name="node" type="TestNode" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="add" returns="Void">
              <description>Adds a test suite or test case to the list of test objects to run.</description>
              <params>
                <param name="testObject" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clear" returns="Void">
              <description>Removes all test objects from the runner.</description>
            </function>
            <function name="fireEvent" returns="void">
              <description>Protected property
Fires events for the TestRunner. This overrides the default fireEvent()
method from EventProvider to add the type property to the data that is
passed through on each event call.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="data" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resume" returns="Void">
              <description>Resumes the TestRunner after wait() was called.</description>
              <params>
                <param name="segment" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="run" returns="Void">
              <description>Runs the test suite.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.tool.TestSuite" extends="Object" private="True">
          <description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
          <attributes>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the test suite.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="add" returns="Void">
              <description>Adds a test suite or test case to the test suite.</description>
              <params>
                <param name="testObject" type="YAHOO.tool.TestSuite||YAHOO.tool.TestCase" optional="False">
                  <description>The test suite or test case to add.</description>
                </param>
              </params>
            </function>
            <function name="JSON" returns="String">
              <description>Returns test results formatted as a JSON string. Requires JSON utility.</description>
              <params>
                <param name="result" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setUp" returns="Void">
              <description>Function to run before each test is executed.</description>
            </function>
            <function name="tearDown" returns="Void">
              <description>Function to run after each test is executed.</description>
            </function>
            <function name="XML" returns="String">
              <description>Returns test results formatted as an XML string.</description>
              <params>
                <param name="result" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TestSuite" returns="YAHOO.tool.TestSuite">
              <description>Class YAHOO.tool.TestSuite constructor
A test suite that can contain a collection of TestCase and TestSuite objects.</description>
              <params>
                <param name="data" type="String||Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util" extends="Object" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="Anim" type="YAHOO.util.Anim" readonly="False">
              <description>Base animation class that provides the interface for building animated effects.
Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</description>
            </attribute>
            <attribute name="AnimMgr" type="YAHOO.util.AnimMgr" readonly="False">
              <description>Handles animation queueing and threading.
Used by Anim and subclasses.</description>
            </attribute>
            <attribute name="ArrayAssert" type="YAHOO.util.ArrayAssert" readonly="False">
              <description>The ArrayAssert object provides functions to test JavaScript array objects
for a variety of cases.</description>
            </attribute>
            <attribute name="Assert" type="YAHOO.util.Assert" readonly="False">
              <description>The Assert object provides functions to test JavaScript values against
known and expected results. Whenever a comparison (assertion) fails,
an error is thrown.</description>
            </attribute>
            <attribute name="AssertionError" type="YAHOO.util.AssertionError" readonly="False">
              <description>AssertionError is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
            </attribute>
            <attribute name="Attribute" type="YAHOO.util.Attribute" readonly="False">
              <description>Provides Attribute configurations.</description>
            </attribute>
            <attribute name="AttributeProvider" type="YAHOO.util.AttributeProvider" readonly="False">
              <description>Provides and manages YAHOO.util.Attribute instances</description>
            </attribute>
            <attribute name="Bezier" type="YAHOO.util.Bezier" readonly="False">
              <description>Used to calculate Bezier splines for any number of control points.</description>
            </attribute>
            <attribute name="Chain" type="YAHOO.util.Chain" readonly="False">
              <description>Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:

method - {Function} REQUIRED the callback function.
scope - {Object} the scope from which to execute the callback.  Default is the global window scope.
argument - {Array} parameters to be passed to method as individual arguments.
timeout - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.
until - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.
iterations - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with until.</description>
            </attribute>
            <attribute name="Color" type="YAHOO.util.Color" readonly="False">
              <description>Provides color conversion and validation utils</description>
            </attribute>
            <attribute name="ColorAnim" type="YAHOO.util.ColorAnim" readonly="False">
              <description>Anim subclass for color transitions.
Usage: var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut); Color values can be specified with either 112233, #112233,
[255,255,255], or rgb(255,255,255)</description>
            </attribute>
            <attribute name="ColumnDD" type="YAHOO.util.ColumnDD" readonly="False">
              <description>ColumnDD subclasses DragDrop to support rearrangeable Columns.</description>
            </attribute>
            <attribute name="ColumnResizer" type="YAHOO.util.ColumnResizer" readonly="False">
              <description>ColumnResizer subclasses DragDrop to support resizeable Columns.</description>
            </attribute>
            <attribute name="ComparisonFailure" type="YAHOO.util.ComparisonFailure" readonly="False">
              <description>ComparisonFailure is subclass of AssertionError that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
            </attribute>
            <attribute name="Config" type="YAHOO.util.Config" readonly="False">
              <description>Config is a utility used within an Object to allow the implementer to
maintain a list of local configuration properties and listen for changes
to those properties dynamically using CustomEvent. The initial values are
also maintained so that the configuration can be reset at any given point
to its initial state.</description>
            </attribute>
            <attribute name="Connect" type="YAHOO.util.Connect" readonly="False">
              <description>The Connection Manager singleton provides methods for creating and managing
asynchronous transactions.</description>
            </attribute>
            <attribute name="Cookie" type="YAHOO.util.Cookie" readonly="False">
              <description>Cookie utility.</description>
            </attribute>
            <attribute name="CustomEvent" type="YAHOO.util.CustomEvent" readonly="False">
              <description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
            </attribute>
            <attribute name="DataSource" type="YAHOO.util.DataSource" readonly="False">
              <description>Factory class for creating a BaseDataSource subclass instance. The sublcass is
determined by oLiveData's type, unless the dataType config is explicitly passed in.</description>
            </attribute>
            <attribute name="DataSourceBase" type="YAHOO.util.DataSourceBase" readonly="False">
              <description>Base class for the YUI DataSource utility.</description>
            </attribute>
            <attribute name="Date" type="YAHOO.util.Date" readonly="False">
              <description>The static Date class provides helper functions to deal with data of type Date.</description>
            </attribute>
            <attribute name="DateAssert" type="YAHOO.util.DateAssert" readonly="False">
              <description>The DateAssert object provides functions to test JavaScript Date objects
for a variety of cases.</description>
            </attribute>
            <attribute name="DateLocale" type="YAHOO.util.DateLocale" readonly="False">
              <description>The DateLocale class is a container and base class for all
localised date strings used by YAHOO.util.Date. It is used
internally, but may be extended to provide new date localisations.
To create your own DateLocale, follow these steps:

Find an existing locale that matches closely with your needs
Use this as your base class.  Use YAHOO.util.DateLocale if nothing
matches.
Create your own class as an extension of the base class using
YAHOO.lang.merge, and add your own localisations where needed.

See the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']
classes which extend YAHOO.util.DateLocale['en'].
For example, to implement locales for French french and Canadian french,
we would do the following:

For French french, we have no existing similar locale, so use
YAHOO.util.DateLocale as the base, and extend it:
YAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {
a: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],
A: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],
b: ['jan', 'fĂ©v', 'mar', 'avr', 'mai', 'jun', 'jui', 'aoĂ»', 'sep', 'oct', 'nov', 'dĂ©c'],
B: ['janvier', 'fĂ©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'aoĂ»t', 'septembre', 'octobre', 'novembre', 'dĂ©cembre'],
c: '%a %d %b %Y %T %Z',
p: ['', ''],
P: ['', ''],
x: '%d.%m.%Y',
X: '%T'
});


For Canadian french, we start with French french and change the meaning of \%x:
YAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {
x: '%Y-%m-%d'
});



With that, you can use your new locales:
var d = new Date("2008/04/22");
YAHOO.util.Date.format(d, {format: "%A, %d %B == %x"}, "fr");

will return:
mardi, 22 avril == 22.04.2008

And
YAHOO.util.Date.format(d, {format: "%A, %d %B == %x"}, "fr-CA");

Will return:
mardi, 22 avril == 2008-04-22</description>
            </attribute>
            <attribute name="Dom" type="YAHOO.util.Dom" readonly="False">
              <description>Provides helper methods for DOM elements.</description>
            </attribute>
            <attribute name="DragDrop" type="YAHOO.util.DragDrop" readonly="False">
              <description>Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver, onDragOut.
Up to three html elements can be associated with a DragDrop instance:

linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.
handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.
drag element: this represents an the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link YAHOO.util.DDProxy}


This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the "group1" group:
dd = new YAHOO.util.DragDrop("div1", "group1");

Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
dd.onDragDrop = function(e, id) {
Â Â alert("dd was dropped on " + id);
}</description>
            </attribute>
            <attribute name="DragDropMgr" type="YAHOO.util.DragDropMgr" readonly="False">
              <description>DragDropMgr is a singleton that tracks the element interaction for
all DragDrop items in the window.  Generally, you will not call
this class directly, but it does have helper methods that could
be useful in your DragDrop implementations.</description>
            </attribute>
            <attribute name="Easing" type="YAHOO.util.Easing" readonly="False">
              <description>Singleton that determines how an animation proceeds from start to end.</description>
            </attribute>
            <attribute name="Element" type="YAHOO.util.Element" readonly="False">
              <description>Element provides an wrapper object to simplify adding
event listeners, using dom methods, and managing attributes.</description>
            </attribute>
            <attribute name="Event" type="YAHOO.util.Event" readonly="False">
              <description>The event utility provides functions to add and remove event listeners,
event cleansing.  It also tries to automatically remove listeners it
registers during the unload event.</description>
            </attribute>
            <attribute name="FunctionDataSource" type="YAHOO.util.FunctionDataSource" readonly="False">
              <description>FunctionDataSource class for JavaScript functions.</description>
            </attribute>
            <attribute name="Get" type="YAHOO.util.Get" readonly="False">
              <description>Fetches and inserts one or more script or link nodes into the document</description>
            </attribute>
            <attribute name="History" type="YAHOO.util.History" readonly="False">
              <description>The History class provides the ability to use the back/forward navigation
buttons in a DHTML application. It also allows a DHTML application to
be bookmarked in a specific state.</description>
            </attribute>
            <attribute name="ImageLoader" type="YAHOO.util.ImageLoader" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="KeyListener" type="YAHOO.util.KeyListener" readonly="False">
              <description>KeyListener is a utility that provides an easy interface for listening for
keydown/keyup events fired against DOM elements.</description>
            </attribute>
            <attribute name="LocalDataSource" type="YAHOO.util.LocalDataSource" readonly="False">
              <description>LocalDataSource class for in-memory data structs including JavaScript arrays,
JavaScript object literals (JSON), XML documents, and HTML tables.</description>
            </attribute>
            <attribute name="Motion" type="YAHOO.util.Motion" readonly="False">
              <description>Anim subclass for moving elements along a path defined by the "points"
member of "attributes".  All "points" are arrays with x, y coordinates.
Usage: var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
            </attribute>
            <attribute name="Number" type="YAHOO.util.Number" readonly="False">
              <description>The static Number class provides helper functions to deal with data of type
Number.</description>
            </attribute>
            <attribute name="ObjectAssert" type="YAHOO.util.ObjectAssert" readonly="False">
              <description>The ObjectAssert object provides functions to test JavaScript objects
for a variety of cases.</description>
            </attribute>
            <attribute name="Point" type="YAHOO.util.Point" readonly="False">
              <description>A point is a region that is special in that it represents a single point on
the grid.</description>
            </attribute>
            <attribute name="Region" type="YAHOO.util.Region" readonly="False">
              <description>A region is a representation of an object on a grid.  It is defined
by the top, right, bottom, left extents, so is rectangular by default.  If
other shapes are required, this class could be extended to support it.</description>
            </attribute>
            <attribute name="Resize" type="YAHOO.util.Resize" readonly="False">
              <description>Makes an element resizable</description>
            </attribute>
            <attribute name="ScriptNodeDataSource" type="YAHOO.util.ScriptNodeDataSource" readonly="False">
              <description>ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.</description>
            </attribute>
            <attribute name="Scroll" type="YAHOO.util.Scroll" readonly="False">
              <description>Anim subclass for scrolling elements to a position defined by the "scroll"
member of "attributes".  All "scroll" members are arrays with x, y scroll positions.
Usage: var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
            </attribute>
            <attribute name="Selector" type="YAHOO.util.Selector" readonly="False">
              <description>Provides helper methods for collecting and filtering DOM elements.</description>
            </attribute>
            <attribute name="ShouldError" type="YAHOO.util.ShouldError" readonly="False">
              <description>ShouldError is subclass of AssertionError that is thrown whenever
a test is expected to throw an error but doesn't.</description>
            </attribute>
            <attribute name="ShouldFail" type="YAHOO.util.ShouldFail" readonly="False">
              <description>ShouldFail is subclass of AssertionError that is thrown whenever
a test was expected to fail but did not.</description>
            </attribute>
            <attribute name="Sort" type="YAHOO.util.Sort" readonly="False">
              <description>Sort static utility to support Column sorting.</description>
            </attribute>
            <attribute name="StyleSheet" type="YAHOO.util.StyleSheet" readonly="False">
              <description>Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
var sheet = YAHOO.util.StyleSheet(..);
or
var sheet = new YAHOO.util.StyleSheet(..);
The first parameter passed can be any of the following things:

The desired string name to register a new empty sheet
The string name of an existing YAHOO.util.StyleSheet instance
The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance
The id of an existing &lt;link&gt; or &lt;style&gt; node
The node reference for an existing &lt;link&gt; or &lt;style&gt; node
A chunk of css text to create a new stylesheet from

If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.
The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.</description>
            </attribute>
            <attribute name="Subscriber" type="YAHOO.util.Subscriber" readonly="False">
              <description>Stores the subscriber information to be used when the event fires.</description>
            </attribute>
            <attribute name="UnexpectedError" type="YAHOO.util.UnexpectedError" readonly="False">
              <description>UnexpectedError is subclass of AssertionError that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
            </attribute>
            <attribute name="UnexpectedValue" type="YAHOO.util.UnexpectedValue" readonly="False">
              <description>UnexpectedValue is subclass of AssertionError that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
            </attribute>
            <attribute name="UserAction" type="YAHOO.util.UserAction" readonly="False">
              <description>The UserAction object provides functions that simulate events occurring in
the browser. Since these are simulated events, they do not behave exactly
as regular, user-initiated events do, but can be used to test simple
user interactions safely.</description>
            </attribute>
            <attribute name="XHRDataSource" type="YAHOO.util.XHRDataSource" readonly="False">
              <description>XHRDataSource class for accessing remote data via the YUI Connection Manager
Utility</description>
            </attribute>
            <attribute name="YUILoader" type="YAHOO.util.YUILoader" readonly="False">
              <description>YUILoader provides dynamic loading for YUI.</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.util.Anim" extends="Object" private="True">
          <description>Base animation class that provides the interface for building animated effects.
Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</description>
          <attributes>
            <attribute name="_onComplete" type="object" readonly="False">
              <description>Private property
Custom event that fires after onComplete</description>
            </attribute>
            <attribute name="_onStart" type="object" readonly="False">
              <description>Private property
Custom event that fires after onStart, useful in subclassing</description>
            </attribute>
            <attribute name="_onTween" type="object" readonly="False">
              <description>Private property
Custom event that fires after onTween</description>
            </attribute>
            <attribute name="actualFrames" type="Int" readonly="False">
              <description>Private property
The number of frames this animation was able to execute.</description>
            </attribute>
            <attribute name="attributes" type="Object" readonly="False">
              <description>The collection of attributes to be animated.
Each attribute must have at least a "to" or "by" defined in order to animate.
If "to" is supplied, the animation will end with the attribute at that value.
If "by" is supplied, the animation will end at that value plus its starting value.
If both are supplied, "to" is used, and "by" is ignored.
Optional additional member include "from" (the value the attribute should start animating from, defaults to current value), and "unit" (the units to apply to the values).</description>
            </attribute>
            <attribute name="currentFrame" type="Int" readonly="False">
              <description>The location of the current animation on the timeline.
In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.</description>
            </attribute>
            <attribute name="duration" type="Number" readonly="False">
              <description>The length of the animation.  Defaults to "1" (second).</description>
            </attribute>
            <attribute name="el" type="HTMLElement" readonly="False">
              <description>Private property
The element to be animated.</description>
            </attribute>
            <attribute name="isAnimated" type="Boolean" readonly="False">
              <description>Private property
Whether or not the animation is running.</description>
            </attribute>
            <attribute name="method" type="Function" readonly="False">
              <description>The method that will provide values to the attribute(s) during the animation.
Defaults to "YAHOO.util.Easing.easeNone".</description>
            </attribute>
            <attribute name="startTime" type="Date" readonly="False">
              <description>Private property
A Date object that is created when the animation begins.</description>
            </attribute>
            <attribute name="totalFrames" type="Int" readonly="False">
              <description>The total number of frames to be executed.
In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.</description>
            </attribute>
            <attribute name="useSeconds" type="Boolean" readonly="False">
              <description>Whether or not the duration should be treated as seconds.
Defaults to true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="animate" returns="void">
              <description>Starts the animation by registering it with the animation manager.</description>
            </function>
            <function name="doMethod" returns="Number">
              <description>Returns the value computed by the animation's "method".</description>
              <params>
                <param name="attr" type="String" optional="False">
                  <description>The value this attribute should start from for this animation.</description>
                </param>
                <param name="start" type="Number" optional="False">
                  <description>The value this attribute should start from for this animation.</description>
                </param>
                <param name="end" type="Number" optional="False">
                  <description>The value this attribute should start from for this animation.</description>
                </param>
              </params>
            </function>
            <function name="getAttribute" returns="Number">
              <description>Returns current value of the attribute.</description>
              <params>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDefaultUnit" returns="String">
              <description>Returns the unit to use when none is supplied.</description>
              <params>
                <param name="attr" type="attr" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Returns a reference to the animated element.</description>
            </function>
            <function name="getStartTime" returns="Date">
              <description>Returns the animation start time.</description>
            </function>
            <function name="init" returns="void">
              <description>Constructor for Anim instance.</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attributes" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="duration" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isAnimated" returns="Boolean">
              <description>Checks whether the element is currently animated.</description>
            </function>
            <function name="onTween" returns="void">
              <description>Private property
Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).</description>
            </function>
            <function name="setAttribute" returns="void">
              <description>Applies a value to an attribute.</description>
              <params>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="unit" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setEl" returns="void">
              <description>Changes the animated element</description>
            </function>
            <function name="setRuntimeAttribute" returns="void">
              <description>Private property
Sets the actual values to be used during the animation.  Should only be needed for subclass use.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stop" returns="void">
              <description>Stops the animation.  Normally called by AnimMgr when animation completes.</description>
              <params>
                <param name="finish" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Provides a readable name for the Anim instance.</description>
            </function>
            <function name="Anim" returns="YAHOO.util.Anim">
              <description>Class YAHOO.util.Anim constructor
Base animation class that provides the interface for building animated effects.
Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attributes" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="duration" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.AnimMgr" extends="Object" private="True">
          <description>Handles animation queueing and threading.
Used by Anim and subclasses.</description>
          <attributes>
            <attribute name="delay" type="Int" readonly="False">
              <description>Interval delay in milliseconds, defaults to fastest possible.</description>
            </attribute>
            <attribute name="fps" type="Int" readonly="False">
              <description>Base frame rate (frames per second).
Arbitrarily high for better x-browser calibration (slower browsers drop more frames).</description>
            </attribute>
            <attribute name="queue" type="Array" readonly="False">
              <description>Private property
The current queue of registered animation objects.</description>
            </attribute>
            <attribute name="thread" type="Int" readonly="False">
              <description>Private property
Reference to the animation Interval.</description>
            </attribute>
            <attribute name="tweenCount" type="Int" readonly="False">
              <description>Private property
The number of active animations.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="correctFrame" returns="void">
              <description>Private property
On the fly frame correction to keep animation on time.</description>
              <params>
                <param name="tween" type="Object" optional="False">
                  <description>The Anim instance being corrected.</description>
                </param>
              </params>
            </function>
            <function name="registerElement" returns="void">
              <description>Adds an animation instance to the animation queue.
All animation instances must be registered in order to animate.</description>
              <params>
                <param name="tween" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="run" returns="void">
              <description>Called per Interval to handle each animation frame.</description>
            </function>
            <function name="start" returns="void">
              <description>Starts the animation thread.
Only one thread can run at a time.</description>
            </function>
            <function name="stop" returns="void">
              <description>Stops the animation thread or a specific animation instance.</description>
              <params>
                <param name="tween" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unRegister" returns="void">
              <description>Private property
removes an animation instance from the animation queue.
All animation instances must be registered in order to animate.</description>
              <params>
                <param name="tween" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ArrayAssert" extends="Object" private="True">
          <description>The ArrayAssert object provides functions to test JavaScript array objects
for a variety of cases.</description>
          <functions>
            <function name="contains" returns="void">
              <description>Asserts that a value is present in an array. This uses the triple equals
sign so no type cohersion may occur.</description>
              <params>
                <param name="needle" type="Object" optional="False">
                  <description>The value that is expected in the array.</description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>The value that is expected in the array.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>The value that is expected in the array.</description>
                </param>
              </params>
            </function>
            <function name="containsItems" returns="void">
              <description>Asserts that a set of values are present in an array. This uses the triple equals
sign so no type cohersion may occur. For this assertion to pass, all values must
be found.</description>
              <params>
                <param name="needles" type="Object[]" optional="False">
                  <description>An array of values to check.</description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>An array of values to check.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>An array of values to check.</description>
                </param>
              </params>
            </function>
            <function name="containsMatch" returns="void">
              <description>Asserts that a value matching some condition is present in an array. This uses
a function to determine a match.</description>
              <params>
                <param name="matcher" type="Function" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
              </params>
            </function>
            <function name="doesNotContain" returns="void">
              <description>Asserts that a value is not present in an array. This uses the triple equals
sign so no type cohersion may occur.</description>
              <params>
                <param name="needle" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doesNotContainItems" returns="void">
              <description>Asserts that a set of values are not present in an array. This uses the triple equals
sign so no type cohersion may occur. For this assertion to pass, all values must
not be found.</description>
              <params>
                <param name="needles" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doesNotContainMatch" returns="void">
              <description>Asserts that no values matching a condition are present in an array. This uses
a function to determine a match.</description>
              <params>
                <param name="matcher" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="indexOf" returns="void">
              <description>Asserts that the given value is contained in an array at the specified index.
This uses the triple equals sign so no type cohersion will occur.</description>
              <params>
                <param name="needle" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isEmpty" returns="void">
              <description>Asserts that an array is empty.</description>
              <params>
                <param name="actual" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNotEmpty" returns="void">
              <description>Asserts that an array is not empty.</description>
              <params>
                <param name="actual" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="itemsAreEqual" returns="void">
              <description>Asserts that the values in an array are equal, and in the same position,
as values in another array. This uses the double equals sign
so type cohersion may occur. Note that the array objects themselves
need not be the same for this test to pass.</description>
              <params>
                <param name="expected" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="itemsAreEquivalent" returns="Void">
              <description>Asserts that the values in an array are equivalent, and in the same position,
as values in another array. This uses a function to determine if the values
are equivalent. Note that the array objects themselves
need not be the same for this test to pass.</description>
              <params>
                <param name="expected" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="comparator" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="itemsAreSame" returns="void">
              <description>Asserts that the values in an array are the same, and in the same position,
as values in another array. This uses the triple equals sign
so no type cohersion will occur. Note that the array objects themselves
need not be the same for this test to pass.</description>
              <params>
                <param name="expected" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lastIndexOf" returns="void">
              <description>Asserts that the given value is contained in an array at the specified index,
starting from the back of the array.
This uses the triple equals sign so no type cohersion will occur.</description>
              <params>
                <param name="needle" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="haystack" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Assert" extends="Object" private="True">
          <description>The Assert object provides functions to test JavaScript values against
known and expected results. Whenever a comparison (assertion) fails,
an error is thrown.</description>
          <functions>
            <function name="_formatMessage" returns="String">
              <description>Protected property
Formats a message so that it can contain the original assertion message
in addition to the custom message.</description>
              <params>
                <param name="customMessage" type="String" optional="False">
                  <description>The message passed in by the developer.</description>
                </param>
                <param name="defaultMessage" type="String" optional="False">
                  <description>The message passed in by the developer.</description>
                </param>
              </params>
            </function>
            <function name="areEqual" returns="void">
              <description>Asserts that a value is equal to another. This uses the double equals sign
so type cohersion may occur.</description>
              <params>
                <param name="expected" type="Object" optional="False">
                  <description>The actual value to test.</description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>The actual value to test.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>The actual value to test.</description>
                </param>
              </params>
            </function>
            <function name="areNotEqual" returns="void">
              <description>Asserts that a value is not equal to another. This uses the double equals sign
so type cohersion may occur.</description>
              <params>
                <param name="unexpected" type="Object" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>(Optional) The message to display if the assertion fails.</description>
                </param>
              </params>
            </function>
            <function name="areNotSame" returns="void">
              <description>Asserts that a value is not the same as another. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="unexpected" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="areSame" returns="void">
              <description>Asserts that a value is the same as another. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="expected" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fail" returns="void">
              <description>Forces an assertion error to occur.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isArray" returns="void">
              <description>Asserts that a value is an array.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isBoolean" returns="void">
              <description>Asserts that a value is a Boolean.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isFalse" returns="void">
              <description>Asserts that a value is false. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isFunction" returns="void">
              <description>Asserts that a value is a function.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isInstanceOf" returns="void">
              <description>Asserts that a value is an instance of a particular object. This may return
incorrect results when comparing objects from one frame to constructors in
another frame. For best results, don't use in a cross-frame manner.</description>
              <params>
                <param name="expected" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNaN" returns="void">
              <description>Asserts that a value is not a number.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNotNaN" returns="void">
              <description>Asserts that a value is not the special NaN value.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNotNull" returns="void">
              <description>Asserts that a value is not null. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNotUndefined" returns="void">
              <description>Asserts that a value is not undefined. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNull" returns="void">
              <description>Asserts that a value is null. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isNumber" returns="void">
              <description>Asserts that a value is a number.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isObject" returns="void">
              <description>Asserts that a value is an object.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isString" returns="void">
              <description>Asserts that a value is a string.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isTrue" returns="void">
              <description>Asserts that a value is true. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isTypeOf" returns="void">
              <description>Asserts that a value is of a particular type.</description>
              <params>
                <param name="expectedType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="actualValue" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isUndefined" returns="void">
              <description>Asserts that a value is undefined. This uses the triple equals sign
so no type cohersion may occur.</description>
              <params>
                <param name="actual" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.AssertionError" extends="Error" private="True">
          <description>AssertionError is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
          <attributes>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getMessage" returns="String">
              <description>Returns a fully formatted error for an assertion failure. This should
be overridden by all subclasses to provide specific information.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the error.</description>
            </function>
            <function name="valueOf" returns="String">
              <description>Returns a primitive value version of the error. Same as toString().</description>
            </function>
            <function name="AssertionError" returns="YAHOO.util.AssertionError">
              <description>Class YAHOO.util.AssertionError constructor
AssertionError is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Attribute" extends="Object" private="True">
          <description>Provides Attribute configurations.</description>
          <attributes>
            <attribute name="_initialConfig" type="Object" readonly="False">
              <description>Private property
The attribute's initial configuration.</description>
            </attribute>
            <attribute name="_written" type="Boolean" readonly="False">
              <description>Private property
Whether or not the attribute's value has been set.</description>
            </attribute>
            <attribute name="getter" type="Function" readonly="False">
              <description>The function to use when getting the attribute's value.
The getter receives the new value as the first arg and the attribute name as the 2nd
The return value of the getter will be used as the return from get().</description>
            </attribute>
            <attribute name="method" type="Function" readonly="False">
              <description>A function to call when setting the attribute's value.
The method receives the new value as the first arg and the attribute name as the 2nd</description>
            </attribute>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the attribute.</description>
            </attribute>
            <attribute name="owner" type="YAHOO.util.AttributeProvider" readonly="False">
              <description>The owner of the attribute.</description>
            </attribute>
            <attribute name="readOnly" type="Boolean" readonly="False">
              <description>Whether or not the attribute is read only.</description>
            </attribute>
            <attribute name="setter" type="Function" readonly="False">
              <description>The function to use when setting the attribute's value.
The setter receives the new value as the first arg and the attribute name as the 2nd
The return value of the setter replaces the value passed to set().</description>
            </attribute>
            <attribute name="validator" type="Function" readonly="False">
              <description>The validator to use when setting the attribute's value.</description>
            </attribute>
            <attribute name="value" type="String" readonly="False">
              <description>The value of the attribute.</description>
            </attribute>
            <attribute name="writeOnce" type="Boolean" readonly="False">
              <description>Whether or not the attribute can only be written once.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="configure" returns="void">
              <description>Allows for configuring the Attribute's properties.</description>
              <params>
                <param name="map" type="Object" optional="False">
                  <description>A key-value map of Attribute properties.</description>
                </param>
                <param name="init" type="Boolean" optional="False">
                  <description>A key-value map of Attribute properties.</description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="any">
              <description>Retrieves the current value of the attribute.</description>
            </function>
            <function name="refresh" returns="Boolean">
              <description>Resets the value to the current value.
Useful when values may have gotten out of sync with actual properties.</description>
            </function>
            <function name="resetConfig" returns="void">
              <description>Resets the attribute config to the initial config state.</description>
            </function>
            <function name="resetValue" returns="Boolean">
              <description>Resets the value to the initial config value.</description>
            </function>
            <function name="setValue" returns="Boolean">
              <description>Sets the value of the attribute and fires beforeChange and change events.</description>
              <params>
                <param name="value" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Attribute" returns="YAHOO.util.Attribute">
              <description>Class YAHOO.util.Attribute constructor
Provides Attribute configurations.</description>
              <params>
                <param name="hash" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="The" type="YAHOO.util.AttributeProvider" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.AttributeProvider" extends="Object" private="True">
          <description>Provides and manages YAHOO.util.Attribute instances</description>
          <attributes>
            <attribute name="_configs" type="{Object}" readonly="False">
              <description>Private property
A key-value map of Attribute configurations</description>
            </attribute>
          </attributes>
          <functions>
            <function name="configureAttribute" returns="void">
              <description>Sets or updates an Attribute instance's properties.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>The attribute's name.</description>
                </param>
                <param name="map" type="Object" optional="False">
                  <description>The attribute's name.</description>
                </param>
                <param name="init" type="Boolean" optional="False">
                  <description>The attribute's name.</description>
                </param>
              </params>
            </function>
            <function name="fireBeforeChangeEvent" returns="void">
              <description>Fires the attribute's beforeChange event.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>The event object to pass to handlers.</description>
                </param>
                <param name="e" type="Obj" optional="False">
                  <description>The event object to pass to handlers.</description>
                </param>
              </params>
            </function>
            <function name="fireChangeEvent" returns="void">
              <description>Fires the attribute's change event.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="e" type="Obj" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="Any">
              <description>Returns the current value of the attribute.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAttributeConfig" returns="object">
              <description>Private property
Returns the attribute's properties.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAttributeKeys" returns="Array">
              <description>Returns an array of attribute names.</description>
            </function>
            <function name="refresh" returns="void">
              <description>Sets the attribute's value to its current value.</description>
              <params>
                <param name="key" type="String | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Adds an Attribute to the AttributeProvider instance.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="map" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetAttributeConfig" returns="void">
              <description>Private property
Resets an attribute to its intial configuration.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetValue" returns="Boolean">
              <description>Resets the specified attribute's value to its initial value.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="Boolean">
              <description>Sets the value of a config.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAttributeConfig" returns="void">
              <description>Sets or updates an Attribute instance's properties.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="map" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="init" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAttributes" returns="void">
              <description>Sets multiple attribute values.</description>
              <params>
                <param name="map" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Bezier" extends="Object" private="True">
          <description>Used to calculate Bezier splines for any number of control points.</description>
          <functions>
            <function name="getPosition" returns="Array">
              <description>Get the current position of the animated element based on t.
Each point is an array of "x" and "y" values (0 = x, 1 = y)
At least 2 points are required (start and end).
First point is start. Last point is end.
Additional control points are optional.</description>
              <params>
                <param name="points" type="Array" optional="False">
                  <description>An array containing Bezier points</description>
                </param>
                <param name="t" type="Number" optional="False">
                  <description>An array containing Bezier points</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Chain" extends="Object" private="True">
          <description>Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:

method - {Function} REQUIRED the callback function.
scope - {Object} the scope from which to execute the callback.  Default is the global window scope.
argument - {Array} parameters to be passed to method as individual arguments.
timeout - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.
until - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.
iterations - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with until.</description>
          <attributes>
            <attribute name="id" type="{number}" readonly="False">
              <description>Private property
Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution.</description>
            </attribute>
            <attribute name="q" type="{Array}" readonly="False">
              <description>Private property
The callback queue</description>
            </attribute>
          </attributes>
          <functions>
            <function name="add" returns="Chain">
              <description>Add a callback to the end of the queue</description>
              <params>
                <param name="c" type="Function|Object" optional="False">
                  <description>the callback function ref or object literal</description>
                </param>
              </params>
            </function>
            <function name="pause" returns="Chain">
              <description>Pause the execution of the Chain after the current execution of the
current callback completes.  If called interstitially, clears the
timeout for the pending callback. Paused Chains can be restarted with
chain.run()</description>
            </function>
            <function name="run" returns="Chain">
              <description>Begin executing the chain, or resume execution from the last paused position.</description>
            </function>
            <function name="stop" returns="Chain">
              <description>Stop and clear the Chain's queue after the current execution of the
current callback completes.</description>
            </function>
            <function name="Chain" returns="YAHOO.util.Chain">
              <description>Class YAHOO.util.Chain constructor
Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:

method - {Function} REQUIRED the callback function.
scope - {Object} the scope from which to execute the callback.  Default is the global window scope.
argument - {Array} parameters to be passed to method as individual arguments.
timeout - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.
until - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.
iterations - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with until.</description>
              <params>
                <param name="callback*" type="Function|Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Color" extends="Object" private="True">
          <description>Provides color conversion and validation utils</description>
          <functions>
            <function name="dec2hex" returns="string">
              <description>Converts an int 0...255 to hex pair 00...FF</description>
              <params>
                <param name="n" type="int" optional="False">
                  <description>the number to convert</description>
                </param>
              </params>
            </function>
            <function name="hex2dec" returns="int">
              <description>Converts a hex pair 00...FF to an int 0...255</description>
              <params>
                <param name="str" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hex2rgb" returns="[int, int, int]">
              <description>Converts a hex string to rgb</description>
              <params>
                <param name="str" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hsv2rgb" returns="[int, int, int]">
              <description>Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]</description>
              <params>
                <param name="h" type="int|[int, float, float]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="s" type="float" optional="False">
                  <description>
                  </description>
                </param>
                <param name="v" type="float" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="real2dec" returns="int">
              <description>Converts 0-1 to 0-255</description>
              <params>
                <param name="n" type="float" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rgb2hex" returns="string">
              <description>Converts decimal rgb values into a hex string
255,255,255 -&gt; FFFFFF</description>
              <params>
                <param name="r" type="int|[int, int, int]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="g" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rgb2hsv" returns="[int, float, float]">
              <description>Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]</description>
              <params>
                <param name="r" type="int|[int, int, int]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="g" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="websafe" returns="[int, int, int]">
              <description>Returns the closest websafe color to the supplied rgb value.</description>
              <params>
                <param name="r" type="int|[int, int, int]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="g" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ColorAnim" extends="YAHOO.util.Anim" private="True">
          <description>Anim subclass for color transitions.
Usage: var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut); Color values can be specified with either 112233, #112233,
[255,255,255], or rgb(255,255,255)</description>
          <functions>
            <function name="parseColor" returns="Array">
              <description>Attempts to parse the given string and return a 3-tuple.</description>
              <params>
                <param name="s" type="String" optional="False">
                  <description>The string to parse.</description>
                </param>
              </params>
            </function>
            <function name="ColorAnim" returns="YAHOO.util.ColorAnim">
              <description>Class YAHOO.util.ColorAnim constructor
Anim subclass for color transitions.
Usage: var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut); Color values can be specified with either 112233, #112233,
[255,255,255], or rgb(255,255,255)</description>
              <params>
                <param name="el" type="HTMLElement | String" optional="False">
                  <description>The attribute(s) to be animated.
Each attribute is an object with at minimum a "to" or "by" member defined.
Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
All attribute names use camelCase.</description>
                </param>
                <param name="attributes" type="Object" optional="False">
                  <description>The attribute(s) to be animated.
Each attribute is an object with at minimum a "to" or "by" member defined.
Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
All attribute names use camelCase.</description>
                </param>
                <param name="duration" type="Number" optional="False">
                  <description>The attribute(s) to be animated.
Each attribute is an object with at minimum a "to" or "by" member defined.
Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
All attribute names use camelCase.</description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>The attribute(s) to be animated.
Each attribute is an object with at minimum a "to" or "by" member defined.
Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
All attribute names use camelCase.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ColumnDD" extends="YAHOO.util.DDProxy" private="True">
          <description>ColumnDD subclasses DragDrop to support rearrangeable Columns.</description>
          <functions>
            <function name="ColumnDD" returns="YAHOO.util.ColumnDD">
              <description>Class YAHOO.util.ColumnDD constructor
ColumnDD subclasses DragDrop to support rearrangeable Columns.</description>
              <params>
                <param name="oDataTable" type="YAHOO.widget.DataTable" optional="False">
                  <description>DataTable instance.</description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>DataTable instance.</description>
                </param>
                <param name="elTh" type="HTMLElement" optional="False">
                  <description>DataTable instance.</description>
                </param>
                <param name="elTarget" type="HTMLElement" optional="False">
                  <description>DataTable instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ColumnResizer" extends="YAHOO.util.DDProxy" private="True">
          <description>ColumnResizer subclasses DragDrop to support resizeable Columns.</description>
          <attributes>
            <attribute name="csColumnSetTemplate" type="object" readonly="False">
              <description>Tests ColumnSet APIs.</description>
            </attribute>
            <attribute name="DataTableAssert" type="object" readonly="False">
              <description>DataTable assertions.</description>
            </attribute>
            <attribute name="dtBaseTemplate" type="object" readonly="False">
              <description>Base DataTable test template. Sets up values for a DataTable instance.</description>
            </attribute>
            <attribute name="dtCellSelectionTemplate" type="object" readonly="False">
              <description>Tests cell selection APIs.</description>
            </attribute>
            <attribute name="dtCloneObjectTemplate" type="object" readonly="False">
              <description>Tests the _cloneObject API.</description>
            </attribute>
            <attribute name="dtConstructionTemplate" type="object" readonly="False">
              <description>Tests various construction use cases.</description>
            </attribute>
            <attribute name="dtDomAccessorsTemplate" type="object" readonly="False">
              <description>Tests DOM element getters.</description>
            </attribute>
            <attribute name="dtPaginationTemplate" type="object" readonly="False">
              <description>Tests pagination APIs.</description>
            </attribute>
            <attribute name="dtRowMutationTemplate" type="object" readonly="False">
              <description>Tests row mutation APIs.</description>
            </attribute>
            <attribute name="dtRowSelectionTemplate" type="object" readonly="False">
              <description>Tests row selection APIs.</description>
            </attribute>
            <attribute name="dtSortingTemplate" type="object" readonly="False">
              <description>Tests sorting APIs.</description>
            </attribute>
            <attribute name="editorOptions" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="rsRecordSetTemplate" type="object" readonly="False">
              <description>Tests RecordSet APIs.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="clickValidator" returns="void">
              <description>Private property
Custom clickValidator to ensure Column is not in hidden state.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDrag" returns="void">
              <description>Handles drag events on the Column resizer.</description>
              <params>
                <param name="e" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseDown" returns="void">
              <description>Handles mousedown events on the Column resizer.</description>
              <params>
                <param name="e" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseUp" returns="void">
              <description>Handles mouseup events on the Column resizer.</description>
              <params>
                <param name="e" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetResizerEl" returns="void">
              <description>Resets resizer element.</description>
            </function>
            <function name="startDrag" returns="void">
              <description>Handles start drag on the Column resizer.</description>
              <params>
                <param name="e" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="ColumnResizer" returns="YAHOO.util.ColumnResizer">
              <description>Class YAHOO.util.ColumnResizer constructor
ColumnResizer subclasses DragDrop to support resizeable Columns.</description>
              <params>
                <param name="oDataTable" type="YAHOO.widget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elTh" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elProxy" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ComparisonFailure" extends="YAHOO.util.AssertionError" private="True">
          <description>ComparisonFailure is subclass of AssertionError that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
          <attributes>
            <attribute name="actual" type="Object" readonly="False">
              <description>The actual value.</description>
            </attribute>
            <attribute name="expected" type="Object" readonly="False">
              <description>The expected value.</description>
            </attribute>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="toString" returns="String">
              <description>Returns a fully formatted error for an assertion failure. This message
provides information about the expected and actual values.</description>
            </function>
            <function name="ComparisonFailure" returns="YAHOO.util.ComparisonFailure">
              <description>Class YAHOO.util.ComparisonFailure constructor
ComparisonFailure is subclass of AssertionError that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>The expected value.</description>
                </param>
                <param name="expected" type="Object" optional="False">
                  <description>The expected value.</description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>The expected value.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Config" extends="Object" private="True">
          <description>Config is a utility used within an Object to allow the implementer to
maintain a list of local configuration properties and listen for changes
to those properties dynamically using CustomEvent. The initial values are
also maintained so that the configuration can be reset at any given point
to its initial state.</description>
          <attributes>
            <attribute name="config" type="Object" readonly="False">
              <description>Private property
Maintains the local collection of configuration property objects and
their specified values</description>
            </attribute>
            <attribute name="eventQueue" type="Object" readonly="False">
              <description>Private property
Maintains the local, normalized CustomEvent queue</description>
            </attribute>
            <attribute name="initialConfig" type="Object" readonly="False">
              <description>Private property
Maintains the local collection of configuration property objects as
they were initially applied.
This object is used when resetting a property.</description>
            </attribute>
            <attribute name="owner" type="Object" readonly="False">
              <description>Object reference to the owner of this Config Object</description>
            </attribute>
            <attribute name="queueInProgress" type="Boolean" readonly="False">
              <description>Boolean flag that specifies whether a queue is currently
being executed</description>
            </attribute>
            <attribute name="BOOLEAN_TYPE" type="object" readonly="False">
              <description>Private property
Constant representing the boolean type string</description>
            </attribute>
            <attribute name="CONFIG_CHANGED_EVENT" type="object" readonly="False">
              <description>Private property
Constant representing the CustomEvent type for the config changed event.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="addProperty" returns="void">
              <description>Adds a property to the Config Object's private config hash.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>The configuration property's name</description>
                </param>
                <param name="propertyObject" type="Object" optional="False">
                  <description>The configuration property's name</description>
                </param>
              </params>
            </function>
            <function name="applyConfig" returns="void">
              <description>Applies a key-value Object literal to the configuration, replacing
any existing values, and queueing the property events.
Although the values will be set, fireQueue() must be called for their
associated events to execute.</description>
              <params>
                <param name="userConfig" type="Object" optional="False">
                  <description>When set to true, the initialConfig will
be set to the userConfig passed in, so that calling a reset will
reset the properties to the passed values.</description>
                </param>
                <param name="init" type="Boolean" optional="False">
                  <description>When set to true, the initialConfig will
be set to the userConfig passed in, so that calling a reset will
reset the properties to the passed values.</description>
                </param>
              </params>
            </function>
            <function name="checkBoolean" returns="Boolean">
              <description>Validates that the value passed in is a Boolean.</description>
              <params>
                <param name="val" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="checkNumber" returns="Boolean">
              <description>Validates that the value passed in is a number.</description>
              <params>
                <param name="val" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Sets all properties to null, unsubscribes all listeners from each
property's change event and all listeners from the configChangedEvent.</description>
            </function>
            <function name="fireEvent" returns="void">
              <description>Private property
Fires a configuration property event using the specified value.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="Object" type="value" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fireQueue" returns="void">
              <description>Fires the normalized list of queued property change events</description>
            </function>
            <function name="getConfig" returns="Object">
              <description>Returns a key-value configuration map of the values currently set in
the Config Object.</description>
            </function>
            <function name="getProperty" returns="Object">
              <description>Returns the value of specified property.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>Initializes the configuration Object and all of its local members.</description>
              <params>
                <param name="owner" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="outputEventQueue" returns="String">
              <description>Returns a string representation of the Config object's current
CustomEvent queue</description>
            </function>
            <function name="queueProperty" returns="Boolean">
              <description>Sets the value of a property and queues its event to execute. If the
event is already scheduled to execute, it is
moved from its current position to the end of the queue.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refireEvent" returns="void">
              <description>Fires the event for a property using the property's current value.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refresh" returns="void">
              <description>Refires the events for all configuration properties using their
current values.</description>
            </function>
            <function name="resetProperty" returns="Boolean">
              <description>Resets the specified property's value to its initial value.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setProperty" returns="Boolean">
              <description>Sets the value of a property. If the silent property is passed as
true, the property's event will not be fired.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subscribeToConfigEvent" returns="Boolean">
              <description>Subscribes an external handler to the change event for any
given property.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="override" type="Boolean" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the Config object</description>
            </function>
            <function name="unsubscribeFromConfigEvent" returns="Boolean">
              <description>Unsubscribes an external handler from the change event for any
given property.</description>
              <params>
                <param name="key" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="alreadySubscribed" returns="Boolean">
              <description>Checks to determine if a particular function/Object pair are already
subscribed to the specified CustomEvent</description>
              <params>
                <param name="evt" type="YAHOO.util.CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Config" returns="YAHOO.util.Config">
              <description>Class YAHOO.util.Config constructor
Config is a utility used within an Object to allow the implementer to
maintain a list of local configuration properties and listen for changes
to those properties dynamically using CustomEvent. The initial values are
also maintained so that the configuration can be reset at any given point
to its initial state.</description>
              <params>
                <param name="owner" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Connect" extends="Object" private="True">
          <description>The Connection Manager singleton provides methods for creating and managing
asynchronous transactions.</description>
          <attributes>
            <attribute name="_customEvents" type="object" readonly="False">
              <description>Private property
A reference table that maps callback custom events members to its specific
event name.</description>
            </attribute>
            <attribute name="_default_form_header" type="boolean" readonly="False">
              <description>Private property
The default header used for transactions involving the
use of HTML forms.</description>
            </attribute>
            <attribute name="_default_post_header" type="boolean" readonly="False">
              <description>Private property
The default header used for POST transactions.</description>
            </attribute>
            <attribute name="_default_xhr_header" type="boolean" readonly="False">
              <description>Private property
The default header value for the label
"X-Requested-With".  This is sent with each
transaction, by default, to identify the
request as being made by YUI Connection Manager.</description>
            </attribute>
            <attribute name="_formNode" type="object" readonly="False">
              <description>Private property
Property modified by setForm() to set a reference to the HTML
form node if the desired action is file upload.</description>
            </attribute>
            <attribute name="_has_default_header" type="boolean" readonly="False">
              <description>Private property
Determines if custom, default headers
are set for each transaction.</description>
            </attribute>
            <attribute name="_has_http_headers" type="boolean" readonly="False">
              <description>Private property
Determines if HTTP headers are set.</description>
            </attribute>
            <attribute name="_hasSubmitListener" type="object" readonly="False">
              <description>Private property
Determines whether YAHOO.util.Event is available and returns true or false.
If true, an event listener is bound at the document level to trap click events that
resolve to a target type of "Submit".  This listener will enable setForm() to determine
the clicked "Submit" value in a multi-Submit button, HTML form.</description>
            </attribute>
            <attribute name="_http_header" type="object" readonly="False">
              <description>Private property
Object literal of HTTP header(s)</description>
            </attribute>
            <attribute name="_isFileUpload" type="boolean" readonly="False">
              <description>Private property
Property modified by setForm() to determine if a file(s)
upload is expected.</description>
            </attribute>
            <attribute name="_isFormSubmit" type="boolean" readonly="False">
              <description>Private property
Property modified by setForm() to determine if the data
should be submitted as an HTML form.</description>
            </attribute>
            <attribute name="_msxml_progid" type="array" readonly="False">
              <description>Private property
Array of MSFT ActiveX ids for XMLHttpRequest.</description>
            </attribute>
            <attribute name="_poll" type="object" readonly="False">
              <description>Private property
Collection of polling references to the polling mechanism in handleReadyState.</description>
            </attribute>
            <attribute name="_polling_interval" type="int" readonly="False">
              <description>Private property
The polling frequency, in milliseconds, for HandleReadyState.
when attempting to determine a transaction's XHR readyState.
The default is 50 milliseconds.</description>
            </attribute>
            <attribute name="_sFormData" type="string" readonly="False">
              <description>Private property
Property modified by setForm() to set the HTML form data
for each transaction.</description>
            </attribute>
            <attribute name="_submitElementValue" type="string" readonly="False">
              <description>Private property
Tracks the name-value pair of the "clicked" submit button if multiple submit
buttons are present in an HTML form; and, if YAHOO.util.Event is available.</description>
            </attribute>
            <attribute name="_timeOut" type="object" readonly="False">
              <description>Private property
Queue of timeout values for each transaction callback with a defined timeout value.</description>
            </attribute>
            <attribute name="_transaction_id" type="int" readonly="False">
              <description>Private property
A transaction counter that increments the transaction id for each transaction.</description>
            </attribute>
            <attribute name="_use_default_post_header" type="boolean" readonly="False">
              <description>Private property
Determines if a default header of
Content-Type of 'application/x-www-form-urlencoded'
will be added to any client HTTP headers sent for POST
transactions.</description>
            </attribute>
            <attribute name="_use_default_xhr_header" type="boolean" readonly="False">
              <description>Private property
Determines if a default header of
'X-Requested-With: XMLHttpRequest'
will be added to each transaction.</description>
            </attribute>
            <attribute name="abortEvent" type="CustomEvent" readonly="False">
              <description>Private property
Custom event that fires when a transaction is successfully aborted.</description>
            </attribute>
            <attribute name="completeEvent" type="CustomEvent" readonly="False">
              <description>Private property
Custom event that fires when a transaction response has completed.</description>
            </attribute>
            <attribute name="failureEvent" type="CustomEvent" readonly="False">
              <description>Private property
Custom event that fires when handleTransactionResponse() determines a
response in the HTTP 4xx/5xx range.</description>
            </attribute>
            <attribute name="startEvent" type="CustomEvent" readonly="False">
              <description>Private property
Custom event that fires at the start of a transaction</description>
            </attribute>
            <attribute name="successEvent" type="CustomEvent" readonly="False">
              <description>Private property
Custom event that fires when handleTransactionResponse() determines a
response in the HTTP 2xx range.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="abort" returns="boolean">
              <description>Method to terminate a transaction, if it has not reached readyState 4.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>The connection object returned by asyncRequest.</description>
                </param>
                <param name="callback" type="object" optional="False">
                  <description>The connection object returned by asyncRequest.</description>
                </param>
                <param name="isTimeout" type="string" optional="False">
                  <description>The connection object returned by asyncRequest.</description>
                </param>
              </params>
            </function>
            <function name="appendPostData" returns="array">
              <description>Private property
Parses the POST data and creates hidden form elements
for each key-value, and appends them to the HTML form object.</description>
              <params>
                <param name="postData" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="asyncRequest" returns="object">
              <description>Method for initiating an asynchronous request via the XHR object.</description>
              <params>
                <param name="method" type="string" optional="False">
                  <description>User-defined callback function or object</description>
                </param>
                <param name="uri" type="string" optional="False">
                  <description>User-defined callback function or object</description>
                </param>
                <param name="callback" type="callback" optional="False">
                  <description>User-defined callback function or object</description>
                </param>
                <param name="postData" type="string" optional="False">
                  <description>User-defined callback function or object</description>
                </param>
              </params>
            </function>
            <function name="createExceptionObject" returns="object">
              <description>Private property
If a transaction cannot be completed due to dropped or closed connections,
there may be not be enough information to build a full response object.
The failure callback will be fired and this specific condition can be identified
by a status property value of 0.
If an abort was successful, the status property will report a value of -1.</description>
              <params>
                <param name="tId" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callbackArg" type="callbackArg" optional="False">
                  <description>
                  </description>
                </param>
                <param name="isAbort" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createFrame" returns="void">
              <description>Private property
Creates an iframe to be used for form file uploads.  It is remove from the
document upon completion of the upload transaction.</description>
              <params>
                <param name="optional" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createResponseObject" returns="object">
              <description>Private property
This method evaluates the server response, creates and returns the results via
its properties.  Success and failure cases will differ in the response
object's property values.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callbackArg" type="callbackArg" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createXhrObject" returns="void">
              <description>Private property
Instantiates a XMLHttpRequest object and returns an object with two properties:
the XMLHttpRequest instance and the transaction id.</description>
              <params>
                <param name="transactionId" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getConnectionObject" returns="object">
              <description>Private property
This method is called by asyncRequest to create a
valid connection object for the transaction.  It also passes a
transaction id and increments the transaction id counter.</description>
            </function>
            <function name="handleReadyState" returns="void">
              <description>Private property
This method serves as a timer that polls the XHR object's readyState
property during a transaction, instead of binding a callback to the
onreadystatechange event.  Upon readyState 4, handleTransactionResponse
will process the response, and the timer will be cleared.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="callback" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleTransactionResponse" returns="void">
              <description>Private property
This method attempts to interpret the server response and
determine whether the transaction was successful, or if an error or
exception was encountered.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="isAbort" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initCustomEvents" returns="void">
              <description>Private property
This method creates and subscribes custom events,
specific to each transaction</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="callback" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initHeader" returns="void">
              <description>Method that initializes the custom HTTP headers for the each transaction.</description>
              <params>
                <param name="label" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="isDefault" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isCallInProgress" returns="boolean">
              <description>Determines if the transaction is still being processed.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="releaseObject" returns="void">
              <description>Private property
Dereference the XHR instance and the connection object after the transaction is completed.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetDefaultHeaders" returns="void">
              <description>Resets the default HTTP headers object</description>
            </function>
            <function name="resetFormState" returns="void">
              <description>Private property
Resets HTML form properties when an HTML form or HTML form
with file upload transaction is sent.</description>
            </function>
            <function name="setDefaultPostHeader" returns="void">
              <description>Member to override the default POST header.</description>
              <params>
                <param name="b" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDefaultXhrHeader" returns="void">
              <description>Member to override the default transaction header..</description>
              <params>
                <param name="b" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setForm" returns="string">
              <description>This method assembles the form label and value pairs and
constructs an encoded string.
asyncRequest() will automatically initialize the transaction with a
a HTTP header Content-Type of application/x-www-form-urlencoded.</description>
              <params>
                <param name="form" type="string || object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="optional" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="optional" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHeader" returns="void">
              <description>Private property
Accessor that sets the HTTP headers for each transaction.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPollingInterval" returns="void">
              <description>Member to modify the default polling interval.</description>
              <params>
                <param name="i" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setProgId" returns="void">
              <description>Member to add an ActiveX id to the existing xml_progid array.
In the event(unlikely) a new ActiveX id is introduced, it can be added
without internal code modifications.</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="uploadFile" returns="void">
              <description>Private property
Uploads HTML form, inclusive of files/attachments, using the
iframe created in createFrame to facilitate the transaction.</description>
              <params>
                <param name="id" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="uri" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="postData" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Cookie" extends="Object" private="True">
          <description>Cookie utility.</description>
          <functions>
            <function name="_createCookieHash" returns="String">
              <description>Private property
Formats a cookie value for an object containing multiple values.</description>
              <params>
                <param name="hash" type="Object" optional="False">
                  <description>An object of key-value pairs to create a string for.</description>
                </param>
              </params>
            </function>
            <function name="_createCookieString" returns="String">
              <description>Private property
Creates a cookie string that can be assigned into document.cookie.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>The value of the cookie.</description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>The value of the cookie.</description>
                </param>
                <param name="encodeValue" type="encodeValue" optional="False">
                  <description>The value of the cookie.</description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>The value of the cookie.</description>
                </param>
              </params>
            </function>
            <function name="_parseCookieHash" returns="Object">
              <description>Private property
Parses a cookie hash string into an object.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parseCookieString" returns="Object">
              <description>Private property
Parses a cookie string into an object representing all accessible cookies.</description>
              <params>
                <param name="text" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="decode" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="Variant">
              <description>Returns the cookie value for the given name.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="converter" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getHash" returns="Object">
              <description>Returns an object containing name-value pairs stored in the cookie with the given name.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSub" returns="Variant">
              <description>Returns the value of a subcookie.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="subName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="converter" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="String">
              <description>Removes a cookie from the machine by setting its expiration date to
sometime in the past.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeSub" returns="String">
              <description>Removes a sub cookie with a given name.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="subName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="set" returns="String">
              <description>Sets a cookie with a given name and value.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Variant" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSub" returns="String">
              <description>Sets a sub cookie with a given name to a particular value.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="subName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Variant" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSubs" returns="String">
              <description>Sets a cookie with a given name to contain a hash of name-value pairs.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.CustomEvent" extends="Object" private="True">
          <description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
          <attributes>
            <attribute name="lastError" type="Error" readonly="False">
              <description>In order to make it possible to execute the rest of the subscriber
stack when one thows an exception, the subscribers exceptions are
caught.  The most recent exception is stored in this property</description>
            </attribute>
            <attribute name="scope" type="object" readonly="False">
              <description>The context the the event will fire from by default.  Defaults to the window
obj</description>
            </attribute>
            <attribute name="signature" type="int" readonly="False">
              <description>Custom events support two styles of arguments provided to the event
subscribers.

YAHOO.util.CustomEvent.LIST:

param1: event name
param2: array of arguments sent to fire
param3:  a custom object supplied by the subscriber


YAHOO.util.CustomEvent.FLAT

param1: the first argument passed to fire.  If you need to
pass multiple parameters, use and array or object literal
param2:  a custom object supplied by the subscriber</description>
            </attribute>
            <attribute name="silent" type="boolean" readonly="False">
              <description>By default all custom events are logged in the debug build, set silent
to true to disable debug outpu for this event.</description>
            </attribute>
            <attribute name="subscribers" type="Subscriber[]" readonly="False">
              <description>The subscribers to this event</description>
            </attribute>
            <attribute name="type" type="string" readonly="False">
              <description>The type of event, returned to subscribers when the event fires</description>
            </attribute>
            <attribute name="FLAT" type="int" readonly="False">
              <description>Subscriber listener sigature constant.  The FLAT type returns two
parameters: the first argument passed to fire and the optional
custom object</description>
            </attribute>
            <attribute name="LIST" type="int" readonly="False">
              <description>Subscriber listener sigature constant.  The LIST type returns three
parameters: the event type, the array of args passed to fire, and
the optional custom object</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_delete" returns="void">
              <description>Private property</description>
            </function>
            <function name="fire" returns="boolean">
              <description>Notifies the subscribers.  The callback functions will be executed
from the context specified when the event was created, and with the
following parameters:

The type of event
All of the arguments fire() was executed with as an array
The custom object (if any) that was passed into the subscribe()
method</description>
              <params>
                <param name="arguments" type="Object*" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subscribe" returns="void">
              <description>Subscribes the caller to this event</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>If true, the obj passed in becomes
the execution context of the listener.
if an object, that object becomes the
the execution context.</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>If true, the obj passed in becomes
the execution context of the listener.
if an object, that object becomes the
the execution context.</description>
                </param>
                <param name="overrideContext" type="boolean|Object" optional="False">
                  <description>If true, the obj passed in becomes
the execution context of the listener.
if an object, that object becomes the
the execution context.</description>
                </param>
              </params>
            </function>
            <function name="toString" returns="void">
              <description>
              </description>
            </function>
            <function name="unsubscribe" returns="boolean">
              <description>Unsubscribes subscribers.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unsubscribeAll" returns="int">
              <description>Removes all listeners</description>
            </function>
            <function name="CustomEvent" returns="YAHOO.util.CustomEvent">
              <description>Class YAHOO.util.CustomEvent constructor
The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="context" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="signature" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DataSource" extends="Object" private="True">
          <description>Factory class for creating a BaseDataSource subclass instance. The sublcass is
determined by oLiveData's type, unless the dataType config is explicitly passed in.</description>
          <functions>
            <function name="DataSource" returns="YAHOO.util.DataSource">
              <description>Class YAHOO.util.DataSource constructor
Factory class for creating a BaseDataSource subclass instance. The sublcass is
determined by oLiveData's type, unless the dataType config is explicitly passed in.</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>Pointer to live data.</description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>Pointer to live data.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DataSourceBase" extends="Object" private="True">
          <description>Base class for the YUI DataSource utility.</description>
          <attributes>
            <attribute name="_aCache" type="Object[]" readonly="False">
              <description>Private property
Local cache of data result object literals indexed chronologically.</description>
            </attribute>
            <attribute name="_aIntervals" type="Array" readonly="False">
              <description>Private property
Array of polling interval IDs that have been enabled, needed to clear all intervals.</description>
            </attribute>
            <attribute name="_oQueue" type="Object" readonly="False">
              <description>Private property
Local queue of request connections, enabled if queue needs to be managed.</description>
            </attribute>
            <attribute name="_sName" type="String" readonly="False">
              <description>Private property
Name of DataSource instance.</description>
            </attribute>
            <attribute name="Parser" type="Object" readonly="False">
              <description>Data parsing functions.</description>
            </attribute>
            <attribute name="_nIndex" type="Number" readonly="False">
              <description>Private property
Internal class variable to index multiple DataSource instances.</description>
            </attribute>
            <attribute name="_nTransactionId" type="Number" readonly="False">
              <description>Private property
Internal class variable to assign unique transaction IDs.</description>
            </attribute>
            <attribute name="dataType" type="Number" readonly="False">
              <description>Where the live data is held:

TYPE_UNKNOWN
TYPE_LOCAL
TYPE_XHR
TYPE_SCRIPTNODE
TYPE_JSFUNCTION</description>
            </attribute>
            <attribute name="ERROR_DATAINVALID" type="String" readonly="False">
              <description>Error message for invalid dataresponses.</description>
            </attribute>
            <attribute name="ERROR_DATANULL" type="String" readonly="False">
              <description>Error message for null data responses.</description>
            </attribute>
            <attribute name="liveData" type="Object" readonly="False">
              <description>Pointer to live database.</description>
            </attribute>
            <attribute name="maxCacheEntries" type="Number" readonly="False">
              <description>Max size of the local cache.  Set to 0 to turn off caching.  Caching is
useful to reduce the number of server connections.  Recommended only for data
sources that return comprehensive results for queries or when stale data is
not an issue.</description>
            </attribute>
            <attribute name="parseJSONArgs" type="{MIXED|Array} If an Array, contents are used as individual arguments.&#xA;Otherwise, value is used as an additional argument." readonly="False">
              <description>Additional arguments passed to the JSON parse routine.  The JSON string
is the assumed first argument (where applicable).  This property is not
set by default, but the parse methods will use it if present.</description>
            </attribute>
            <attribute name="responseSchema" type="Object" readonly="False">
              <description>Response schema object literal takes a combination of the following properties:

resultsList Pointer to array of tabular data
resultNode Pointer to node name of row data (XML data only)
recordDelim Record delimiter (text data only)
fieldDelim Field delimiter (text data only)
fields Array of field names (aka keys), or array of object literals
such as: {key:"fieldname",parser:YAHOO.util.DataSourceBase.parseDate}
metaFields Object literal of keys to include in the oParsedResponse.meta collection
metaNode Name of the node under which to search for meta information in XML response data</description>
            </attribute>
            <attribute name="responseType" type="Number" readonly="False">
              <description>Format of response:

TYPE_UNKNOWN
TYPE_JSARRAY
TYPE_JSON
TYPE_XML
TYPE_TEXT
TYPE_HTMLTABLE</description>
            </attribute>
            <attribute name="TYPE_HTMLTABLE" type="Number" readonly="False">
              <description>Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements.</description>
            </attribute>
            <attribute name="TYPE_JSARRAY" type="Number" readonly="False">
              <description>Type is a JavaScript Array.</description>
            </attribute>
            <attribute name="TYPE_JSFUNCTION" type="Number" readonly="False">
              <description>Type is a JavaScript Function.</description>
            </attribute>
            <attribute name="TYPE_JSON" type="Number" readonly="False">
              <description>Type is JSON.</description>
            </attribute>
            <attribute name="TYPE_LOCAL" type="Number" readonly="False">
              <description>Type is local.</description>
            </attribute>
            <attribute name="TYPE_SCRIPTNODE" type="Number" readonly="False">
              <description>Type is hosted on a server via a dynamic script node.</description>
            </attribute>
            <attribute name="TYPE_TEXT" type="Number" readonly="False">
              <description>Type is plain text.</description>
            </attribute>
            <attribute name="TYPE_UNKNOWN" type="Number" readonly="False">
              <description>Type is unknown.</description>
            </attribute>
            <attribute name="TYPE_XHR" type="Number" readonly="False">
              <description>Type is hosted on a server via an XHR connection.</description>
            </attribute>
            <attribute name="TYPE_XML" type="Number" readonly="False">
              <description>Type is XML.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="addToCache" returns="void">
              <description>Adds a new item to the cache. If cache is full, evicts the stalest item
before adding the new item.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>Request object.</description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>Request object.</description>
                </param>
              </params>
            </function>
            <function name="clearAllIntervals" returns="void">
              <description>Disables all known polling intervals.</description>
            </function>
            <function name="clearInterval" returns="void">
              <description>Disables polling mechanism associated with the given interval ID.</description>
              <params>
                <param name="nId" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseDate" returns="Date">
              <description>Converts data to type Date.</description>
              <params>
                <param name="oData" type="Date | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseNumber" returns="Number">
              <description>Converts data to type Number.</description>
              <params>
                <param name="oData" type="String | Number | Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseString" returns="String">
              <description>Converts data to type String.</description>
              <params>
                <param name="oData" type="String | Number | Boolean | Date | Array | Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeCallback" returns="Object">
              <description>Overridable method gives implementers access to the original full response and
the parsed response (parsed against the given schema) before the data
is added to the cache (if applicable) and then sent back to callback function.
This is your chance to access the raw response and/or populate the parsed
response with any custom data.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParsedResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeParseData" returns="Object">
              <description>Overridable method gives implementers access to the original full response
before the data gets parsed. Implementers should take care not to return an
unparsable or otherwise invalid response.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="flushCache" returns="void">
              <description>Flushes cache.</description>
            </function>
            <function name="getCachedResponse" returns="Object">
              <description>Overridable method passes request to cache and returns cached response if any,
refreshing the hit in the cache as the newest item. Returns null if there is
no cache hit.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleResponse" returns="void">
              <description>Receives raw data response and type converts to XML, JSON, etc as necessary.
Forwards oFullResponse to appropriate parsing function to get turned into
oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to
the cache when appropriate before calling issueCallback().
The oParsedResponse object literal has the following properties:

tId {Number} Unique transaction ID
results {Array} Array of parsed data results
meta {Object} Object literal of meta values
error {Boolean} (optional) True if there was an error
cached {Boolean} (optional) True if response was cached</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRawResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tId" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isCacheHit" returns="Boolean">
              <description>Default overridable method matches given request to given cached request.
Returns true if is a hit, returns false otherwise.  Implementers should
override this method to customize the cache-matching algorithm.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCachedRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="issueCallback" returns="void">
              <description>Executes a configured callback.  For object literal callbacks, the third
param determines whether to execute the success handler or failure handler.</description>
              <params>
                <param name="callback" type="Function|Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="params" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="error" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="makeConnection" returns="Number">
              <description>Overridable default method generates a unique transaction ID and passes
the live data reference directly to the  handleResponse function. This
method should be implemented by subclasses to achieve more complex behavior
or to access remote data.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseArrayData" returns="Object">
              <description>Overridable method parses Array data into a response object.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseData" returns="Object} Parsed response object with the following properties:&#xA;- results {Array} Array of parsed data results&#xA;- meta {Object} Object literal of meta values&#xA;- error {Boolean">
              <description>Overridable method parses data of generic RESPONSE_TYPE into a response object.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseHTMLTableData" returns="Object">
              <description>Overridable method parses an HTML TABLE element reference into a response object.
Data is parsed out of TR elements from all TBODY elements.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseJSONData" returns="Object">
              <description>Overridable method parses JSON data into a response object.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseTextData" returns="Object">
              <description>Overridable method parses plain text data into a response object.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseXMLData" returns="Object">
              <description>Overridable method parses XML data into a response object.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseXMLResult" returns="Object">
              <description>Overridable method parses XML data for one result into an object literal.</description>
              <params>
                <param name="result" type="XML" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sendRequest" returns="Number">
              <description>First looks for cached response, then sends request to live data. The
following arguments are passed to the callback function:

oRequest
The same value that was passed in as the first argument to sendRequest.
oParsedResponse
An object literal containing the following properties:

tId
Unique transaction ID number.
results
Schema-parsed data results.
error
True in cases of data error.
cached
True when response is returned from DataSource cache.
meta
Schema-parsed meta data.

oPayload
The same value as was passed in as argument in the oCallback object literal.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setInterval" returns="Number">
              <description>Sets up a polling mechanism to send requests at set intervals and forward
responses to given callback.</description>
              <params>
                <param name="nMsec" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRequest" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the DataSource instance.</description>
            </function>
            <function name="DataSourceBase" returns="YAHOO.util.DataSourceBase">
              <description>Class YAHOO.util.DataSourceBase constructor
Base class for the YUI DataSource utility.</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Date" extends="Object" private="True">
          <description>The static Date class provides helper functions to deal with data of type Date.</description>
          <functions>
            <function name="format" returns="String">
              <description>Takes a native JavaScript Date and formats to string for display to user.</description>
              <params>
                <param name="oDate" type="Date" optional="False">
                  <description>Date.</description>
                </param>
                <param name="oConfig" type="Object" optional="False">
                  <description>Date.</description>
                </param>
                <param name="sLocale" type="String" optional="False">
                  <description>Date.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DateAssert" extends="Object" private="True">
          <description>The DateAssert object provides functions to test JavaScript Date objects
for a variety of cases.</description>
          <functions>
            <function name="datesAreEqual" returns="void">
              <description>Asserts that a date's month, day, and year are equal to another date's.</description>
              <params>
                <param name="expected" type="Date" optional="False">
                  <description>The expected date.</description>
                </param>
                <param name="actual" type="Date" optional="False">
                  <description>The expected date.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>The expected date.</description>
                </param>
              </params>
            </function>
            <function name="timesAreEqual" returns="void">
              <description>Asserts that a date's hour, minutes, and seconds are equal to another date's.</description>
              <params>
                <param name="expected" type="Date" optional="False">
                  <description>The actual date to test.</description>
                </param>
                <param name="actual" type="Date" optional="False">
                  <description>The actual date to test.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>The actual date to test.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DateLocale" extends="Object" private="True">
          <description>The DateLocale class is a container and base class for all
localised date strings used by YAHOO.util.Date. It is used
internally, but may be extended to provide new date localisations.
To create your own DateLocale, follow these steps:

Find an existing locale that matches closely with your needs
Use this as your base class.  Use YAHOO.util.DateLocale if nothing
matches.
Create your own class as an extension of the base class using
YAHOO.lang.merge, and add your own localisations where needed.

See the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']
classes which extend YAHOO.util.DateLocale['en'].
For example, to implement locales for French french and Canadian french,
we would do the following:

For French french, we have no existing similar locale, so use
YAHOO.util.DateLocale as the base, and extend it:
YAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {
a: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],
A: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],
b: ['jan', 'fĂ©v', 'mar', 'avr', 'mai', 'jun', 'jui', 'aoĂ»', 'sep', 'oct', 'nov', 'dĂ©c'],
B: ['janvier', 'fĂ©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'aoĂ»t', 'septembre', 'octobre', 'novembre', 'dĂ©cembre'],
c: '%a %d %b %Y %T %Z',
p: ['', ''],
P: ['', ''],
x: '%d.%m.%Y',
X: '%T'
});


For Canadian french, we start with French french and change the meaning of \%x:
YAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {
x: '%Y-%m-%d'
});



With that, you can use your new locales:
var d = new Date("2008/04/22");
YAHOO.util.Date.format(d, {format: "%A, %d %B == %x"}, "fr");

will return:
mardi, 22 avril == 22.04.2008

And
YAHOO.util.Date.format(d, {format: "%A, %d %B == %x"}, "fr-CA");

Will return:
mardi, 22 avril == 2008-04-22</description>
        </interface>
        <interface name="YAHOO.util.Dom" extends="Object" private="True">
          <description>Provides helper methods for DOM elements.</description>
          <functions>
            <function name="addClass" returns="Boolean | Array">
              <description>Adds a class name to a given element or collection of elements.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>The element or collection to add the class to</description>
                </param>
                <param name="className" type="String" optional="False">
                  <description>The element or collection to add the class to</description>
                </param>
              </params>
            </function>
            <function name="batch" returns="Any | Array">
              <description>Runs the supplied method against each item in the Collection/Array.
The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>The method to apply to the element(s)</description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>The method to apply to the element(s)</description>
                </param>
                <param name="o" type="Any" optional="False">
                  <description>The method to apply to the element(s)</description>
                </param>
                <param name="overrides" type="Boolean" optional="False">
                  <description>The method to apply to the element(s)</description>
                </param>
              </params>
            </function>
            <function name="generateId" returns="String | Array">
              <description>Returns an ID and applies it to the element "el", if provided.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prefix" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="get" returns="HTMLElement | Array">
              <description>Returns an HTMLElement reference.</description>
              <params>
                <param name="el" type="String | HTMLElement |Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAncestorBy" returns="Object">
              <description>Returns the nearest ancestor that passes the test applied by supplied boolean method.
For performance reasons, IDs are not accepted and argument validation omitted.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAncestorByClassName" returns="Object">
              <description>Returns the nearest ancestor with the given className.</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAncestorByTagName" returns="Object">
              <description>Returns the nearest ancestor with the given tagName.</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tagName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAttibute" returns="String">
              <description>Provides a normalized attribute interface.</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getChildren" returns="Array">
              <description>Returns an array of HTMLElement childNodes.</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getChildrenBy" returns="Array">
              <description>Returns an array of HTMLElement childNodes that pass the test method.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getClientHeight" returns="Int">
              <description>Returns the height of the client (viewport).</description>
            </function>
            <function name="getClientRegion" returns="Region">
              <description>Creates a Region based on the viewport relative to the document.</description>
            </function>
            <function name="getClientWidth" returns="Int">
              <description>Returns the width of the client (viewport).</description>
            </function>
            <function name="getDocumentHeight" returns="Int">
              <description>Returns the height of the document.</description>
            </function>
            <function name="getDocumentScrollLeft" returns="Int">
              <description>Returns the left scroll value of the document</description>
              <params>
                <param name="document" type="HTMLDocument" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDocumentScrollTop" returns="Int">
              <description>Returns the top scroll value of the document</description>
              <params>
                <param name="document" type="HTMLDocument" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDocumentWidth" returns="Int">
              <description>Returns the width of the document.</description>
            </function>
            <function name="getElementBy" returns="HTMLElement">
              <description>Returns the first HTMLElement that passes the test applied by the supplied boolean method.</description>
              <params>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElementsBy" returns="Array">
              <description>Returns a array of HTMLElements that pass the test applied by supplied boolean method.
For optimized performance, include a tag and/or root node when possible.
Note: This method operates against a live collection, so modifying the
collection in the callback (removing/appending nodes, etc.) will have
side effects.  Instead you should iterate the returned nodes array,
as you would with the native "getElementsByTagName" method.</description>
              <params>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="apply" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElementsByClassName" returns="Array">
              <description>Returns a array of HTMLElements with the given class.
For optimized performance, include a tag and/or root node when possible.
Note: This method operates against a live collection, so modifying the
collection in the callback (removing/appending nodes, etc.) will have
side effects.  Instead you should iterate the returned nodes array,
as you would with the native "getElementsByTagName" method.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="root" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="apply" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="o" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrides" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFirstChild" returns="Object">
              <description>Returns the first HTMLElement child.</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFirstChildBy" returns="Object">
              <description>Returns the first HTMLElement child that passes the test method.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLastChild" returns="Object">
              <description>Returns the last HTMLElement child.</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLastChildBy" returns="Object">
              <description>Returns the last HTMLElement child that passes the test method.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNextSibling" returns="Object">
              <description>Returns the next sibling that is an HTMLElement</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNextSiblingBy" returns="Object">
              <description>Returns the next HTMLElement sibling that passes the boolean method.
For performance reasons, IDs are not accepted and argument validation omitted.
Returns the nearest HTMLElement sibling if no method provided.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPreviousSibling" returns="Object">
              <description>Returns the previous sibling that is an HTMLElement</description>
              <params>
                <param name="node" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPreviousSiblingBy" returns="Object">
              <description>Returns the previous sibling that is an HTMLElement.
For performance reasons, IDs are not accepted and argument validation omitted.
Returns the nearest HTMLElement sibling if no method provided.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRegion" returns="Region | Array">
              <description>Returns the region position of the given element.
The element must be part of the DOM tree to have a region (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getStyle" returns="String | Array">
              <description>Normalizes currentStyle and ComputedStyle.</description>
              <params>
                <param name="el" type="String | HTMLElement |Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getViewportHeight" returns="Int">
              <description>Returns the current height of the viewport.</description>
            </function>
            <function name="getViewportWidth" returns="Int">
              <description>Returns the current width of the viewport.</description>
            </function>
            <function name="getX" returns="Number | Array">
              <description>Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getXY" returns="Array">
              <description>Gets the current position of an element based on page coordinates.
Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getY" returns="Number | Array">
              <description>Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasClass" returns="Boolean | Array">
              <description>Determines whether an HTMLElement has the given className.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="inDocument" returns="Boolean">
              <description>Determines whether an HTMLElement is present in the current document.</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="doc" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertAfter" returns="HTMLElement">
              <description>Inserts the new node as the next sibling of the reference node</description>
              <params>
                <param name="newNode" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="referenceNode" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="HTMLElement">
              <description>Inserts the new node as the previous sibling of the reference node</description>
              <params>
                <param name="newNode" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="referenceNode" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isAncestor" returns="Boolean">
              <description>Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.</description>
              <params>
                <param name="haystack" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="needle" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeClass" returns="Boolean | Array">
              <description>Removes a class name from a given element or collection of elements.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceClass" returns="Boolean | Array">
              <description>Replace a class with another class for a given element or collection of elements.
If no oldClassName is present, the newClassName is simply added.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oldClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAttibute" returns="void">
              <description>Provides a normalized attribute interface.</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="val" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStyle" returns="void">
              <description>Wrapper for setting style properties of HTMLElements.  Normalizes "opacity" across modern browsers.</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="val" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setX" returns="void">
              <description>Set the X position of an html element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="x" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setXY" returns="void">
              <description>Set the position of an html element in page coordinates, regardless of how the element is positioned.
The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pos" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="noRetry" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setY" returns="void">
              <description>Set the Y position of an html element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
              <params>
                <param name="el" type="String | HTMLElement | Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="x" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DragDrop" extends="Object" private="True">
          <description>Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver, onDragOut.
Up to three html elements can be associated with a DragDrop instance:

linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.
handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.
drag element: this represents an the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link YAHOO.util.DDProxy}


This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the "group1" group:
dd = new YAHOO.util.DragDrop("div1", "group1");

Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
dd.onDragDrop = function(e, id) {
Â Â alert("dd was dropped on " + id);
}</description>
          <attributes>
            <attribute name="__ygDragDrop" type="object" readonly="False">
              <description>Private property
Internal typeof flag</description>
            </attribute>
            <attribute name="_domRef" type="object" readonly="False">
              <description>Private property
Cached reference to the linked element</description>
            </attribute>
            <attribute name="available" type="boolean" readonly="False">
              <description>The availabe property is false until the linked dom element is accessible.</description>
            </attribute>
            <attribute name="config" type="object" readonly="False">
              <description>Configuration attributes passed into the constructor</description>
            </attribute>
            <attribute name="constrainX" type="boolean" readonly="False">
              <description>Private property
Set to true when horizontal contraints are applied</description>
            </attribute>
            <attribute name="constrainY" type="boolean" readonly="False">
              <description>Private property
Set to true when vertical contraints are applied</description>
            </attribute>
            <attribute name="cursorIsOver" type="boolean" readonly="False">
              <description>Property that is assigned to a drag and drop object when testing to
see if it is being targeted by another dd object.  This property
can be used in intersect mode to help determine the focus of
the mouse interaction.  DDM.getBestMatch uses this property first to
determine the closest match in INTERSECT mode when multiple targets
are part of the same interaction.</description>
            </attribute>
            <attribute name="deltaX" type="int" readonly="False">
              <description>Private property
The difference between the click position and the source element's location</description>
            </attribute>
            <attribute name="deltaY" type="int" readonly="False">
              <description>Private property
The difference between the click position and the source element's location</description>
            </attribute>
            <attribute name="dragElId" type="String" readonly="False">
              <description>Private property
The id of the element that will be dragged.  By default this is same
as the linked element , but could be changed to another element. Ex:
YAHOO.util.DDProxy</description>
            </attribute>
            <attribute name="dragOnly" type="Boolean" readonly="False">
              <description>If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)</description>
            </attribute>
            <attribute name="events" type="object" readonly="False">
              <description>An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop
By setting any of these to false, then event will not be fired.</description>
            </attribute>
            <attribute name="groups" type="{string: string}" readonly="False">
              <description>The group defines a logical collection of DragDrop objects that are
related.  Instances only get events when interacting with other
DragDrop object in the same group.  This lets us define multiple
groups using a single DragDrop subclass if we want.</description>
            </attribute>
            <attribute name="handleElId" type="String" readonly="False">
              <description>Private property
the id of the element that initiates the drag operation.  By default
this is the linked element, but could be changed to be a child of this
element.  This lets us do things like only starting the drag when the
header element within the linked html element is clicked.</description>
            </attribute>
            <attribute name="hasOuterHandles" type="boolean" readonly="False">
              <description>By default, drags can only be initiated if the mousedown occurs in the
region the linked element is.  This is done in part to work around a
bug in some browsers that mis-report the mousedown if the previous
mouseup happened outside of the window.  This property is set to true
if outer handles are defined.</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The id of the element associated with this object.  This is what we
refer to as the "linked element" because the size and position of
this element is used to determine when the drag and drop objects have
interacted.</description>
            </attribute>
            <attribute name="invalidHandleClasses" type="string[]" readonly="False">
              <description>An indexted array of css class names for elements that will be ignored
if clicked.</description>
            </attribute>
            <attribute name="invalidHandleIds" type="{string: string}" readonly="False">
              <description>An associative array of ids for elements that will be ignored if clicked</description>
            </attribute>
            <attribute name="invalidHandleTypes" type="{string: string}" readonly="False">
              <description>An associative array of HTML tags that will be ignored if clicked.</description>
            </attribute>
            <attribute name="isTarget" type="boolean" readonly="False">
              <description>By default, all instances can be a drop target.  This can be disabled by
setting isTarget to false.</description>
            </attribute>
            <attribute name="locked" type="boolean" readonly="False">
              <description>Private property
Individual drag/drop instances can be locked.  This will prevent
onmousedown start drag.</description>
            </attribute>
            <attribute name="maintainOffset" type="boolean" readonly="False">
              <description>Maintain offsets when we resetconstraints.  Set to true when you want
the position of the element relative to its parent to stay the same
when the page changes</description>
            </attribute>
            <attribute name="maxX" type="int" readonly="False">
              <description>Private property
The right constraint</description>
            </attribute>
            <attribute name="maxY" type="int" readonly="False">
              <description>Private property
The down constraint</description>
            </attribute>
            <attribute name="minX" type="int" readonly="False">
              <description>Private property
The left constraint</description>
            </attribute>
            <attribute name="minY" type="int" readonly="False">
              <description>Private property
The up constraint</description>
            </attribute>
            <attribute name="overlap" type="YAHOO.util.Region" readonly="False">
              <description>Property that is assigned to a drag and drop object when testing to
see if it is being targeted by another dd object.  This is a region
that represents the area the draggable element overlaps this target.
DDM.getBestMatch uses this property to compare the size of the overlap
to that of other targets in order to determine the closest match in
INTERSECT mode when multiple targets are part of the same interaction.</description>
            </attribute>
            <attribute name="padding" type="int[]" readonly="False">
              <description>The padding configured for this drag and drop object for calculating
the drop zone intersection with this object.</description>
            </attribute>
            <attribute name="primaryButtonOnly" type="boolean" readonly="False">
              <description>By default the drag and drop instance will only respond to the primary
button click (left button for a right-handed mouse).  Set to true to
allow drag and drop to start with any mouse click that is propogated
by the browser</description>
            </attribute>
            <attribute name="startPageX" type="int" readonly="False">
              <description>Private property
The linked element's absolute X position at the time the drag was
started</description>
            </attribute>
            <attribute name="startPageY" type="int" readonly="False">
              <description>Private property
The linked element's absolute X position at the time the drag was
started</description>
            </attribute>
            <attribute name="useShim" type="Boolean" readonly="False">
              <description>If this flag is true, a shim will be placed over the screen/viewable area to track mouse events. Should help with dragging elements over iframes and other controls.</description>
            </attribute>
            <attribute name="xTicks" type="int[]" readonly="False">
              <description>Array of pixel locations the element will snap to if we specified a
horizontal graduation/interval.  This array is generated automatically
when you define a tick interval.</description>
            </attribute>
            <attribute name="yTicks" type="int[]" readonly="False">
              <description>Array of pixel locations the element will snap to if we specified a
vertical graduation/interval.  This array is generated automatically
when you define a tick interval.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="addInvalidHandleClass" returns="void">
              <description>Lets you specify a css class of elements that will not initiate a drag</description>
              <params>
                <param name="cssClass" type="string" optional="False">
                  <description>the class of the elements you wish to ignore</description>
                </param>
              </params>
            </function>
            <function name="addInvalidHandleId" returns="void">
              <description>Lets you to specify an element id for a child of a drag handle
that should not initiate a drag</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addInvalidHandleType" returns="void">
              <description>Allows you to specify a tag name that should not start a drag operation
when clicked.  This is designed to facilitate embedding links within a
drag handle that do something other than start the drag.</description>
              <params>
                <param name="tagName" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addToGroup" returns="void">
              <description>Add this instance to a group of related drag/drop objects.  All
instances belong to at least one group, and can belong to as many
groups as needed.</description>
              <params>
                <param name="sGroup" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyConfig" returns="void">
              <description>Applies the configuration parameters that were passed into the constructor.
This is supposed to happen at each level through the inheritance chain.  So
a DDProxy implentation will execute apply config on DDProxy, DD, and
DragDrop in order to get all of the parameters that are available in
each object.</description>
            </function>
            <function name="b4Drag" returns="void">
              <description>Private property
Code that executes immediately before the onDrag event</description>
            </function>
            <function name="b4DragDrop" returns="void">
              <description>Private property
Code that executes immediately before the onDragDrop event</description>
            </function>
            <function name="b4DragOut" returns="void">
              <description>Private property
Code that executes immediately before the onDragOut event</description>
            </function>
            <function name="b4DragOver" returns="void">
              <description>Private property
Code that executes immediately before the onDragOver event</description>
            </function>
            <function name="b4EndDrag" returns="void">
              <description>Private property
Code that executes immediately before the endDrag event</description>
            </function>
            <function name="b4MouseDown" returns="void">
              <description>Private property
Code executed immediately before the onMouseDown event</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="b4StartDrag" returns="void">
              <description>Private property
Code that executes immediately before the startDrag event</description>
            </function>
            <function name="clearConstraints" returns="void">
              <description>Clears any constraints applied to this instance.  Also clears ticks
since they can't exist independent of a constraint at this time.</description>
            </function>
            <function name="clearTicks" returns="void">
              <description>Clears any tick interval defined for this instance</description>
            </function>
            <function name="clickValidator" returns="void">
              <description>Method validates that the clicked element
was indeed the handle or a valid child of the handle</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="endDrag" returns="void">
              <description>Fired when we are done dragging the object</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDragEl" returns="HTMLElement">
              <description>Returns a reference to the actual element to drag.  By default this is
the same as the html element, but it can be assigned to another
element. An example of this can be found in YAHOO.util.DDProxy</description>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Returns a reference to the linked element</description>
            </function>
            <function name="getTargetCoord" returns="void">
              <description>Private property
Finds the location the element should be placed if we want to move
it to where the mouse location less the click offset would place us.</description>
              <params>
                <param name="iPageX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iPageY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTick" returns="int">
              <description>Private property
Normally the drag element is moved pixel by pixel, but we can specify
that it move a number of pixels at a time.  This method resolves the
location when we have it set up like this.</description>
              <params>
                <param name="val" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tickArray" type="int[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleMouseDown" returns="void">
              <description>Private property
Fired when this object is clicked</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oDD" type="YAHOO.util.DragDrop" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleOnAvailable" returns="void">
              <description>Private property
Executed when the linked element is available</description>
            </function>
            <function name="init" returns="void">
              <description>Sets up the DragDrop object.  Must be called in the constructor of any
YAHOO.util.DragDrop subclass</description>
              <params>
                <param name="id" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initTarget" returns="void">
              <description>Initializes Targeting functionality only... the object does not
get a mousedown handler.</description>
              <params>
                <param name="id" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLocked" returns="boolean">
              <description>Returns true if this instance is locked, or the drag drop mgr is locked
(meaning that all drag/drop is disabled on the page.)</description>
            </function>
            <function name="isValidHandleChild" returns="boolean">
              <description>Checks the tag exclusion list to see if this click should be ignored</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lock" returns="void">
              <description>Lock this instance</description>
            </function>
            <function name="on" returns="void">
              <description>Shortcut for EventProvider.subscribe, see YAHOO.util.EventProvider.subscribe</description>
            </function>
            <function name="onAvailable" returns="void">
              <description>Override the onAvailable method to do what is needed after the initial
position was determined.</description>
            </function>
            <function name="onDrag" returns="void">
              <description>Abstract method called during the onMouseMove event while dragging an
object.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragDrop" returns="void">
              <description>Abstract method called when this item is dropped on another DragDrop
obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragEnter" returns="void">
              <description>Abstract method called when this element fist begins hovering over
another DragDrop obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragOut" returns="void">
              <description>Abstract method called when we are no longer hovering over an element</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDragOver" returns="void">
              <description>Abstract method called when this element is hovering over another
DragDrop obj</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="String|DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onInvalidDrop" returns="void">
              <description>Abstract method called when this item is dropped on an area with no
drop target</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseDown" returns="void">
              <description>Event handler that fires when a drag/drop obj gets a mousedown</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMouseUp" returns="void">
              <description>Event handler that fires when a drag/drop obj gets a mouseup</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeFromGroup" returns="void">
              <description>Remove's this instance from the supplied interaction group</description>
              <params>
                <param name="sGroup" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleClass" returns="void">
              <description>Unsets an invalid css class</description>
              <params>
                <param name="cssClass" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleId" returns="void">
              <description>Unsets an invalid handle id</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeInvalidHandleType" returns="void">
              <description>Unsets an excluded tag name set by addInvalidHandleType</description>
              <params>
                <param name="tagName" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetConstraints" returns="void">
              <description>resetConstraints must be called if you manually reposition a dd element.</description>
            </function>
            <function name="setDragElId" returns="void">
              <description>Allows you to specify that an element other than the linked element
will be moved with the cursor during a drag</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHandleElId" returns="void">
              <description>Allows you to specify a child of the linked element that should be
used to initiate the drag operation.  An example of this would be if
you have a content div with text and links.  Clicking anywhere in the
content area would normally start the drag operation.  Use this method
to specify that an element inside of the content div is the element
that starts the drag operation.</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setInitialPosition" returns="void">
              <description>Private property
Stores the initial placement of the linked element.</description>
              <params>
                <param name="diffX" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="diffY" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setOuterHandleElId" returns="void">
              <description>Allows you to set an element outside of the linked element as a drag
handle</description>
              <params>
                <param name="id" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setPadding" returns="void">
              <description>Configures the padding for the target zone in px.  Effectively expands
(or reduces) the virtual object size for targeting calculations.
Supports css-style shorthand; if only one parameter is passed, all sides
will have that padding, and if only two are passed, the top and bottom
will have the first param, the left and right the second.</description>
              <params>
                <param name="iTop" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iBot" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStartPosition" returns="void">
              <description>Private property
Sets the start position of the element.  This is set when the obj
is initialized, the reset when a drag is started.</description>
              <params>
                <param name="pos" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setXConstraint" returns="void">
              <description>By default, the element can be dragged any place on the screen.  Use
this method to limit the horizontal travel of the element.  Pass in
0,0 for the parameters if you want to lock the drag to the y axis.</description>
              <params>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setXTicks" returns="void">
              <description>Private property
Create the array of horizontal tick marks if an interval was specified
in setXConstraint().</description>
            </function>
            <function name="setYConstraint" returns="void">
              <description>By default, the element can be dragged any place on the screen.  Set
this to limit the vertical travel of the element.  Pass in 0,0 for the
parameters if you want to lock the drag to the x axis.</description>
              <params>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYTicks" returns="void">
              <description>Private property
Create the array of vertical tick marks if an interval was specified in
setYConstraint().</description>
            </function>
            <function name="startDrag" returns="void">
              <description>Abstract method called after a drag/drop object is clicked
and the drag or mousedown time thresholds have beeen met.</description>
              <params>
                <param name="X" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="Y" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="string">
              <description>toString method</description>
            </function>
            <function name="unlock" returns="void">
              <description>Unlock this instace</description>
            </function>
            <function name="unreg" returns="void">
              <description>Remove all drag and drop hooks for this element</description>
            </function>
            <function name="DragDrop" returns="YAHOO.util.DragDrop">
              <description>Class YAHOO.util.DragDrop constructor
Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver, onDragOut.
Up to three html elements can be associated with a DragDrop instance:

linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.
handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.
drag element: this represents an the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link YAHOO.util.DDProxy}


This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the "group1" group:
dd = new YAHOO.util.DragDrop("div1", "group1");

Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
dd.onDragDrop = function(e, id) {
Â Â alert("dd was dropped on " + id);
}</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DragDropMgr" extends="Object" private="True">
          <description>DragDropMgr is a singleton that tracks the element interaction for
all DragDrop items in the window.  Generally, you will not call
this class directly, but it does have helper methods that could
be useful in your DragDrop implementations.</description>
          <attributes>
            <attribute name="_debugShim" type="Boolean" readonly="False">
              <description>Private property
This property is used when useShim is set to true, it will set the opacity on the shim to .5 for debugging. Use: (YAHOO.util.DDM._debugShim = true;)</description>
            </attribute>
            <attribute name="_shim" type="HTMLElement" readonly="False">
              <description>Private property
The HTML element created to use as a shim over the document to track mouse movements</description>
            </attribute>
            <attribute name="_shimActive" type="Boolean" readonly="False">
              <description>Private property
This property is used to determine if the shim is active over the screen, default false.</description>
            </attribute>
            <attribute name="_shimState" type="Boolean" readonly="False">
              <description>Private property
This property is used when useShim is set on a DragDrop object to store the current state of DDM.useShim so it can be reset when a drag operation is done.</description>
            </attribute>
            <attribute name="_timeoutCount" type="object" readonly="False">
              <description>Private property
Internal counter</description>
            </attribute>
            <attribute name="clickPixelThresh" type="int" readonly="False">
              <description>The number of pixels that the mouse needs to move after the
mousedown before the drag is initiated.  Default=3;</description>
            </attribute>
            <attribute name="clickTimeout" type="Object" readonly="False">
              <description>Private property
Timeout used for the click time threshold</description>
            </attribute>
            <attribute name="clickTimeThresh" type="int" readonly="False">
              <description>The number of milliseconds after the mousedown event to initiate the
drag if we don't get a mouseup event. Default=1000</description>
            </attribute>
            <attribute name="deltaX" type="int" readonly="False">
              <description>Private property
the X distance between the cursor and the object being dragged</description>
            </attribute>
            <attribute name="deltaY" type="int" readonly="False">
              <description>Private property
the Y distance between the cursor and the object being dragged</description>
            </attribute>
            <attribute name="dragCurrent" type="DragDrop" readonly="False">
              <description>Private property
the DragDrop object that is currently being dragged</description>
            </attribute>
            <attribute name="dragOvers" type="Array" readonly="False">
              <description>Private property
the DragDrop object(s) that are being hovered over</description>
            </attribute>
            <attribute name="dragThreshMet" type="boolean" readonly="False">
              <description>Private property
Flag that indicates that either the drag pixel threshold or the
mousdown time threshold has been met</description>
            </attribute>
            <attribute name="elementCache" type="object" readonly="False">
              <description>A cache of DOM elements</description>
            </attribute>
            <attribute name="fromTimeout" type="boolean" readonly="False">
              <description>Private property
Flag to determine if the drag event was fired from the click timeout and
not the mouse move threshold.</description>
            </attribute>
            <attribute name="handleIds" type="{string: string}" readonly="False">
              <description>Private property
Array of element ids defined as drag handles.  Used to determine
if the element that generated the mousedown event is actually the
handle and not the html element itself.</description>
            </attribute>
            <attribute name="ids" type="{string: string}" readonly="False">
              <description>Private property
Two dimensional Array of registered DragDrop objects.  The first
dimension is the DragDrop item group, the second the DragDrop
object.</description>
            </attribute>
            <attribute name="initialized" type="object" readonly="False">
              <description>Private property
Internal flag that is set to true when drag and drop has been
initialized</description>
            </attribute>
            <attribute name="interactionInfo" type="object" readonly="False">
              <description>Provides additional information about the the current set of
interactions.  Can be accessed from the event handlers. It
contains the following properties:
out:       onDragOut interactions
enter:     onDragEnter interactions
over:      onDragOver interactions
drop:      onDragDrop interactions
point:     The location of the cursor
draggedRegion: The location of dragged element at the time
of the interaction
sourceRegion: The location of the source elemtn at the time
of the interaction
validDrop: boolean</description>
            </attribute>
            <attribute name="INTERSECT" type="int" readonly="False">
              <description>In intersect mode, drag and drop interaction is defined by the
cursor position or the amount of overlap of two or more drag and
drop objects.</description>
            </attribute>
            <attribute name="locationCache" type="object" readonly="False">
              <description>Private property
Location cache that is set for all drag drop objects when a drag is
initiated, cleared when the drag is finished.</description>
            </attribute>
            <attribute name="locked" type="object" readonly="False">
              <description>Private property
All drag and drop can be disabled.</description>
            </attribute>
            <attribute name="mode" type="int" readonly="False">
              <description>The current drag and drop mode.  Default: POINT</description>
            </attribute>
            <attribute name="POINT" type="int" readonly="False">
              <description>In point mode, drag and drop interaction is defined by the
location of the cursor during the drag/drop</description>
            </attribute>
            <attribute name="preventDefault" type="boolean" readonly="False">
              <description>Flag to determine if we should prevent the default behavior of the
events we define. By default this is true, but this can be set to
false if you need the default behavior (not recommended)</description>
            </attribute>
            <attribute name="startX" type="int" readonly="False">
              <description>Private property
The X position of the mousedown event stored for later use when a
drag threshold is met.</description>
            </attribute>
            <attribute name="startY" type="int" readonly="False">
              <description>Private property
The Y position of the mousedown event stored for later use when a
drag threshold is met.</description>
            </attribute>
            <attribute name="stopPropagation" type="boolean" readonly="False">
              <description>Flag to determine if we should stop the propagation of the events
we generate. This is true by default but you may want to set it to
false if the html element contains other features that require the
mouse click.</description>
            </attribute>
            <attribute name="STRICT_INTERSECT" type="int" readonly="False">
              <description>In intersect mode, drag and drop interaction is defined only by the
overlap of two or more drag and drop objects.</description>
            </attribute>
            <attribute name="useCache" type="boolean" readonly="False">
              <description>Set useCache to false if you want to force object the lookup of each
drag and drop linked element constantly during a drag.</description>
            </attribute>
            <attribute name="useShim" type="Boolean" readonly="False">
              <description>This property is used to turn on global use of the shim element on all DragDrop instances, defaults to false for backcompat. (Use: YAHOO.util.DDM.useShim = true)</description>
            </attribute>
            <attribute name="ElementWrapper" type="YAHOO.util.DragDropMgr.ElementWrapper" readonly="False">
              <description>Inner class for cached elements</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_activateShim" returns="void">
              <description>Private property
This method will create the shim element if needed, then show the shim element, size the element and set the _shimActive property to true</description>
            </function>
            <function name="_addListeners" returns="void">
              <description>Private property
Trying to make the load order less important.  Without this we get
an error if this file is loaded before the Event Utility.</description>
            </function>
            <function name="_deactivateShim" returns="void">
              <description>Private property
This method will hide the shim element and set the _shimActive property to false</description>
            </function>
            <function name="_execOnAll" returns="void">
              <description>Private property
Runs method on all drag and drop objects</description>
            </function>
            <function name="_onLoad" returns="void">
              <description>Private property
Drag and drop initialization.  Sets up the global event handlers</description>
            </function>
            <function name="_onResize" returns="void">
              <description>Private property
Reset constraints on all drag and drop objs</description>
            </function>
            <function name="_onUnload" returns="void">
              <description>Private property
unload event handler</description>
            </function>
            <function name="_remove" returns="void">
              <description>Private property
Unregisters a drag and drop item.  This is executed in
DragDrop.unreg, use that method instead of calling this directly.</description>
            </function>
            <function name="_sizeShim" returns="void">
              <description>Private property
This method will create a shim element (giving it the id of yui-ddm-shim), it also attaches the mousemove and mouseup listeners to it and attaches a scroll listener on the window</description>
            </function>
            <function name="fireEvents" returns="void">
              <description>Private property
Iterates over all of the DragDrop elements to find ones we are
hovering over or dropping on</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="isDrop" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBestMatch" returns="DragDrop">
              <description>Helper function for getting the best match from the list of drag
and drop objects returned by the drag and drop events when we are
in INTERSECT mode.  It returns either the first object that the
cursor is over, or the object that has the greatest overlap with
the dragged element.</description>
              <params>
                <param name="dds" type="DragDrop[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getClientHeight" returns="int">
              <description>Gets the client height</description>
            </function>
            <function name="getClientWidth" returns="int">
              <description>Gets the client width</description>
            </function>
            <function name="getCss" returns="Object">
              <description>Returns the style property for the DOM element (i.e.,
document.getElById(id).style)</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDDById" returns="DragDrop">
              <description>Returns the DragDrop instance for a given id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElement" returns="Object">
              <description>Returns the actual DOM element</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElWrapper" returns="YAHOO.util.DDM.ElementWrapper">
              <description>Get the wrapper for the DOM element specified</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLocation" returns="YAHOO.util.Region">
              <description>Returns a Region object containing the drag and drop element's position
and size, including the padding configured for it</description>
              <params>
                <param name="oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPosX" returns="int">
              <description>Returns the X position of an html element</description>
              <params>
                <param name="el" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPosY" returns="int">
              <description>Returns the Y position of an html element</description>
              <params>
                <param name="el" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRelated" returns="DragDrop[]">
              <description>Returns the drag and drop instances that are in all groups the
passed in instance belongs to.</description>
              <params>
                <param name="p_oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bTargetsOnly" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getScroll" returns="void">
              <description>Private property
Returns the current scroll position</description>
            </function>
            <function name="getScrollLeft" returns="int">
              <description>Gets the scrollLeft</description>
            </function>
            <function name="getScrollTop" returns="int">
              <description>Gets the scrollTop</description>
            </function>
            <function name="getStyle" returns="string">
              <description>Returns the specified element style property</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="styleProp" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleMouseDown" returns="void">
              <description>Private property
Fired after a registered DragDrop object gets the mousedown event.
Sets up the events required to track the object being dragged</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oDD" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleMouseMove" returns="void">
              <description>Private property
Internal function to handle the mousemove event.  Will be invoked
from the context of the html element.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleMouseUp" returns="void">
              <description>Private property
Internal function to handle the mouseup event.  Will be invoked
from the context of the document.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleWasClicked" returns="void">
              <description>Recursively searches the immediate parent and all child nodes for
the handle element in order to determine wheter or not it was
clicked.</description>
              <params>
                <param name="node" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>Private property
Called the first time an element is registered.</description>
            </function>
            <function name="isDragDrop" returns="boolean">
              <description>Utility function to determine if a given element has been
registered as a drag drop item.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isHandle" returns="boolean">
              <description>Utility function to determine if a given element has been
registered as a drag drop handle for the given Drag Drop object.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLegalTarget" returns="boolean">
              <description>Returns true if the specified dd target is a legal target for
the specifice drag obj</description>
              <params>
                <param name="the" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="the" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isLocked" returns="boolean">
              <description>Is drag and drop locked?</description>
            </function>
            <function name="isOverTarget" returns="boolean">
              <description>Private property
Checks the cursor location to see if it over the target</description>
              <params>
                <param name="pt" type="YAHOO.util.Point" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oTarget" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="intersect" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pre-cached" type="YAHOO.util.Region" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isTypeOfDD" returns="boolean">
              <description>My goal is to be able to transparently determine if an object is
typeof DragDrop, and the exact subclass of DragDrop.  typeof
returns "object", oDD.constructor.toString() always returns
"DragDrop" and not the name of the subclass.  So for now it just
evaluates a well-known variable in DragDrop.</description>
              <params>
                <param name="the" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lock" returns="void">
              <description>Lock all drag and drop functionality</description>
            </function>
            <function name="moveToEl" returns="void">
              <description>Sets the x/y position of an element to the location of the
target element.</description>
              <params>
                <param name="moveEl" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="targetEl" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="numericSort" returns="void">
              <description>Numeric array sort function</description>
            </function>
            <function name="refreshCache" returns="void">
              <description>Refreshes the cache of the top-left and bottom-right points of the
drag and drop objects in the specified group(s).  This is in the
format that is stored in the drag and drop instance, so typical
usage is:

YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);

Alternatively:

YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});</description>
              <params>
                <param name="groups" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regDragDrop" returns="void">
              <description>Each DragDrop instance must be registered with the DragDropMgr.
This is executed in DragDrop.init()</description>
              <params>
                <param name="oDD" type="DragDrop" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regHandle" returns="void">
              <description>Each DragDrop handle element must be registered.  This is done
automatically when executing DragDrop.setHandleElId()</description>
              <params>
                <param name="sDDId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeDDFromGroup" returns="void">
              <description>Private property
Removes the supplied dd instance from the supplied group. Executed
by DragDrop.removeFromGroup, so don't call this function directly.</description>
            </function>
            <function name="startDrag" returns="void">
              <description>Fired when either the drag pixel threshold or the mousedown hold
time threshold has been met.</description>
              <params>
                <param name="x" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopDrag" returns="void">
              <description>Ends the current drag, cleans up the state, and fires the endDrag
and mouseUp events.  Called internally when a mouseup is detected
during the drag.  Can be fired manually during the drag by passing
either another event (such as the mousemove event received in onDrag)
or a fake event with pageX and pageY defined (so that endDrag and
onMouseUp have usable position data.).  Alternatively, pass true
for the silent parameter so that the endDrag and onMouseUp events
are skipped (so no event data is needed.)</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopEvent" returns="void">
              <description>Utility to stop event propagation and event default, if these
features are turned on.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="swapNode" returns="void">
              <description>Swap two nodes.  In IE, we use the native method, for others we
emulate the IE behavior</description>
              <params>
                <param name="n1" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="n2" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unlock" returns="void">
              <description>Unlock all drag and drop functionality</description>
            </function>
            <function name="unregAll" returns="void">
              <description>Private property
Cleans up the drag and drop events and objects.</description>
            </function>
            <function name="verifyEl" returns="boolean">
              <description>This checks to make sure an element exists and is in the DOM.  The
main purpose is to handle cases where innerHTML is used to remove
drag and drop objects from the DOM.  IE provides an 'unspecified
error' when trying to access the offsetParent of such an element</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.DragDropMgr.ElementWrapper" extends="Object" private="True">
          <description>Inner class for cached elements</description>
          <attributes>
            <attribute name="css" type="object" readonly="False">
              <description>A reference to the style property</description>
            </attribute>
            <attribute name="el" type="object" readonly="False">
              <description>The element</description>
            </attribute>
            <attribute name="id" type="object" readonly="False">
              <description>The element id</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.util.Easing" extends="Object" private="True">
          <description>Singleton that determines how an animation proceeds from start to end.</description>
          <functions>
            <function name="backBoth" returns="Number">
              <description>Backtracks slightly, then reverses direction, overshoots end,
then reverses and comes back to end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>Time value used to compute current value</description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>Time value used to compute current value</description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>Time value used to compute current value</description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>Time value used to compute current value</description>
                </param>
                <param name="s" type="Number" optional="False">
                  <description>Time value used to compute current value</description>
                </param>
              </params>
            </function>
            <function name="backIn" returns="Number">
              <description>Backtracks slightly, then reverses direction and moves to end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>Starting value</description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>Starting value</description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>Starting value</description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>Starting value</description>
                </param>
                <param name="s" type="Number" optional="False">
                  <description>Starting value</description>
                </param>
              </params>
            </function>
            <function name="backOut" returns="Number">
              <description>Overshoots end, then reverses and comes back to end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>Delta between start and end values</description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>Delta between start and end values</description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>Delta between start and end values</description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>Delta between start and end values</description>
                </param>
                <param name="s" type="Number" optional="False">
                  <description>Delta between start and end values</description>
                </param>
              </params>
            </function>
            <function name="bounceBoth" returns="Number">
              <description>Bounces off start and end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>Total length of animation</description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>Total length of animation</description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>Total length of animation</description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>Total length of animation</description>
                </param>
              </params>
            </function>
            <function name="bounceIn" returns="Number">
              <description>Bounce off of start.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="bounceOut" returns="Number">
              <description>Bounces off end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeBoth" returns="Number">
              <description>Begins slowly and decelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeBothStrong" returns="Number">
              <description>Begins slowly and decelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeIn" returns="Number">
              <description>Begins slowly and accelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeInStrong" returns="Number">
              <description>Begins slowly and accelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeNone" returns="Number">
              <description>Uniform speed between points.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeOut" returns="Number">
              <description>Begins quickly and decelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="easeOutStrong" returns="Number">
              <description>Begins quickly and decelerates towards end.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="elasticBoth" returns="Number">
              <description>Snap both elastic effect.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="a" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="elasticIn" returns="Number">
              <description>Snap in elastic effect.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="a" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="elasticOut" returns="Number">
              <description>Snap out elastic effect.</description>
              <params>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="c" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="a" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Element" extends="Object" private="True">
          <description>Element provides an wrapper object to simplify adding
event listeners, using dom methods, and managing attributes.</description>
          <attributes>
            <attribute name="DOM_EVENTS" type="Object" readonly="False">
              <description>Dom events supported by the Element instance.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_setHTMLAttrConfig" returns="void">
              <description>Private property
Sets the value of the property and fires beforeChange and change events.</description>
              <params>
                <param name="element" type="YAHOO.util.Element" optional="False">
                  <description>The Element instance to
register the config to.</description>
                </param>
                <param name="key" type="String" optional="False">
                  <description>The Element instance to
register the config to.</description>
                </param>
                <param name="map" type="Object" optional="False">
                  <description>The Element instance to
register the config to.</description>
                </param>
              </params>
            </function>
            <function name="addClass" returns="void">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addListener" returns="void">
              <description>Adds a listener for the given event.  These may be DOM or
customEvent listeners.  Any event that is fired via fireEvent
can be listened for.  All handlers receive an event object.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>A variable to pass to the handler</description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>A variable to pass to the handler</description>
                </param>
                <param name="obj" type="Any" optional="False">
                  <description>A variable to pass to the handler</description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>A variable to pass to the handler</description>
                </param>
              </params>
            </function>
            <function name="appendChild" returns="HTMLElement">
              <description>Wrapper for HTMLElement method.</description>
              <params>
                <param name="child" type="YAHOO.util.Element || HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendTo" returns="HTMLElement">
              <description>Appends the HTMLElement into either the supplied parentNode.</description>
              <params>
                <param name="parentNode" type="HTMLElement | Element" optional="False">
                  <description>
                  </description>
                </param>
                <param name="before" type="HTMLElement | Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fireQueue" returns="void">
              <description>Apply any queued set calls.</description>
            </function>
            <function name="getElementsByClassName" returns="Array">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElementsByTagName" returns="HTMLCollection">
              <description>Wrapper for HTMLElement method.</description>
              <params>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getStyle" returns="String">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasChildNodes" returns="Boolean">
              <description>Wrapper for HTMLElement method.</description>
            </function>
            <function name="hasClass" returns="Boolean">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Registers Element specific attributes.</description>
              <params>
                <param name="map" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="HTMLElement">
              <description>Wrapper for HTMLElement method.</description>
              <params>
                <param name="element" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="before" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="on" returns="void">
              <description>Alias for addListener</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeChild" returns="HTMLElement">
              <description>Wrapper for HTMLElement method.</description>
              <params>
                <param name="child" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeClass" returns="void">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="className" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeListener" returns="void">
              <description>Remove an event listener</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceChild" returns="HTMLElement">
              <description>Wrapper for HTMLElement method.</description>
              <params>
                <param name="newNode" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oldNode" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceClass" returns="void">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="oldClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStyle" returns="void">
              <description>Wrapper for Dom method.</description>
              <params>
                <param name="property" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subscribe" returns="void">
              <description>Alias for addListener</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="scope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Element" returns="YAHOO.util.Element">
              <description>Class YAHOO.util.Element constructor
Element provides an wrapper object to simplify adding
event listeners, using dom methods, and managing attributes.</description>
              <params>
                <param name="el" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="map" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Event" extends="Object" private="True">
          <description>The event utility provides functions to add and remove event listeners,
event cleansing.  It also tries to automatically remove listeners it
registers during the unload event.</description>
          <attributes>
            <attribute name="_dri" type="object" readonly="False">
              <description>Private property
document readystate poll handle</description>
            </attribute>
            <attribute name="_interval" type="object" readonly="False">
              <description>Private property
poll handle</description>
            </attribute>
            <attribute name="ADJ_SCOPE" type="int" readonly="False">
              <description>Adjusted context, either the element we are registering the event
on or the custom object passed in by the listener, int constant</description>
            </attribute>
            <attribute name="counter" type="object" readonly="False">
              <description>Private property
Counter for auto id generation</description>
            </attribute>
            <attribute name="DOMReady" type="boolean" readonly="False">
              <description>True when the document is initially usable</description>
            </attribute>
            <attribute name="EL" type="int" readonly="False">
              <description>Element to bind, int constant</description>
            </attribute>
            <attribute name="elCache&#xA;DOM element cache" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="FN" type="int" readonly="False">
              <description>Function to execute, int constant</description>
            </attribute>
            <attribute name="isIE" type="object" readonly="False">
              <description>IE detection</description>
            </attribute>
            <attribute name="isSafari" type="object" readonly="False">
              <description>Safari detection</description>
            </attribute>
            <attribute name="lastError" type="Error" readonly="False">
              <description>addListener/removeListener can throw errors in unexpected scenarios.
These errors are suppressed, the method returns false, and this property
is set</description>
            </attribute>
            <attribute name="legacyEvents" type="object" readonly="False">
              <description>Private property
Cache of DOM0 event handlers to work around issues with DOM2 events
in Safari</description>
            </attribute>
            <attribute name="legacyHandlers" type="object" readonly="False">
              <description>Private property
Listener stack for DOM0 events</description>
            </attribute>
            <attribute name="legacyMap" type="object" readonly="False">
              <description>Private property
Lookup table for legacy events</description>
            </attribute>
            <attribute name="listeners" type="array" readonly="False">
              <description>Private property
Cache of wrapped listeners</description>
            </attribute>
            <attribute name="loadComplete" type="boolean" readonly="False">
              <description>Private property
True after the onload event has fired</description>
            </attribute>
            <attribute name="OBJ" type="int" readonly="False">
              <description>Object passed in by the user that will be returned as a
parameter to the callback, int constant.  Specific to
unload listeners</description>
            </attribute>
            <attribute name="onAvailStack" type="object" readonly="False">
              <description>Private property
onAvailable listeners</description>
            </attribute>
            <attribute name="OVERRIDE" type="int" readonly="False">
              <description>The original context parameter passed into addListener</description>
            </attribute>
            <attribute name="POLL_INTERVAL" type="int" readonly="False">
              <description>The poll interval in milliseconds</description>
            </attribute>
            <attribute name="POLL_RETRYS" type="int" readonly="False">
              <description>The number of times we should look for elements that are not
in the DOM at the time the event is requested after the document
has been loaded.  The default is 2000@amp;20 ms, so it will poll
for 40 seconds or until all outstanding handlers are bound
(whichever comes first).</description>
            </attribute>
            <attribute name="retryCount" type="object" readonly="False">
              <description>Private property
The number of times to poll after window.onload.  This number is
increased if additional late-bound handlers are requested after
the page load.</description>
            </attribute>
            <attribute name="throwErrors" type="boolean" readonly="False">
              <description>Errors thrown by subscribers of custom events are caught
and the error message is written to the debug console.  If
this property is set to true, it will also re-throw the
error.</description>
            </attribute>
            <attribute name="TYPE" type="int" readonly="False">
              <description>Type of event, int constant</description>
            </attribute>
            <attribute name="unloadListeners" type="array" readonly="False">
              <description>Private property
User-defined unload function that will be fired before all events
are detached</description>
            </attribute>
            <attribute name="webkit" type="string" readonly="False">
              <description>webkit version</description>
            </attribute>
            <attribute name="webkitKeymap" type="{int: int}" readonly="False">
              <description>Private property
Normalized keycodes for webkit/safari</description>
            </attribute>
            <attribute name="WFN" type="int" readonly="False">
              <description>Function wrapped for context correction and cleanup, int constant</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addListener" returns="Boolean">
              <description>Private property
Appends an event handler</description>
              <params>
                <param name="el" type="String|HTMLElement|Array|NodeList" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
                <param name="sType" type="String" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
                <param name="overrideContext" type="Boolean|object" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
                <param name="capture" type="boolen" optional="False">
                  <description>An id, an element
reference, or a collection of ids and/or elements to assign the
listener to.</description>
                </param>
              </params>
            </function>
            <function name="_getCacheIndex" returns="void">
              <description>Private property
Locating the saved event handler data by function ref</description>
            </function>
            <function name="_getScroll" returns="void">
              <description>Private property
Returns the scrollTop and scrollLeft.  Used to calculate the
pageX and pageY in Internet Explorer</description>
            </function>
            <function name="_getScrollLeft" returns="void">
              <description>Private property
Returns scrollLeft</description>
            </function>
            <function name="_getScrollTop" returns="void">
              <description>Private property
Returns scrollTop</description>
            </function>
            <function name="_isValidCollection" returns="boolean">
              <description>Private property
We want to be able to use getElementsByTagName as a collection
to attach a group of events to.  Unfortunately, different
browsers return different types of collections.  This function
tests to determine if the object is array-like.  It will also
fail if the object is an array, but is empty.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_load" returns="void">
              <description>Private property
hook up any deferred listeners</description>
            </function>
            <function name="_ready" returns="void">
              <description>Private property
Fires the DOMReady event listeners the first time the document is
usable.</description>
            </function>
            <function name="_simpleAdd" returns="void">
              <description>Private property
Adds a DOM event directly without the caching, cleanup, context adj, etc</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="capture" type="boolen" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_simpleRemove" returns="void">
              <description>Private property
Basic remove listener</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="capture" type="boolen" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_tryPreloadAttach" returns="void">
              <description>Private property
Polling function that runs before the onload event fires,
attempting to attach to DOM Nodes as soon as they are
available</description>
            </function>
            <function name="_unload" returns="void">
              <description>Private property
Removes all listeners registered by pe.event.  Called
automatically during the unload event.</description>
            </function>
            <function name="addBlurListener" returns="Boolean">
              <description>Appends a blur event handler.  (The focusout event is used for Internet Explorer,
the focusout, capture-event for Opera, WebKit.)</description>
              <params>
                <param name="el" type="String|HTMLElement|Array|NodeList" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="Boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addFocusListener" returns="Boolean">
              <description>Appends a focus event handler.  (The focusin event is used for Internet Explorer,
the focus, capture-event for Opera, WebKit.)</description>
              <params>
                <param name="el" type="String|HTMLElement|Array|NodeList" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="Boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addListener" returns="Boolean">
              <description>Appends an event handler</description>
              <params>
                <param name="el" type="String|HTMLElement|Array|NodeList" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="Boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearCache" returns="void">
              <description>Clears the element cache</description>
            </function>
            <function name="fireLegacyEvent" returns="void">
              <description>Private property
When using legacy events, the handler is routed to this object
so we can fire our custom listener stack.</description>
            </function>
            <function name="generateId" returns="string">
              <description>Generates an unique ID for the element if it does not already
have one.</description>
              <params>
                <param name="el" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCharCode" returns="int">
              <description>Returns the charcode for an event</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="void">
              <description>We cache elements bound by id because when the unload event
fires, we can no longer use document.getElementById</description>
            </function>
            <function name="getEvent" returns="Event">
              <description>Finds the event in the window object, the caller's arguments, or
in the arguments of another method in the callstack.  This is
executed automatically for events registered through the event
manager, so the implementer should not normally need to execute
this function at all.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="boundEl" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLegacyIndex" returns="void">
              <description>Private property
Returns the legacy event index that matches the supplied
signature</description>
            </function>
            <function name="getListeners" returns="Object">
              <description>Returns all listeners attached to the given element via addListener.
Optionally, you can specify a specific type of event to return.</description>
              <params>
                <param name="el" type="HTMLElement|string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPageX" returns="int">
              <description>Returns the event's pageX</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPageY" returns="int">
              <description>Returns the event's pageY</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRelatedTarget" returns="HTMLElement">
              <description>Returns the event's related target</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTarget" returns="HTMLElement">
              <description>Returns the event's target element.  Safari sometimes provides
a text node, and this is automatically resolved to the text
node's parent so that it behaves like other browsers.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="resolveTextNode" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTime" returns="Date">
              <description>Returns the time of the event.  If the time is not included, the
event is modified using the current time.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getXY" returns="[x, y]">
              <description>Returns the pageX and pageY properties as an indexed array.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="on" returns="void">
              <description>YAHOO.util.Event.on is an alias for addListener</description>
            </function>
            <function name="onAvailable" returns="void">
              <description>Executes the supplied callback when the item with the supplied
id is found.  This is meant to be used to execute behavior as
soon as possible as the page loads.  If you use this after the
initial page load it will poll for a fixed time for the element.
The number of times it will poll and the frequency are
configurable.  By default it will poll for 10 seconds.
The callback is executed with a single parameter:
the custom object parameter, if provided.</description>
              <params>
                <param name="id" type="string||string[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="boolean|object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="checkContent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onBlur" returns="void">
              <description>YAHOO.util.Event.onBlur is an alias for addBlurListener</description>
            </function>
            <function name="onContentReady" returns="void">
              <description>Works the same way as onAvailable, but additionally checks the
state of sibling elements to determine if the content of the
available element is safe to modify.
The callback is executed with a single parameter:
the custom object parameter, if provided.</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDOMReady" returns="void">
              <description>Executes the supplied callback when the DOM is first usable.  This
will execute immediately if called after the DOMReady event has
fired.   @todo the DOMContentReady event does not fire when the
script is dynamically injected into the page.  This means the
DOMReady custom event will never fire in FireFox or Opera when the
library is injected.  It _will_ fire in Safari, and the IE
implementation would allow for us to fire it if the defered script
is not available.  We want this to behave the same in all browsers.
Is there a way to identify when the script has been injected
instead of included inline?  Is there a way to know whether the
window onload event has fired without having had a listener attached
to it when it did so?
The callback is a CustomEvent, so the signature is:
type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;
For DOMReady events, there are no fire argments, so the
signature is:
"DOMReady", [], obj</description>
              <params>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="preventDefault" returns="void">
              <description>Prevents the default behavior of the event</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="purgeElement" returns="void">
              <description>Removes all listeners attached to the given element via addListener.
Optionally, the node's children can also be purged.
Optionally, you can specify a specific type of event to remove.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="recurse" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regCE" returns="void">
              <description>Used by old versions of CustomEvent, restored for backwards
compatibility</description>
            </function>
            <function name="removeListener" returns="boolean">
              <description>Removes a focus event listener</description>
              <params>
                <param name="el" type="String|HTMLElement|Array|NodeList" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resolveTextNode" returns="HTMLElement">
              <description>In some cases, some browsers will return a text node inside
the actual element that was targeted.  This normalizes the
return value for getTarget and getRelatedTarget.</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="startInterval" returns="void">
              <description>Private property</description>
            </function>
            <function name="stopEvent" returns="void">
              <description>Convenience method for stopPropagation + preventDefault</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="stopPropagation" returns="void">
              <description>Stops event propagation</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="useLegacyEvent" returns="void">
              <description>Private property
Logic that determines when we should automatically use legacy
events instead of DOM2 events.  Currently this is limited to old
Safari browsers with a broken preventDefault</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.FunctionDataSource" extends="YAHOO.util.DataSourceBase" private="True">
          <description>FunctionDataSource class for JavaScript functions.</description>
          <attributes>
            <attribute name="scope" type="Object" readonly="False">
              <description>Context in which to execute the function. By default, is the DataSource
instance itself. If set, the function will receive the DataSource instance
as an additional argument.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="makeConnection" returns="Number">
              <description>Overriding method passes query to a function. The returned response is then
forwarded to the handleResponse function.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>Request object.</description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>Request object.</description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>Request object.</description>
                </param>
              </params>
            </function>
            <function name="FunctionDataSource" returns="YAHOO.util.FunctionDataSource">
              <description>Class YAHOO.util.FunctionDataSource constructor
FunctionDataSource class for JavaScript functions.</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>(optional) Object literal of configuration values.</description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>(optional) Object literal of configuration values.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Get" extends="Object" private="True">
          <description>Fetches and inserts one or more script or link nodes into the document</description>
          <attributes>
            <attribute name="nidx" type="int" readonly="False">
              <description>Private property
node index used to generate unique node ids</description>
            </attribute>
            <attribute name="POLL_FREQ" type="int" readonly="False">
              <description>The default poll freqency in ms, when needed</description>
            </attribute>
            <attribute name="PURGE_THRESH" type="int" readonly="False">
              <description>The number of request required before an automatic purge.
property PURGE_THRESH</description>
            </attribute>
            <attribute name="purging" type="boolean" readonly="False">
              <description>Private property
interal property used to prevent multiple simultaneous purge
processes</description>
            </attribute>
            <attribute name="qidx" type="int" readonly="False">
              <description>Private property
queue index used to generate transaction ids</description>
            </attribute>
            <attribute name="queues" type="object" readonly="False">
              <description>Private property
hash of queues to manage multiple requests</description>
            </attribute>
            <attribute name="TIMEOUT" type="int" readonly="False">
              <description>The length time to poll for varName when loading a script in
Safari 2.x before the transaction fails.
property TIMEOUT</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_autoPurge" returns="void">
              <description>Private property
Removes processed queues and corresponding nodes</description>
            </function>
            <function name="_finalize" returns="void">
              <description>Private property
Called by the the helper for detecting script load in Safari</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_finish" returns="void">
              <description>Private property
The request is complete, so executing the requester's callback</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_linkNode" returns="HTMLElement">
              <description>Private property
Generates a link node</description>
              <params>
                <param name="url" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="win" type="Window" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_next" returns="void">
              <description>Private property
Loads the next item for a given request</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="loaded" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_node" returns="HTMLElement">
              <description>Private property
Generates an HTML element, this is not appended to a document</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="win" type="Window" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_purge" returns="void">
              <description>Private property
Removes the nodes for the specified queue</description>
            </function>
            <function name="_returnData" returns="void">
              <description>Private property
Returns the data payload for callback functions</description>
            </function>
            <function name="_scriptNode" returns="HTMLElement">
              <description>Private property
Generates a script node</description>
              <params>
                <param name="url" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="win" type="Window" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_timeout" returns="void">
              <description>Private property
Timeout detected</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_track" returns="void">
              <description>Private property
Detects when a node has been loaded.  In the case of
script nodes, this does not guarantee that contained
script is ready to use.</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="n" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="win" type="Window" optional="False">
                  <description>
                  </description>
                </param>
                <param name="qlength" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="trackfn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="abort" returns="void">
              <description>Abort a transaction</description>
              <params>
                <param name="either" type="string|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="css" returns="tId: string">
              <description>Fetches and inserts one or more css link nodes into the
head of the current document or the document in a specified
window.</description>
              <params>
                <param name="url" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="opts" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="queue" returns="void">
              <description>Private property
Saves the state for the request and begins loading
the requested urls</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="opts" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="script" returns="tId: string">
              <description>Fetches and inserts one or more script nodes into the head
of the current document or the document in a specified window.</description>
              <params>
                <param name="url" type="string|string[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="opts" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.History" extends="Object" private="True">
          <description>The History class provides the ability to use the back/forward navigation
buttons in a DHTML application. It also allows a DHTML application to
be bookmarked in a specific state.</description>
          <attributes>
            <attribute name="_fqstates" type="array" readonly="False">
              <description>Private property
List of fully qualified states. This is used only by Safari.</description>
            </attribute>
            <attribute name="_histFrame" type="HTMLIFrameElement" readonly="False">
              <description>Private property
Our hidden IFrame used to store the browsing history.</description>
            </attribute>
            <attribute name="_initialized" type="boolean" readonly="False">
              <description>Private property
Flag used to tell whether YAHOO.util.History.initialize has been called.</description>
            </attribute>
            <attribute name="_modules" type="array" readonly="False">
              <description>Private property
List of registered modules.</description>
            </attribute>
            <attribute name="_stateField" type="HTMLInputElement|HTMLTextAreaElement" readonly="False">
              <description>Private property
INPUT field (with type="hidden" or type="text") or TEXTAREA.
This field keeps the value of the initial state, current state
the list of all states across pages within a single browser session.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_checkIframeLoaded" returns="void">
              <description>Private property
Periodically checks whether our internal IFrame is ready to be used.</description>
            </function>
            <function name="_getHash" returns="string">
              <description>Private property
location.hash is a bit buggy on Opera. I have seen instances where
navigating the history using the back/forward buttons, and hence
changing the URL, would not change location.hash. That's ok, the
implementation of an equivalent is trivial.</description>
            </function>
            <function name="_handleFQStateChange" returns="void">
              <description>Private property
Sets the new currentState attribute of all modules depending on the new
fully qualified state. Also notifies the modules which current state has
changed.</description>
              <params>
                <param name="fqstate" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initialize" returns="void">
              <description>Private property
Finish up the initialization of the Browser History Manager.</description>
            </function>
            <function name="_storeStates" returns="void">
              <description>Private property
Stores all the registered modules' initial state and current state.
On Safari, we also store all the fully qualified states visited by
the application within a single browser session. The storage takes
place in the form field specified during initialization.</description>
            </function>
            <function name="_updateIFrame" returns="boolean">
              <description>Private property
Update the IFrame with our new state.</description>
            </function>
            <function name="getBookmarkedState" returns="string">
              <description>Returns the state of a module according to the URL fragment
identifier. This method is useful to initialize your modules
if your application was bookmarked from a particular state.</description>
              <params>
                <param name="module" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCurrentState" returns="string">
              <description>Returns the current state of the specified module.</description>
              <params>
                <param name="module" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getQueryStringParameter" returns="string">
              <description>Returns the value of the specified query string parameter.
This method is not used internally by the Browser History Manager.
However, it is provided here as a helper since many applications
using the Browser History Manager will want to read the value of
url parameters to initialize themselves.</description>
              <params>
                <param name="paramName" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="queryString" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initialize" returns="void">
              <description>Initializes the Browser History Manager. Call this method
from a script block located right after the opening body tag.</description>
              <params>
                <param name="stateField" type="string|HTML Element" optional="False">
                  <description>
                  </description>
                </param>
                <param name="histFrame" type="string|HTML Element" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="multiNavigate" returns="boolean">
              <description>Call this method when you want to store a new entry in the browser's history.</description>
              <params>
                <param name="states" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="navigate" returns="boolean">
              <description>Call this method when you want to store a new entry in the browser's history.</description>
              <params>
                <param name="module" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="state" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onReady" returns="void">
              <description>Executes the supplied callback when the Browser History Manager is
ready. This will execute immediately if called after the Browser
History Manager onLoad event has fired.</description>
              <params>
                <param name="fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="override" type="boolean|object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="void">
              <description>Registers a new module.</description>
              <params>
                <param name="module" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="initialState" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="onStateChange" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="override" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="History" returns="YAHOO.util.History">
              <description>Class YAHOO.util.History constructor
The History class provides the ability to use the back/forward navigation
buttons in a DHTML application. It also allows a DHTML application to
be bookmarked in a specific state.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ImageLoader" extends="Object" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="bgImgObj" type="YAHOO.util.ImageLoader.bgImgObj" readonly="False">
              <description>Background image object. A background image is one whose URL is specified by "background-image" in the element's style</description>
            </attribute>
            <attribute name="group" type="YAHOO.util.ImageLoader.group" readonly="False">
              <description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
            </attribute>
            <attribute name="imgObj" type="YAHOO.util.ImageLoader.imgObj" readonly="False">
              <description>Base class for image objects to be registered with the groups</description>
            </attribute>
            <attribute name="pngBgImgObj" type="YAHOO.util.ImageLoader.pngBgImgObj" readonly="False">
              <description>PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by "background-image" in the element's style</description>
            </attribute>
            <attribute name="srcImgObj" type="YAHOO.util.ImageLoader.srcImgObj" readonly="False">
              <description>Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.util.ImageLoader.bgImgObj" extends="YAHOO.util.ImageLoader.imgObj" private="True">
          <description>Background image object. A background image is one whose URL is specified by "background-image" in the element's style</description>
          <functions>
            <function name="_applyUrl" returns="void">
              <description>Private property
Inserts the image URL into the DOM so that the image is displayed.
Sets style.backgroundImage</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>HTML DOM element</description>
                </param>
              </params>
            </function>
            <function name="bgImgObj" returns="YAHOO.util.ImageLoader.bgImgObj">
              <description>Class YAHOO.util.ImageLoader.bgImgObj constructor
Background image object. A background image is one whose URL is specified by "background-image" in the element's style</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ImageLoader.group" extends="Object" private="True">
          <description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
          <attributes>
            <attribute name="_classImageEls" type="Array" readonly="False">
              <description>Private property
HTML elements having the class name that is associated with this group
Elements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used</description>
            </attribute>
            <attribute name="_customTriggers" type="Array" readonly="False">
              <description>Private property
Collection of custom-event triggers for this group.
Keeps track of each trigger's event object and event-listener-callback "fetch" function</description>
            </attribute>
            <attribute name="_imgObjs" type="Object" readonly="False">
              <description>Private property
Collection of images registered with this group</description>
            </attribute>
            <attribute name="_timeout" type="Object" readonly="False">
              <description>Private property
Timeout object to keep a handle on the time limit</description>
            </attribute>
            <attribute name="_triggers" type="Array" readonly="False">
              <description>Private property
Collection of triggers for this group.
Keeps track of each trigger's element, event, and event-listener-callback "fetch" function</description>
            </attribute>
            <attribute name="className" type="String" readonly="False">
              <description>Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.
This class should have, in its CSS style definition, "background:none !important;"</description>
            </attribute>
            <attribute name="foldConditional" type="Boolean" readonly="False">
              <description>Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately</description>
            </attribute>
            <attribute name="name" type="String" readonly="False">
              <description>Name for the group. Only used to identify the group in logging statements</description>
            </attribute>
            <attribute name="timeoutLen" type="Number" readonly="False">
              <description>Timeout (time limit) length, in seconds</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_fetchByClass" returns="void">
              <description>Private property
Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching</description>
            </function>
            <function name="_foldCheck" returns="void">
              <description>Private property
Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately.</description>
            </function>
            <function name="_getFetchTimeout" returns="Function">
              <description>Private property
Returns the group's fetch method, with the proper closure, for use with setTimeout</description>
            </function>
            <function name="_onloadTasks" returns="void">
              <description>Private property
Setup to do in the window's onload
Initiates time limit for group; executes the fold check for the images</description>
            </function>
            <function name="addCustomTrigger" returns="void">
              <description>Adds a custom event trigger to the group.</description>
              <params>
                <param name="event" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addTrigger" returns="void">
              <description>Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener</description>
              <params>
                <param name="trigEl" type="String|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="trigAct" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fetch" returns="void">
              <description>Displays the images in the group</description>
            </function>
            <function name="registerBgImage" returns="Object">
              <description>Registers a background image with the group</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerPngBgImage" returns="Object">
              <description>Registers an alpha-channel-type png background image with the group</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="ailProps" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="registerSrcImage" returns="Object">
              <description>Registers a src image with the group</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="width" type="Int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="height" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="group" returns="YAHOO.util.ImageLoader.group">
              <description>Class YAHOO.util.ImageLoader.group constructor
A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
              <params>
                <param name="trigEl" type="String|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="trigAct" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="timeout" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ImageLoader.imgObj" extends="Object" private="True">
          <description>Base class for image objects to be registered with the groups</description>
          <attributes>
            <attribute name="_fetched" type="Boolean" readonly="False">
              <description>Private property
Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice</description>
            </attribute>
            <attribute name="domId" type="String" readonly="False">
              <description>HTML DOM id of the image element</description>
            </attribute>
            <attribute name="height" type="Int" readonly="False">
              <description>Pixel height of the image. Will be set as a "height" attribute after the image is fetched.
Detaults to the natural height of the image.
Only appropriate with src images</description>
            </attribute>
            <attribute name="setVisible" type="Boolean" readonly="False">
              <description>Whether the style.visibility should be set to "visible" after the image is fetched.
Used when setting src images as visibility:hidden prior to image fetching</description>
            </attribute>
            <attribute name="url" type="String" readonly="False">
              <description>URL for the image</description>
            </attribute>
            <attribute name="width" type="Int" readonly="False">
              <description>Pixel width of the image. Will be set as a "width" attribute after the image is fetched.
Detaults to the natural width of the image.
Only appropriate with src images</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_applyUrl" returns="void">
              <description>Private property
Inserts the image URL into the DOM so that the image is displayed.
Must be overridden by child class</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>HTML DOM element</description>
                </param>
              </params>
            </function>
            <function name="fetch" returns="void">
              <description>Displays the image; puts the URL into the DOM</description>
            </function>
            <function name="imgObj" returns="YAHOO.util.ImageLoader.imgObj">
              <description>Class YAHOO.util.ImageLoader.imgObj constructor
Base class for image objects to be registered with the groups</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ImageLoader.pngBgImgObj" extends="YAHOO.util.ImageLoader.imgObj" private="True">
          <description>PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by "background-image" in the element's style</description>
          <attributes>
            <attribute name="props" type="Object" readonly="False">
              <description>AlphaImageLoader properties to be set for the image.
Valid properties are "sizingMethod" and "enabled".</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_applyUrl" returns="void">
              <description>Private property
Inserts the image URL into the DOM so that the image is displayed.
If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>HTML DOM element</description>
                </param>
              </params>
            </function>
            <function name="pngBgImgObj" returns="YAHOO.util.ImageLoader.pngBgImgObj">
              <description>Class YAHOO.util.ImageLoader.pngBgImgObj constructor
PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by "background-image" in the element's style</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="ailProps" type="Object" optional="False">
                  <description>URL for the image</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ImageLoader.srcImgObj" extends="YAHOO.util.ImageLoader.imgObj" private="True">
          <description>Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</description>
          <functions>
            <function name="_applyUrl" returns="void">
              <description>Private property
Inserts the image URL into the DOM so that the image is displayed.
Sets src</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>HTML DOM element</description>
                </param>
              </params>
            </function>
            <function name="srcImgObj" returns="YAHOO.util.ImageLoader.srcImgObj">
              <description>Class YAHOO.util.ImageLoader.srcImgObj constructor
Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</description>
              <params>
                <param name="domId" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="url" type="String" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="width" type="Int" optional="False">
                  <description>URL for the image</description>
                </param>
                <param name="height" type="Int" optional="False">
                  <description>URL for the image</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.KeyListener" extends="Object" private="True">
          <description>KeyListener is a utility that provides an easy interface for listening for
keydown/keyup events fired against DOM elements.</description>
          <attributes>
            <attribute name="enabled" type="Boolean" readonly="False">
              <description>Boolean indicating the enabled/disabled state of the Tooltip</description>
            </attribute>
            <attribute name="KEY" type="object" readonly="False">
              <description>keycode constants for a subset of the special keys</description>
            </attribute>
            <attribute name="KEYDOWN" type="String" readonly="False">
              <description>Constant representing the DOM "keydown" event.</description>
            </attribute>
            <attribute name="KEYUP" type="String" readonly="False">
              <description>Constant representing the DOM "keyup" event.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="disable" returns="void">
              <description>Disables the KeyListener by removing the DOM event listeners from the
target DOM element</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables the KeyListener by attaching the DOM event listeners to the
target DOM element</description>
            </function>
            <function name="handleKeyPress" returns="void">
              <description>Private property
Handles the key event when a key is pressed.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a String representation of the object.</description>
            </function>
            <function name="KeyListener" returns="YAHOO.util.KeyListener">
              <description>Class YAHOO.util.KeyListener constructor
KeyListener is a utility that provides an easy interface for listening for
keydown/keyup events fired against DOM elements.</description>
              <params>
                <param name="attachTo" type="HTMLElement" optional="False">
                  <description>An object literal representing the handler.</description>
                </param>
                <param name="attachTo" type="String" optional="False">
                  <description>An object literal representing the handler.</description>
                </param>
                <param name="keyData" type="Object" optional="False">
                  <description>An object literal representing the handler.</description>
                </param>
                <param name="handler" type="Function" optional="False">
                  <description>An object literal representing the handler.</description>
                </param>
                <param name="handler" type="Object" optional="False">
                  <description>An object literal representing the handler.</description>
                </param>
                <param name="event" type="String" optional="True">
                  <description>An object literal representing the handler.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.LocalDataSource" extends="YAHOO.util.DataSourceBase" private="True">
          <description>LocalDataSource class for in-memory data structs including JavaScript arrays,
JavaScript object literals (JSON), XML documents, and HTML tables.</description>
          <functions>
            <function name="LocalDataSource" returns="YAHOO.util.LocalDataSource">
              <description>Class YAHOO.util.LocalDataSource constructor
LocalDataSource class for in-memory data structs including JavaScript arrays,
JavaScript object literals (JSON), XML documents, and HTML tables.</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>Pointer to live data.</description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>Pointer to live data.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Motion" extends="YAHOO.util.ColorAnim" private="True">
          <description>Anim subclass for moving elements along a path defined by the "points"
member of "attributes".  All "points" are arrays with x, y coordinates.
Usage: var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
          <functions>
            <function name="Motion" returns="YAHOO.util.Motion">
              <description>Class YAHOO.util.Motion constructor
Anim subclass for moving elements along a path defined by the "points"
member of "attributes".  All "points" are arrays with x, y coordinates.
Usage: var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
              <params>
                <param name="el" type="String | HTMLElement" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="attributes" type="Object" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="duration" type="Number" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Number" extends="Object" private="True">
          <description>The static Number class provides helper functions to deal with data of type
Number.</description>
          <functions>
            <function name="format" returns="String">
              <description>Takes a native JavaScript Number and formats to string for display to user.</description>
              <params>
                <param name="nData" type="Number" optional="False">
                  <description>Number.</description>
                </param>
                <param name="oConfig" type="Object} (Optional) Optional configuration values:" optional="False">
                  <description>Number.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ObjectAssert" extends="Object" private="True">
          <description>The ObjectAssert object provides functions to test JavaScript objects
for a variety of cases.</description>
          <functions>
            <function name="hasProperty" returns="void">
              <description>Asserts that an object has a property with the given name.</description>
              <params>
                <param name="propertyName" type="String" optional="False">
                  <description>The name of the property to test.</description>
                </param>
                <param name="object" type="Object" optional="False">
                  <description>The name of the property to test.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>The name of the property to test.</description>
                </param>
              </params>
            </function>
            <function name="propertiesAreEqual" returns="void">
              <description>Asserts that all properties in the object exist in another object.</description>
              <params>
                <param name="expected" type="Object" optional="False">
                  <description>An object with the actual properties.</description>
                </param>
                <param name="actual" type="Object" optional="False">
                  <description>An object with the actual properties.</description>
                </param>
                <param name="message" type="String" optional="False">
                  <description>An object with the actual properties.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Point" extends="YAHOO.util.Region" private="True">
          <description>A point is a region that is special in that it represents a single point on
the grid.</description>
          <functions>
            <function name="Point" returns="YAHOO.util.Point">
              <description>Class YAHOO.util.Point constructor
A point is a region that is special in that it represents a single point on
the grid.</description>
              <params>
                <param name="x" type="Int" optional="False">
                  <description>The X position of the point</description>
                </param>
                <param name="y" type="Int" optional="False">
                  <description>The X position of the point</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Region" extends="Object" private="True">
          <description>A region is a representation of an object on a grid.  It is defined
by the top, right, bottom, left extents, so is rectangular by default.  If
other shapes are required, this class could be extended to support it.</description>
          <attributes>
            <attribute name="0" type="Int" readonly="False">
              <description>The region's left extent as index, for symmetry with set/getXY</description>
            </attribute>
            <attribute name="1" type="Int" readonly="False">
              <description>The region's top extent as index, for symmetry with set/getXY</description>
            </attribute>
            <attribute name="bottom" type="Int" readonly="False">
              <description>The region's bottom extent</description>
            </attribute>
            <attribute name="height" type="Int" readonly="False">
              <description>The region's total height</description>
            </attribute>
            <attribute name="left" type="Int" readonly="False">
              <description>The region's left extent</description>
            </attribute>
            <attribute name="right" type="int" readonly="False">
              <description>The region's right extent</description>
            </attribute>
            <attribute name="top" type="Int" readonly="False">
              <description>The region's top extent</description>
            </attribute>
            <attribute name="width" type="Int" readonly="False">
              <description>The region's total width</description>
            </attribute>
            <attribute name="x" type="Int" readonly="False">
              <description>The region's left extent</description>
            </attribute>
            <attribute name="y" type="Int" readonly="False">
              <description>The region's top extent</description>
            </attribute>
          </attributes>
          <functions>
            <function name="contains" returns="Boolean">
              <description>Returns true if this region contains the region passed in</description>
              <params>
                <param name="region" type="Region" optional="False">
                  <description>The region to evaluate</description>
                </param>
              </params>
            </function>
            <function name="getArea" returns="Int">
              <description>Returns the area of the region</description>
            </function>
            <function name="getRegion" returns="Region">
              <description>Returns a region that is occupied by the DOM element</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="intersect" returns="Region">
              <description>Returns the region where the passed in region overlaps with this one</description>
              <params>
                <param name="region" type="Region" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="void">
              <description>toString</description>
            </function>
            <function name="union" returns="Region">
              <description>Returns the region representing the smallest region that can contain both
the passed in region and this region.</description>
              <params>
                <param name="region" type="Region" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Region" returns="YAHOO.util.Region">
              <description>Class YAHOO.util.Region constructor
A region is a representation of an object on a grid.  It is defined
by the top, right, bottom, left extents, so is rectangular by default.  If
other shapes are required, this class could be extended to support it.</description>
              <params>
                <param name="t" type="Int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="r" type="Int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="b" type="Int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="l" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Resize" extends="YAHOO.util.Element" private="True">
          <description>Makes an element resizable</description>
          <attributes>
            <attribute name="_active" type="Boolean" readonly="False">
              <description>Private property
Flag to show if the resize is active. Used for events.</description>
            </attribute>
            <attribute name="_cache" type="Object" readonly="False">
              <description>Private property
An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc..</description>
            </attribute>
            <attribute name="_currentDD" type="Object" readonly="False">
              <description>Private property
A link to the currently active DD object</description>
            </attribute>
            <attribute name="_currentHandle" type="String" readonly="False">
              <description>Private property
The string identifier of the currently active handle. e.g. 'r', 'br', 'tl'</description>
            </attribute>
            <attribute name="_dds" type="Object" readonly="False">
              <description>Private property
An Object containing references to all of the YAHOO.util.DragDrop instances used for the resize handles</description>
            </attribute>
            <attribute name="_handles" type="Object" readonly="False">
              <description>Private property
An object containing references to all of the resize handles.</description>
            </attribute>
            <attribute name="_ieSelectBack" type="object" readonly="False">
              <description>Private property
We will hold a copy of the current "onselectstart" method on this property, and reset it after we are done using it.</description>
            </attribute>
            <attribute name="_instances" type="Object" readonly="False">
              <description>Private property
Internal hash table for all resize instances</description>
            </attribute>
            <attribute name="_locked" type="Boolean" readonly="False">
              <description>Private property
A flag to show if the resize is locked</description>
            </attribute>
            <attribute name="_positioned" type="Boolean" readonly="False">
              <description>Private property
A flag to show if the element is absolutely positioned</description>
            </attribute>
            <attribute name="_proxy" type="HTMLElement" readonly="False">
              <description>Private property
The HTML reference of the element proxy</description>
            </attribute>
            <attribute name="_resizeEvent" type="Event" readonly="False">
              <description>Private property
The mouse event used to resize with</description>
            </attribute>
            <attribute name="_wrap" type="HTMLElement" readonly="False">
              <description>Private property
The HTML reference of the element wrapper</description>
            </attribute>
            <attribute name="browser" type="Object" readonly="False">
              <description>Private property
A copy of the YAHOO.env.ua property</description>
            </attribute>
            <attribute name="CSS_DRAG" type="String" readonly="False">
              <description>Private property
Class name added when dragging is enabled</description>
            </attribute>
            <attribute name="CSS_GHOST" type="String" readonly="False">
              <description>Private property
Class name given to the wrap element when the ghost property is active</description>
            </attribute>
            <attribute name="CSS_HANDLE" type="String" readonly="False">
              <description>Private property
Class name given to all handles, used as a base for single handle names as well.. Handle "t" will get this.CSS_HANDLE + '-t' as well as this.CSS_HANDLE</description>
            </attribute>
            <attribute name="CSS_HIDDEN" type="String" readonly="False">
              <description>Private property
Class name given to the wrap element to make all handles hidden</description>
            </attribute>
            <attribute name="CSS_HOVER" type="String" readonly="False">
              <description>Private property
Class name used for hover only handles</description>
            </attribute>
            <attribute name="CSS_KNOB" type="String" readonly="False">
              <description>Private property
Class name used to make the knob style handles</description>
            </attribute>
            <attribute name="CSS_PROXY" type="String" readonly="False">
              <description>Private property
Class name given to the proxy element</description>
            </attribute>
            <attribute name="CSS_RESIZE" type="String" readonly="False">
              <description>Private property
Base CSS class name</description>
            </attribute>
            <attribute name="CSS_RESIZING" type="String" readonly="False">
              <description>Private property
Class name given to the wrap element when a resize action is taking place.</description>
            </attribute>
            <attribute name="CSS_STATUS" type="String" readonly="False">
              <description>Private property
Class name given to the status element</description>
            </attribute>
            <attribute name="CSS_WRAP" type="String" readonly="False">
              <description>Private property
Class name given to the wrap element</description>
            </attribute>
            <attribute name="dd" type="Object" readonly="False">
              <description>Private property
The YAHOO.util.DragDrop instance used if draggable is true</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_checkHeight" returns="Number">
              <description>Private property
Checks the value passed against the maxHeight and minHeight.</description>
              <params>
                <param name="h" type="Number" optional="False">
                  <description>The height to check.</description>
                </param>
              </params>
            </function>
            <function name="_checkWidth" returns="Number">
              <description>Private property
Checks the value passed against the maxWidth and minWidth.</description>
              <params>
                <param name="w" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_createHandles" returns="void">
              <description>Private property
Creates the handles as specified in the config</description>
            </function>
            <function name="_createProxy" returns="void">
              <description>Private property
Creates the proxy element if the proxy config is true</description>
            </function>
            <function name="_createWrap" returns="void">
              <description>Private property
Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select</description>
            </function>
            <function name="_handle_for_b" returns="void">
              <description>Private property
Handles the sizes for the Bottom handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_bl" returns="void">
              <description>Private property
Handles the sizes for the Bottom Left handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_br" returns="void">
              <description>Private property
Handles the sizes for the Bottom Right handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_l" returns="void">
              <description>Private property
Handles the sizes for the Left handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_r" returns="void">
              <description>Private property
Handles the sizes for the Right handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_t" returns="void">
              <description>Private property
Handles the sizes for the Top handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_tl" returns="void">
              <description>Private property
Handles the sizes for the Top Left handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handle_for_tr" returns="void">
              <description>Private property
Handles the sizes for the Top Right handle.</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseDown" returns="void">
              <description>Private property
This method preps the autoRatio on MouseDown.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseOut" returns="void">
              <description>Private property
Removes CSS class names to the handles</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseOver" returns="void">
              <description>Private property
Adds CSS class names to the handles</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseUp" returns="void">
              <description>Private property
Cleans up listeners, hides proxy element and removes class names.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleStartDrag" returns="void">
              <description>Private property
Resizes the proxy, sets up the YAHOO.util.DragDrop handlers, updates the status div and preps the cache</description>
              <params>
                <param name="args" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dd" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_ieSelectFix" returns="void">
              <description>Private property
The function we use as the onselectstart handler when we start a drag in Internet Explorer</description>
            </function>
            <function name="_setAutoRatio" returns="void">
              <description>Private property
This method checks to see if the "autoRatio" config is set. If it is, we will check to see if the "Shift Key" is pressed. If so, we will set the config ratio to true.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setCache" returns="void">
              <description>Private property
Sets up the this._cache hash table.</description>
            </function>
            <function name="_setHeight" returns="Number">
              <description>Private property
Calculated the height based on the mouse event.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="flip" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setRatio" returns="Array">
              <description>Private property
Using the Height, Width, Top &amp; Left, it recalcuates them based on the original element size.</description>
              <params>
                <param name="h" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="l" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setupDragDrop" returns="void">
              <description>Private property
Setup the YAHOO.util.DragDrop instance on the element</description>
            </function>
            <function name="_setWidth" returns="Number">
              <description>Private property
Calculates the width based on the mouse event.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="flip" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_snapTick" returns="Number">
              <description>Private property
Adjusts the number based on the ticks used.</description>
              <params>
                <param name="size" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pix" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateStatus" returns="void">
              <description>Private property
Using the Height, Width, Top &amp; Left, it updates the status element with the elements sizes.</description>
              <params>
                <param name="h" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="l" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the resize object and all of it's elements &amp; listeners.</description>
            </function>
            <function name="getActiveHandleEl" returns="HTMLElement">
              <description>Get the HTML reference for the currently active resize handle.</description>
            </function>
            <function name="getProxyEl" returns="HTMLElement">
              <description>Get the HTML reference for the proxy, returns null if no proxy.</description>
            </function>
            <function name="getResizeById" returns="Object">
              <description>Get's a resize object by the HTML id of the element associated with the Resize object.</description>
            </function>
            <function name="getStatusEl" returns="HTMLElement">
              <description>Get the HTML reference for the status element.</description>
            </function>
            <function name="getWrapEl" returns="HTMLElement">
              <description>Get the HTML reference for the wrap element, returns the current element if not wrapped.</description>
            </function>
            <function name="init" returns="void">
              <description>Private property
The Resize class's initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Initializes all of the configuration attributes used to create a resizable element.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isActive" returns="Boolean">
              <description>Returns true or false if a resize operation is currently active on the element.</description>
            </function>
            <function name="isLocked" returns="Boolean">
              <description>Check the locked status of the resize instance</description>
            </function>
            <function name="lock" returns="YAHOO.util.Resize">
              <description>Lock the resize so it can't be resized</description>
              <params>
                <param name="dd" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="YAHOO.util.Resize">
              <description>Resets the element to is start state.</description>
            </function>
            <function name="resize" returns="YAHOO.util.Resize">
              <description>Private property
Resizes the element, wrapper or proxy based on the data from the handlers.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="h" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="t" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="l" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the Resize Object.</description>
            </function>
            <function name="unlock" returns="YAHOO.util.Resize">
              <description>Unlock the resize so it can be resized</description>
              <params>
                <param name="dd" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Resize" returns="YAHOO.util.Resize">
              <description>Class YAHOO.util.Resize constructor
Makes an element resizable</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ScriptNodeDataSource" extends="YAHOO.util.DataSourceBase" private="True">
          <description>ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.</description>
          <attributes>
            <attribute name="_nId" type="Number" readonly="False">
              <description>Private property
Unique ID to track requests.</description>
            </attribute>
            <attribute name="_nPending" type="Number" readonly="False">
              <description>Private property
Counter for pending requests. When this is 0, it is safe to purge callbacks
array.</description>
            </attribute>
            <attribute name="asyncMode" type="String" readonly="False">
              <description>Defines request/response management in the following manner:


ignoreStaleResponses
Send all requests, but handle only the response for the most recently sent request.
allowAll
Send all requests and handle all responses.</description>
            </attribute>
            <attribute name="callbacks" type="Function[]" readonly="False">
              <description>Global array of callback functions, one for each request sent.</description>
            </attribute>
            <attribute name="getUtility" type="Object" readonly="False">
              <description>Alias to YUI Get Utility, to allow implementers to use a custom class.</description>
            </attribute>
            <attribute name="scriptCallbackParam" type="String" readonly="False">
              <description>Callback string parameter name sent to the remote script. By default,
requests are sent to
&lt;URI&gt;?&lt;scriptCallbackParam&gt;=callbackFunction</description>
            </attribute>
          </attributes>
          <functions>
            <function name="doBeforeGetScriptNode" returns="String">
              <description>Overridable method gives implementers access to modify the URI before the dynamic
script node gets inserted. Implementers should take care not to return an
invalid URI.</description>
              <params>
                <param name="URI" type="String" optional="False">
                  <description>to the script</description>
                </param>
              </params>
            </function>
            <function name="generateRequestCallback" returns="String">
              <description>Creates a request callback that gets appended to the script URI. Implementers
can customize this string to match their server's query syntax.</description>
            </function>
            <function name="makeConnection" returns="Number">
              <description>Overriding method passes query to Get Utility. The returned
response is then forwarded to the handleResponse function.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
              </params>
            </function>
            <function name="ScriptNodeDataSource" returns="YAHOO.util.ScriptNodeDataSource">
              <description>Class YAHOO.util.ScriptNodeDataSource constructor
ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Scroll" extends="YAHOO.util.ColorAnim" private="True">
          <description>Anim subclass for scrolling elements to a position defined by the "scroll"
member of "attributes".  All "scroll" members are arrays with x, y scroll positions.
Usage: var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
          <functions>
            <function name="Scroll" returns="YAHOO.util.Scroll">
              <description>Class YAHOO.util.Scroll constructor
Anim subclass for scrolling elements to a position defined by the "scroll"
member of "attributes".  All "scroll" members are arrays with x, y scroll positions.
Usage: var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</description>
              <params>
                <param name="el" type="String or HTMLElement" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="attributes" type="Object" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="duration" type="Number" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
                <param name="method" type="Function" optional="False">
                  <description>Reference to the element that will be animated</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Selector" extends="Object" private="True">
          <description>Provides helper methods for collecting and filtering DOM elements.</description>
          <attributes>
            <attribute name="attrAliases" type="object" readonly="False">
              <description>Mapping of attributes to aliases, normally to work around HTMLAttributes
that conflict with JS reserved words.</description>
            </attribute>
            <attribute name="document" type="object" readonly="False">
              <description>Default document for use queries</description>
            </attribute>
            <attribute name="operators" type="object" readonly="False">
              <description>List of operators and corresponding boolean functions.
These functions are passed the attribute and the current node's value of the attribute.</description>
            </attribute>
            <attribute name="pseudos" type="object" readonly="False">
              <description>List of pseudo-classes and corresponding boolean functions.
These functions are called with the current node, and any value that was parsed with the pseudo regex.</description>
            </attribute>
            <attribute name="shorthand" type="object" readonly="False">
              <description>Mapping of shorthand tokens to corresponding attribute selector</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_tokenize" returns="void">
              <description>Break selector into token units per simple selector.
Combinator is attached to left-hand selector.</description>
            </function>
            <function name="filter" returns="array">
              <description>Filters a set of nodes based on a given CSS selector.</description>
              <params>
                <param name="nodes" type="array" optional="False">
                  <description>The selector used to test each node.</description>
                </param>
                <param name="selector" type="string" optional="False">
                  <description>The selector used to test each node.</description>
                </param>
              </params>
            </function>
            <function name="query" returns="Array">
              <description>Retrieves a set of nodes based on a given CSS selector.</description>
              <params>
                <param name="selector" type="string" optional="False">
                  <description>optional Whether or not to return only the first match.</description>
                </param>
                <param name="root" type="HTMLElement | String" optional="False">
                  <description>optional Whether or not to return only the first match.</description>
                </param>
                <param name="firstOnly" type="Boolean" optional="False">
                  <description>optional Whether or not to return only the first match.</description>
                </param>
              </params>
            </function>
            <function name="test" returns="boolean">
              <description>Test if the supplied node matches the supplied selector.</description>
              <params>
                <param name="node" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="selector" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ShouldError" extends="YAHOO.util.AssertionError" private="True">
          <description>ShouldError is subclass of AssertionError that is thrown whenever
a test is expected to throw an error but doesn't.</description>
          <attributes>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ShouldError" returns="YAHOO.util.ShouldError">
              <description>Class YAHOO.util.ShouldError constructor
ShouldError is subclass of AssertionError that is thrown whenever
a test is expected to throw an error but doesn't.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>The message to display when the error occurs.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.ShouldFail" extends="YAHOO.util.AssertionError" private="True">
          <description>ShouldFail is subclass of AssertionError that is thrown whenever
a test was expected to fail but did not.</description>
          <attributes>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="ShouldFail" returns="YAHOO.util.ShouldFail">
              <description>Class YAHOO.util.ShouldFail constructor
ShouldFail is subclass of AssertionError that is thrown whenever
a test was expected to fail but did not.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>The message to display when the error occurs.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Sort" extends="Object" private="True">
          <description>Sort static utility to support Column sorting.</description>
          <functions>
            <function name="compare" returns="void">
              <description>Comparator function for simple case-insensitive string sorting.</description>
              <params>
                <param name="a" type="Object" optional="False">
                  <description>First sort argument.</description>
                </param>
                <param name="b" type="Object" optional="False">
                  <description>First sort argument.</description>
                </param>
                <param name="desc" type="Boolean" optional="False">
                  <description>First sort argument.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.StyleSheet" extends="Object" private="True">
          <description>Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
var sheet = YAHOO.util.StyleSheet(..);
or
var sheet = new YAHOO.util.StyleSheet(..);
The first parameter passed can be any of the following things:

The desired string name to register a new empty sheet
The string name of an existing YAHOO.util.StyleSheet instance
The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance
The id of an existing &lt;link&gt; or &lt;style&gt; node
The node reference for an existing &lt;link&gt; or &lt;style&gt; node
A chunk of css text to create a new stylesheet from

If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.
The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.</description>
          <attributes>
            <attribute name="node" type="HTMLElement" readonly="False">
              <description>The HTMLElement that this instance encapsulates</description>
            </attribute>
          </attributes>
          <functions>
            <function name="disable" returns="StyleSheet">
              <description>Disable all the rules in the sheet.  Rules may be changed while the
StyleSheet is disabled.</description>
            </function>
            <function name="enable" returns="StyleSheet">
              <description>Enable all the rules in the sheet</description>
            </function>
            <function name="getCssText" returns="String">
              <description>Get the current cssText for a rule or the entire sheet.  If the
selector param is supplied, only the cssText for that rule will be
returned, if found.  If the selector string targets multiple
selectors separated by commas, the cssText of the first rule only
will be returned.  If no selector string, the stylesheet's full
cssText will be returned.</description>
              <params>
                <param name="sel" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getId" returns="Number">
              <description>Get the unique yuiSSID for this StyleSheet instance</description>
            </function>
            <function name="isEnabled" returns="Boolean">
              <description>Returns boolean indicating whether the StyleSheet is enabled</description>
            </function>
            <function name="set" returns="StyleSheet">
              <description>Set style properties for a provided selector string.
If the selector includes commas, it will be split into individual
selectors and applied accordingly.  If the selector string does not
have a corresponding rule in the sheet, it will be added.
The object properties in the second parameter must be the JavaScript
names of style properties.  E.g. fontSize rather than font-size.
The float style property will be set by any of "float",
"styleFloat", or "cssFloat".</description>
              <params>
                <param name="sel" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="css" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isValidSelector" returns="Boolean">
              <description>Determines if a selector string is safe to use.  Used internally
in set to prevent IE from locking up when attempting to add a rule for a
"bad selector".
Bad selectors are considered to be any string containing unescaped
`~!@$%^&amp;()+=|{}[];'"?&lt; or space. Also forbidden are . or # followed by
anything other than an alphanumeric.  Additionally -abc or .-abc or
#_abc or '# ' all fail.  There are likely more failure cases, so
please file a bug if you encounter one.</description>
              <params>
                <param name="sel" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="register" returns="Boolean">
              <description>Registers a StyleSheet instance in the static registry by the given name</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sheet" type="StyleSheet" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toCssText" returns="String">
              <description>Converts an object literal of style properties and values into a string
of css text.  This can then be assigned to el.style.cssText.
The optional second parameter is a cssText string representing the
starting state of the style prior to alterations.  This is most often
extracted from the eventual target's current el.style.cssText.</description>
              <params>
                <param name="css" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cssText" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unset" returns="StyleSheet">
              <description>Unset style properties for a provided selector string, removing
their effect from the style cascade.
If the selector includes commas, it will be split into individual
selectors and applied accordingly.  If there are no properties
remaining in the rule after unsetting, the rule is removed.
The style property or properties in the second parameter must be the
JavaScript style property names. E.g. fontSize rather than font-size.
The float style property will be unset by any of "float",
"styleFloat", or "cssFloat".</description>
              <params>
                <param name="sel" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="css" type="String|Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="StyleSheet" returns="YAHOO.util.StyleSheet">
              <description>Class YAHOO.util.StyleSheet constructor
Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
var sheet = YAHOO.util.StyleSheet(..);
or
var sheet = new YAHOO.util.StyleSheet(..);
The first parameter passed can be any of the following things:

The desired string name to register a new empty sheet
The string name of an existing YAHOO.util.StyleSheet instance
The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance
The id of an existing &lt;link&gt; or &lt;style&gt; node
The node reference for an existing &lt;link&gt; or &lt;style&gt; node
A chunk of css text to create a new stylesheet from

If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.
The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.</description>
              <params>
                <param name="seed" type="String|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.Subscriber" extends="Object" private="True">
          <description>Stores the subscriber information to be used when the event fires.</description>
          <attributes>
            <attribute name="fn" type="function" readonly="False">
              <description>The callback that will be execute when the event fires</description>
            </attribute>
            <attribute name="obj" type="object" readonly="False">
              <description>An optional custom object that will passed to the callback when
the event fires</description>
            </attribute>
            <attribute name="overrideContext" type="boolean|object" readonly="False">
              <description>The default execution context for the event listener is defined when the
event is created (usually the object which contains the event).
By setting overrideContext to true, the execution context becomes the custom
object passed in by the subscriber.  If overrideContext is an object, that
object becomes the context.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="contains" returns="boolean">
              <description>Returns true if the fn and obj match this objects properties.
Used by the unsubscribe method to match the right subscriber.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>the function to execute</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>the function to execute</description>
                </param>
              </params>
            </function>
            <function name="getScope" returns="void">
              <description>Returns the execution context for this listener.  If overrideContext was set to true
the custom obj will be the context.  If overrideContext is an object, that is the
context, otherwise the default context will be used.</description>
              <params>
                <param name="defaultScope" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="void">
              <description>
              </description>
            </function>
            <function name="Subscriber" returns="YAHOO.util.Subscriber">
              <description>Class YAHOO.util.Subscriber constructor
Stores the subscriber information to be used when the event fires.</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overrideContext" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.UnexpectedError" extends="YAHOO.util.AssertionError" private="True">
          <description>UnexpectedError is subclass of AssertionError that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
          <attributes>
            <attribute name="cause" type="Error" readonly="False">
              <description>The unexpected error that occurred.</description>
            </attribute>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
            <attribute name="stack" type="String" readonly="False">
              <description>Stack information for the error (if provided).</description>
            </attribute>
          </attributes>
          <functions>
            <function name="UnexpectedError" returns="YAHOO.util.UnexpectedError">
              <description>Class YAHOO.util.UnexpectedError constructor
UnexpectedError is subclass of AssertionError that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
              <params>
                <param name="cause" type="Error" optional="False">
                  <description>The unexpected error that caused this error to be
thrown.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.UnexpectedValue" extends="YAHOO.util.AssertionError" private="True">
          <description>UnexpectedValue is subclass of AssertionError that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
          <attributes>
            <attribute name="name" type="String" readonly="False">
              <description>The name of the error that occurred.</description>
            </attribute>
            <attribute name="unexpected" type="Object" readonly="False">
              <description>The unexpected value.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getMessage" returns="String">
              <description>Returns a fully formatted error for an assertion failure. The message
contains information about the unexpected value that was encountered.</description>
            </function>
            <function name="UnexpectedValue" returns="YAHOO.util.UnexpectedValue">
              <description>Class YAHOO.util.UnexpectedValue constructor
UnexpectedValue is subclass of AssertionError that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
              <params>
                <param name="message" type="String" optional="False">
                  <description>The unexpected value.</description>
                </param>
                <param name="unexpected" type="Object" optional="False">
                  <description>The unexpected value.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.UserAction" extends="Object" private="True">
          <description>The UserAction object provides functions that simulate events occurring in
the browser. Since these are simulated events, they do not behave exactly
as regular, user-initiated events do, but can be used to test simple
user interactions safely.</description>
          <functions>
            <function name="click" returns="void">
              <description>Simulates a click on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>The element to click on.</description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>The element to click on.</description>
                </param>
              </params>
            </function>
            <function name="dblclick" returns="void">
              <description>Simulates a double click on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>Additional event options (use DOM standard names).</description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>Additional event options (use DOM standard names).</description>
                </param>
              </params>
            </function>
            <function name="fireKeyEvent" returns="void">
              <description>Private property
Fires an event that normally would be fired by the keyboard (keyup,
keydown, keypress). Make sure to specify either keyCode or charCode as
an option.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>Options for the event. Either keyCode or charCode
are required.</description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>Options for the event. Either keyCode or charCode
are required.</description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>Options for the event. Either keyCode or charCode
are required.</description>
                </param>
              </params>
            </function>
            <function name="keydown" returns="void">
              <description>Simulates a keydown event on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="keypress" returns="void">
              <description>Simulates a keypress on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="keyup" returns="void">
              <description>Simulates a keyup event on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mousedown" returns="void">
              <description>Simulates a mousedown on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mouseEvent" returns="void">
              <description>Simulates a mouse event on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mousemove" returns="void">
              <description>Simulates a mousemove on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mouseout" returns="void">
              <description>Simulates a mouseout event on a particular element. Use "relatedTarget"
on the options object to specify where the mouse moved to.
Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
toElement is assigned in its place. IE doesn't allow toElement to be
be assigned, so relatedTarget is assigned in its place. Both of these
concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
in both browsers.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mouseover" returns="void">
              <description>Simulates a mouseover event on a particular element. Use "relatedTarget"
on the options object to specify where the mouse moved from.
Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
fromElement is assigned in its place. IE doesn't allow fromElement to be
be assigned, so relatedTarget is assigned in its place. Both of these
concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
in both browsers.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="mouseup" returns="void">
              <description>Simulates a mouseup on a particular element.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="options" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="simulateKeyEvent" returns="void">
              <description>Private property
Simulates a key event using the given event information to populate
the generated event object. This method does browser-equalizing
calculations to account for differences in the DOM and IE event models
as well as different browser quirks. Note: keydown causes Safari 2.x to
crash.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bubbles" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cancelable" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="view" type="Window" optional="False">
                  <description>
                  </description>
                </param>
                <param name="ctrlKey" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="altKey" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="shiftKey" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="metaKey" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="keyCode" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="charCode" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="simulateMouseEvent" returns="void">
              <description>Private property
Simulates a mouse event using the given event information to populate
the generated event object. This method does browser-equalizing
calculations to account for differences in the DOM and IE event models
as well as different browser quirks.</description>
              <params>
                <param name="target" type="HTMLElement" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="type" type="String" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="bubbles" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="cancelable" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="view" type="Window" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="detail" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="screenX" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="screenY" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="clientX" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="clientY" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="ctrlKey" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="altKey" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="shiftKey" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="metaKey" type="Boolean" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="button" type="int" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
                <param name="relatedTarget" type="HTMLElement" optional="False">
                  <description>(Optional) Indicates if one of the META keys
is pressed while the event is firing. The default is false.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.XHRDataSource" extends="YAHOO.util.DataSourceBase" private="True">
          <description>XHRDataSource class for accessing remote data via the YUI Connection Manager
Utility</description>
          <attributes>
            <attribute name="_xhrCallback" type="object" readonly="False">
              <description>Private property
Define Connection Manager callback object</description>
            </attribute>
            <attribute name="connMethodPost" type="Boolean" readonly="False">
              <description>True if data is to be sent via POST. By default, data will be sent via GET.</description>
            </attribute>
            <attribute name="connMgr" type="Object" readonly="False">
              <description>Alias to YUI Connection Manager, to allow implementers to use a custom class.</description>
            </attribute>
            <attribute name="connTimeout" type="Number" readonly="False">
              <description>The connection timeout defines how many  milliseconds the XHR connection will
wait for a server response. Any non-zero value will enable the Connection Manager's
Auto-Abort feature.</description>
            </attribute>
            <attribute name="connXhrMode" type="String" readonly="False">
              <description>Defines request/response management in the following manner:

queueRequests
If a request is already in progress, wait until response is returned
before sending the next request.
cancelStaleRequests
If a request is already in progress, cancel it before sending the next
request.
ignoreStaleResponses
Send all requests, but handle only the response for the most recently
sent request.
allowAll
Send all requests and handle all responses.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_xhrFailure" returns="void">
              <description>Private property
Define Connection Manager failure handler</description>
              <params>
                <param name="oResponse" type="Object" optional="False">
                  <description>HTTPXMLRequest object</description>
                </param>
              </params>
            </function>
            <function name="_xhrSuccess" returns="void">
              <description>Private property
Define Connection Manager success handler</description>
              <params>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="makeConnection" returns="Number">
              <description>Overriding method passes query to Connection Manager. The returned
response is then forwarded to the handleResponse function.</description>
              <params>
                <param name="oRequest" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
                <param name="oCaller" type="Object" optional="False">
                  <description>(deprecated) Use oCallback.scope.</description>
                </param>
              </params>
            </function>
            <function name="XHRDataSource" returns="YAHOO.util.XHRDataSource">
              <description>Class YAHOO.util.XHRDataSource constructor
XHRDataSource class for accessing remote data via the YUI Connection Manager
Utility</description>
              <params>
                <param name="oLiveData" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.util.YUILoader" extends="Object" private="True">
          <description>YUILoader provides dynamic loading for YUI.</description>
          <attributes>
            <attribute name="_internalCallback" type="object" readonly="False">
              <description>Private property
Internal callback to handle multiple internal insert() calls
so that css is inserted prior to js</description>
            </attribute>
            <attribute name="_useYahooListener" type="object" readonly="False">
              <description>Private property
Use the YAHOO environment listener to detect script load.  This
is only switched on for Safari 2.x and below.</description>
            </attribute>
            <attribute name="allowRollup" type="boolean" readonly="False">
              <description>Should we allow rollups</description>
            </attribute>
            <attribute name="base" type="string" readonly="False">
              <description>The base directory.</description>
            </attribute>
            <attribute name="charset" type="string" readonly="False">
              <description>The charset attribute for inserted nodes</description>
            </attribute>
            <attribute name="combine" type="boolean" readonly="False">
              <description>If configured, YUI will use the the combo handler on the
Yahoo! CDN to pontentially reduce the number of http requests
required.</description>
            </attribute>
            <attribute name="comboBase" type="string" readonly="False">
              <description>Base path for the combo service</description>
            </attribute>
            <attribute name="data" type="object" readonly="False">
              <description>Data that is passed to all callbacks</description>
            </attribute>
            <attribute name="dirty" type="boolean" readonly="False">
              <description>Flag to indicate the dependency tree needs to be recomputed
if insert is called again.</description>
            </attribute>
            <attribute name="filter" type="string|{searchExp: string, replaceStr: string}" readonly="False">
              <description>A filter to apply to result urls.  This filter will modify the default
path for all modules.  The default path for the YUI library is the
minified version of the files (e.g., event-min.js).  The filter property
can be a predefined filter or a custom filter.  The valid predefined
filters are:

DEBUG
Selects the debug versions of the library (e.g., event-debug.js).
This option will automatically include the logger widget
RAW
Selects the non-minified version of the library (e.g., event.js).

You can also define a custom filter, which must be an object literal
containing a search expression and a replace string:
myFilter: {
'searchExp': "-min\\.js",
'replaceStr': "-debug.js"
}</description>
            </attribute>
            <attribute name="force" type="string[]" readonly="False">
              <description>A list of modules that should always be loaded, even
if they have already been inserted into the page.</description>
            </attribute>
            <attribute name="ignore" type="string[]" readonly="False">
              <description>A list of modules that should not be loaded, even if
they turn up in the dependency tree</description>
            </attribute>
            <attribute name="insertBefore" type="string|HTMLElement" readonly="False">
              <description>Node reference or id where new nodes should be inserted before</description>
            </attribute>
            <attribute name="inserted" type="{string: boolean}" readonly="False">
              <description>List of modules inserted by the utility</description>
            </attribute>
            <attribute name="loaded" type="{string: boolean}" readonly="False">
              <description>Set when beginning to compute the dependency tree.
Composed of what YAHOO reports to be loaded combined
with what has been loaded by the tool</description>
            </attribute>
            <attribute name="loadOptional" type="boolean" readonly="False">
              <description>Whether or not to load optional dependencies for
the requested modules</description>
            </attribute>
            <attribute name="moduleInfo" type="object" readonly="False">
              <description>The library metadata</description>
            </attribute>
            <attribute name="required" type="{string: boolean}" readonly="False">
              <description>The list of requested modules</description>
            </attribute>
            <attribute name="rollups" type="object" readonly="False">
              <description>List of rollup files found in the library metadata</description>
            </attribute>
            <attribute name="root" type="string" readonly="False">
              <description>Root path to prepend to module path for the combo
service</description>
            </attribute>
            <attribute name="scope" type="object" readonly="False">
              <description>The execution scope for all callbacks</description>
            </attribute>
            <attribute name="skin" type="object" readonly="False">
              <description>Provides the information used to skin the skinnable components.
The following skin definition would result in 'skin1' and 'skin2'
being loaded for calendar (if calendar was requested), and
'sam' for all other skinnable components:

skin: {
// The default skin, which is automatically applied if not
// overriden by a component-specific skin definition.
// Change this in to apply a different skin globally
defaultSkin: 'sam',
// This is combined with the loader base property to get
// the default root directory for a skin. ex:
// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/
base: 'assets/skins/',
// The name of the rollup css file for the skin
path: 'skin.css',
// The number of skinnable components requested that are
// required before using the rollup file rather than the
// individual component css files
rollup: 3,
// Any component-specific overrides can be specified here,
// making it possible to load different skins for different
// components.  It is possible to load more than one skin
// for a given component as well.
overrides: {
calendar: ['skin1', 'skin2']
}
}</description>
            </attribute>
            <attribute name="sorted" type="string[]" readonly="False">
              <description>All of the derived dependencies in sorted order, which
will be populated when either calculate() or insert()
is called</description>
            </attribute>
            <attribute name="timeout" type="int" readonly="False">
              <description>Timeout value in milliseconds.  If set, this value will be used by
the get utility.  the timeout event will fire if
a timeout occurs.</description>
            </attribute>
            <attribute name="varName" type="string" readonly="False">
              <description>The name of the variable in a sandbox or script node
(for external script support in Safari 2.x and earlier)
to reference when the load is complete.  If this variable
is not available in the specified scripts, the operation will
fail.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addSkin" returns="string">
              <description>Private property
Adds the skin def to the module info</description>
              <params>
                <param name="skin" type="string" optional="False">
                  <description>the name of the skin</description>
                </param>
                <param name="mod" type="string" optional="False">
                  <description>the name of the skin</description>
                </param>
              </params>
            </function>
            <function name="_explode" returns="void">
              <description>Private property
Inspects the required modules list looking for additional
dependencies.  Expands the required list to include all
required modules.  Called by calculate()</description>
            </function>
            <function name="_filter" returns="string">
              <description>Private property
Applies filter
method _filter</description>
            </function>
            <function name="_pushEvents" returns="void">
              <description>Private property
In IE, the onAvailable/onDOMReady events need help when Event is
loaded dynamically</description>
              <params>
                <param name="optional" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_reduce" returns="void">
              <description>Private property
Remove superceded modules and loaded modules.  Called by
calculate() after we have the mega list of all dependencies</description>
            </function>
            <function name="_rollup" returns="void">
              <description>Private property
Look for rollup packages to determine if all of the modules a
rollup supersedes are required.  If so, include the rollup to
help reduce the total number of connections required.  Called
by calculate()</description>
            </function>
            <function name="_setup" returns="void">
              <description>Private property
Investigates the current YUI configuration on the page.  By default,
modules already detected will not be loaded again unless a force
option is encountered.  Called by calculate()</description>
            </function>
            <function name="_skin" returns="void">
              <description>Sets up the requirements for the skin assets if any of the
requested modules are skinnable</description>
            </function>
            <function name="_sort" returns="void">
              <description>Private property
Sorts the dependency tree.  The last step of calculate()</description>
            </function>
            <function name="_url" returns="string">
              <description>Private property
Generates the full url for a module
method _url</description>
              <params>
                <param name="path" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addModule" returns="boolean">
              <description>Add a new module to the component metadata.

name:       required, the component name
type:       required, the component type (js or css)
path:       required, the path to the script from "base"
requires:   array of modules required by this component
optional:   array of optional modules for this component
supersedes: array of the modules this component replaces
after:      array of modules the components which, if present, should be sorted above this one
rollup:     the number of superseded modules required for automatic rollup
fullpath:   If fullpath is specified, this is used instead of the configured base + path
skinnable:  flag to determine if skin assets should automatically be pulled in</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="calculate" returns="void">
              <description>Calculates the dependency tree, the result is stored in the sorted
property</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatSkin" returns="string">
              <description>Returns the skin module name for the specified skin name.  If a
module name is supplied, the returned skin module name is
specific to the module passed in.</description>
              <params>
                <param name="skin" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="mod" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getProvides" returns="void">
              <description>Returns an object literal of the modules the supplied module satisfies</description>
              <params>
                <param name="name" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="notMe" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRequires" returns="void">
              <description>Returns an object containing properties for all modules required
in order to load the requested module</description>
              <params>
                <param name="mod" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insert" returns="void">
              <description>inserts the requested modules and their dependencies.
type can be "js" or "css".  Both script and
css are inserted if type is not provided.</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="loadNext" returns="void">
              <description>Executed every time a module is loaded, and if we are in a load
cycle, we attempt to load the next script.  Public so that it
is possible to call this if using a method other than
YAHOO.register to determine when scripts are fully loaded</description>
              <params>
                <param name="mname" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onFailure" returns="void">
              <description>Callback that will be executed if there is a failure</description>
            </function>
            <function name="onProgress" returns="void">
              <description>Callback that will be executed each time a new module is loaded</description>
            </function>
            <function name="onSuccess" returns="void">
              <description>Callback that will be executed when the loader is finished
with an insert</description>
            </function>
            <function name="onTimeout" returns="void">
              <description>Callback that will be executed if a timeout occurs</description>
            </function>
            <function name="parseSkin" returns="skin: string, module: string">
              <description>Reverses formatSkin, providing the skin name and
module name if the string matches the pattern for skins.</description>
              <params>
                <param name="mod" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="require" returns="void">
              <description>Add a requirement for one or more module</description>
              <params>
                <param name="what" type="string[] | string*" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sandbox" returns="void">
              <description>Interns the script for the requested modules.  The callback is
provided a reference to the sandboxed YAHOO object.  This only
applies to the script: css can not be sandboxed; css will be
loaded into the page normally if specified.</description>
              <params>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget" extends="Object" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="AutoComplete" type="YAHOO.widget.AutoComplete" readonly="False">
              <description>The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
auto completion widget.  Some key features:

Navigate with up/down arrow keys and/or mouse to pick a selection
The drop down container can "roll down" or "fly out" via configurable
animation
UI look-and-feel customizable through CSS, including container
attributes, borders, position, fonts, etc</description>
            </attribute>
            <attribute name="Axis" type="YAHOO.widget.Axis" readonly="False">
              <description>Defines a CartesianChart's vertical or horizontal axis.</description>
            </attribute>
            <attribute name="BarChart" type="YAHOO.widget.BarChart" readonly="False">
              <description>BarChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="BarSeries" type="YAHOO.widget.BarSeries" readonly="False">
              <description>BarSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="BaseCellEditor" type="YAHOO.widget.BaseCellEditor" readonly="False">
              <description>The BaseCellEditor class provides base functionality common to all inline cell
editors for a DataTable widget.</description>
            </attribute>
            <attribute name="Button" type="YAHOO.widget.Button" readonly="False">
              <description>The Button class creates a rich, graphical button.</description>
            </attribute>
            <attribute name="ButtonGroup" type="YAHOO.widget.ButtonGroup" readonly="False">
              <description>The ButtonGroup class creates a set of buttons that are mutually
exclusive; checking one button in the set will uncheck all others in the
button group.</description>
            </attribute>
            <attribute name="Calendar" type="YAHOO.widget.Calendar" readonly="False">
              <description>Calendar is the base class for the Calendar widget. In its most basic
implementation, it has the ability to render a calendar widget on the page
that can be manipulated to select a single date, move back and forth between
months and years.
To construct the placeholder for the calendar widget, the code is as
follows:

&lt;div id="calContainer"&gt;&lt;/div&gt;



NOTE: As of 2.4.0, the constructor's ID argument is optional.
The Calendar can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.Calendar("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.Calendar(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the Calendar's ID will be set to "calContainer_t".</description>
            </attribute>
            <attribute name="Calendar_Core" type="YAHOO.widget.Calendar_Core" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="Calendar2up" type="YAHOO.widget.Calendar2up" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CalendarGroup" type="YAHOO.widget.CalendarGroup" readonly="False">
              <description>YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
the ability to have multi-page calendar views that share a single dataset and are
dependent on each other.
The calendar group instance will refer to each of its elements using a 0-based index.
For example, to construct the placeholder for a calendar group widget with id "cal1" and
containerId of "cal1Container", the markup would be as follows:

&lt;div id="cal1Container_0"&gt;&lt;/div&gt;
&lt;div id="cal1Container_1"&gt;&lt;/div&gt;

The tables for the calendars ("cal1_0" and "cal1_1") will be inserted into those containers.

NOTE: As of 2.4.0, the constructor's ID argument is optional.
The CalendarGroup can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.CalendarGroup("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the CalendarGroup's ID will be set to "calContainer_t".</description>
            </attribute>
            <attribute name="CalendarNavigator" type="YAHOO.widget.CalendarNavigator" readonly="False">
              <description>The CalendarNavigator is used along with a Calendar/CalendarGroup to
provide a Month/Year popup navigation control, allowing the user to navigate
to a specific month/year in the Calendar/CalendarGroup without having to
scroll through months sequentially</description>
            </attribute>
            <attribute name="Carousel" type="YAHOO.widget.Carousel" readonly="False">
              <description>The Carousel widget.</description>
            </attribute>
            <attribute name="CartesianChart" type="YAHOO.widget.CartesianChart" readonly="False">
              <description>CartesianChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="CartesianSeries" type="YAHOO.widget.CartesianSeries" readonly="False">
              <description>Functionality common to most series appearing in cartesian charts.
Generally, a CartesianSeries object shouldn't be
instantiated directly. Instead, a subclass with a concrete implementation
should be used.</description>
            </attribute>
            <attribute name="CategoryAxis" type="YAHOO.widget.CategoryAxis" readonly="False">
              <description>A type of axis that displays items in categories.</description>
            </attribute>
            <attribute name="CellEditor" type="YAHOO.widget.CellEditor" readonly="False">
              <description>Factory class for instantiating a BaseCellEditor subclass.</description>
            </attribute>
            <attribute name="Chart" type="YAHOO.widget.Chart" readonly="False">
              <description>Chart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="CheckboxCellEditor" type="YAHOO.widget.CheckboxCellEditor" readonly="False">
              <description>The CheckboxCellEditor class provides functionality for inline editing
DataTable cell data with checkboxes.</description>
            </attribute>
            <attribute name="ColorPicker" type="YAHOO.widget.ColorPicker" readonly="False">
              <description>A widget to select colors</description>
            </attribute>
            <attribute name="Column" type="YAHOO.widget.Column" readonly="False">
              <description>The Column class defines and manages attributes of DataTable Columns</description>
            </attribute>
            <attribute name="ColumnChart" type="YAHOO.widget.ColumnChart" readonly="False">
              <description>ColumnChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="ColumnSeries" type="YAHOO.widget.ColumnSeries" readonly="False">
              <description>ColumnSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="ColumnSet" type="YAHOO.widget.ColumnSet" readonly="False">
              <description>The ColumnSet class defines and manages a DataTable's Columns,
including nested hierarchies and access to individual Column instances.</description>
            </attribute>
            <attribute name="ContainerEffect" type="YAHOO.widget.ContainerEffect" readonly="False">
              <description>ContainerEffect encapsulates animation transitions that are executed when
an Overlay is shown or hidden.</description>
            </attribute>
            <attribute name="ContextMenu" type="YAHOO.widget.ContextMenu" readonly="False">
              <description>Creates a list of options or commands which are made visible in response to
an HTML element's "contextmenu" event ("mousedown" for Opera).</description>
            </attribute>
            <attribute name="ContextMenuItem" type="YAHOO.widget.ContextMenuItem" readonly="False">
              <description>Creates an item for a context menu.</description>
            </attribute>
            <attribute name="DataTable" type="YAHOO.widget.DataTable" readonly="False">
              <description>DataTable class for the YUI DataTable widget.</description>
            </attribute>
            <attribute name="DateCellEditor" type="YAHOO.widget.DateCellEditor" readonly="False">
              <description>The DataCellEditor class provides functionality for inline editing
DataTable cell data with a YUI Calendar.</description>
            </attribute>
            <attribute name="DateMath" type="YAHOO.widget.DateMath" readonly="False">
              <description>YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility
used for adding, subtracting, and comparing dates.</description>
            </attribute>
            <attribute name="DateNode" type="YAHOO.widget.DateNode" readonly="False">
              <description>A Date-specific implementation that differs from TextNode in that it uses
YAHOO.widget.Calendar as an in-line editor, if available
If Calendar is not available, it behaves as a plain TextNode.</description>
            </attribute>
            <attribute name="Dialog" type="YAHOO.widget.Dialog" readonly="False">
              <description>Dialog is an implementation of Panel that can be used to submit form
data.


Built-in functionality for buttons with event handlers is included.
If the optional YUI Button dependancy is included on the page, the buttons
created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
will be created.


Forms can be processed in 3 ways -- via an asynchronous Connection utility call,
a simple form POST or GET, or manually. The YUI Connection utility should be
included if you're using the default "async" postmethod, but is not required if
you're using any of the other postmethod values.</description>
            </attribute>
            <attribute name="DropdownCellEditor" type="YAHOO.widget.DropdownCellEditor" readonly="False">
              <description>The DropdownCellEditor class provides functionality for inline editing
DataTable cell data a SELECT element.</description>
            </attribute>
            <attribute name="DualSlider" type="YAHOO.widget.DualSlider" readonly="False">
              <description>A slider with two thumbs, one that represents the min value and
the other the max.  Actually a composition of two sliders, both with
the same background.  The constraints for each slider are adjusted
dynamically so that the min value of the max slider is equal or greater
to the current value of the min slider, and the max value of the min
slider is the current value of the max slider.
Constructor assumes both thumbs are positioned absolutely at the 0 mark on
the background.</description>
            </attribute>
            <attribute name="Editor" type="YAHOO.widget.Editor" readonly="False">
              <description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
            </attribute>
            <attribute name="EditorInfo" type="YAHOO.widget.EditorInfo" readonly="False">
              <description>Singleton object used to track the open window objects and panels across the various open editors</description>
            </attribute>
            <attribute name="EditorWindow" type="YAHOO.widget.EditorWindow" readonly="False">
              <description>Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.
This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.</description>
            </attribute>
            <attribute name="FlashAdapter" type="YAHOO.widget.FlashAdapter" readonly="False">
              <description>Wraps Flash embedding functionality and allows communication with SWF through
attributes.</description>
            </attribute>
            <attribute name="HTMLNode" type="YAHOO.widget.HTMLNode" readonly="False">
              <description>This implementation takes either a string or object for the
oData argument.  If is it a string, it will use it for the display
of this node (and it can contain any html code).  If the parameter
is an object,it looks for a parameter called "html" that will be
used for this node's display.</description>
            </attribute>
            <attribute name="ImageCropper" type="YAHOO.widget.ImageCropper" readonly="False">
              <description>Creates a Image Cropper control.</description>
            </attribute>
            <attribute name="Layout" type="YAHOO.widget.Layout" readonly="False">
              <description>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</description>
            </attribute>
            <attribute name="LayoutUnit" type="YAHOO.widget.LayoutUnit" readonly="False">
              <description>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</description>
            </attribute>
            <attribute name="LineChart" type="YAHOO.widget.LineChart" readonly="False">
              <description>LineChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="LineSeries" type="YAHOO.widget.LineSeries" readonly="False">
              <description>LineSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="Logger" type="YAHOO.widget.Logger" readonly="False">
              <description>The singleton Logger class provides core log management functionality. Saves
logs written through the global YAHOO.log function or written by a LogWriter
instance. Provides access to logs for reading by a LogReader instance or
native browser console such as the Firebug extension to Firefox or Safari's
JavaScript console through integration with the console.log() method.</description>
            </attribute>
            <attribute name="Menu" type="YAHOO.widget.Menu" readonly="False">
              <description>The Menu class creates a container that holds a vertical list representing
a set of options or commands.  Menu is the base class for all
menu containers.</description>
            </attribute>
            <attribute name="MenuBar" type="YAHOO.widget.MenuBar" readonly="False">
              <description>Horizontal collection of items, each of which can contain a submenu.</description>
            </attribute>
            <attribute name="MenuBarItem" type="YAHOO.widget.MenuBarItem" readonly="False">
              <description>Creates an item for a menu bar.</description>
            </attribute>
            <attribute name="MenuItem" type="YAHOO.widget.MenuItem" readonly="False">
              <description>Creates an item for a menu.</description>
            </attribute>
            <attribute name="MenuManager" type="YAHOO.widget.MenuManager" readonly="False">
              <description>Singleton that manages a collection of all menus and menu items.  Listens
for DOM events at the document level and dispatches the events to the
corresponding menu or menu item.</description>
            </attribute>
            <attribute name="MenuNode" type="YAHOO.widget.MenuNode" readonly="False">
              <description>A menu-specific implementation that differs from TextNode in that only
one sibling can be expanded at a time.</description>
            </attribute>
            <attribute name="Module" type="YAHOO.widget.Module" readonly="False">
              <description>Module is a JavaScript representation of the Standard Module Format.
Standard Module Format is a simple standard for markup containers where
child nodes representing the header, body, and footer of the content are
denoted using the CSS classes "hd", "bd", and "ft" respectively.
Module is the base class for all other classes in the YUI
Container package.</description>
            </attribute>
            <attribute name="Node" type="YAHOO.widget.Node" readonly="False">
              <description>The base class for all tree nodes.  The node's presentation and behavior in
response to mouse events is handled in Node subclasses.</description>
            </attribute>
            <attribute name="NumericAxis" type="YAHOO.widget.NumericAxis" readonly="False">
              <description>A type of axis whose units are measured in numeric values.</description>
            </attribute>
            <attribute name="Overlay" type="YAHOO.widget.Overlay" readonly="False">
              <description>Overlay is a Module that is absolutely positioned above the page flow. It
has convenience methods for positioning and sizing, as well as options for
controlling zIndex and constraining the Overlay's position to the current
visible viewport. Overlay also contains a dynamicly generated IFRAME which
is placed beneath it for Internet Explorer 6 and 5.x so that it will be
properly rendered above SELECT elements.</description>
            </attribute>
            <attribute name="OverlayManager" type="YAHOO.widget.OverlayManager" readonly="False">
              <description>OverlayManager is used for maintaining the focus status of
multiple Overlays.</description>
            </attribute>
            <attribute name="Paginator" type="YAHOO.widget.Paginator" readonly="False">
              <description>Instantiate a Paginator, passing a configuration object to the contructor.
The configuration object should contain the following properties:

rowsPerPage : n (int)
totalRecords : n (int or Paginator.VALUE_UNLIMITED)
containers : id | el | arr (HTMLElement reference, its id, or an array of either)</description>
            </attribute>
            <attribute name="Panel" type="YAHOO.widget.Panel" readonly="False">
              <description>Panel is an implementation of Overlay that behaves like an OS window,
with a draggable header and an optional close icon at the top right.</description>
            </attribute>
            <attribute name="PieChart" type="YAHOO.widget.PieChart" readonly="False">
              <description>PieChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="PieSeries" type="YAHOO.widget.PieSeries" readonly="False">
              <description>PieSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="ProfilerViewer" type="YAHOO.widget.ProfilerViewer" readonly="False">
              <description>A widget to view YUI Profiler output.</description>
            </attribute>
            <attribute name="RadioCellEditor" type="YAHOO.widget.RadioCellEditor" readonly="False">
              <description>The RadioCellEditor class provides functionality for inline editing
DataTable cell data with radio buttons.</description>
            </attribute>
            <attribute name="Record" type="YAHOO.widget.Record" readonly="False">
              <description>The Record class defines a DataTable record.</description>
            </attribute>
            <attribute name="RecordSet" type="YAHOO.widget.RecordSet" readonly="False">
              <description>A RecordSet defines and manages a set of Records.</description>
            </attribute>
            <attribute name="RootNode" type="YAHOO.widget.RootNode" readonly="False">
              <description>A custom YAHOO.widget.Node that handles the unique nature of
the virtual, presentationless root node.</description>
            </attribute>
            <attribute name="ScrollingDataTable" type="YAHOO.widget.ScrollingDataTable" readonly="False">
              <description>The ScrollingDataTable class extends the DataTable class to provide
functionality for x-scrolling, y-scrolling, and xy-scrolling.</description>
            </attribute>
            <attribute name="Series" type="YAHOO.widget.Series" readonly="False">
              <description>Functionality common to most series. Generally, a Series
object shouldn't be instantiated directly. Instead, a subclass with a
concrete implementation should be used.</description>
            </attribute>
            <attribute name="SimpleDialog" type="YAHOO.widget.SimpleDialog" readonly="False">
              <description>SimpleDialog is a simple implementation of Dialog that can be used to
submit a single value. Forms can be processed in 3 ways -- via an
asynchronous Connection utility call, a simple form POST or GET,
or manually.</description>
            </attribute>
            <attribute name="SimpleEditor" type="YAHOO.widget.SimpleEditor" readonly="False">
              <description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
            </attribute>
            <attribute name="Slider" type="YAHOO.widget.Slider" readonly="False">
              <description>A DragDrop implementation that can be used as a background for a
slider.  It takes a reference to the thumb instance
so it can delegate some of the events to it.  The goal is to make the
thumb jump to the location on the background when the background is
clicked.</description>
            </attribute>
            <attribute name="SliderThumb" type="YAHOO.widget.SliderThumb" readonly="False">
              <description>A drag and drop implementation to be used as the thumb of a slider.</description>
            </attribute>
            <attribute name="StackedBarChart" type="YAHOO.widget.StackedBarChart" readonly="False">
              <description>StackedBarChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="StackedBarSeries" type="YAHOO.widget.StackedBarSeries" readonly="False">
              <description>StackedBarSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="StackedColumnChart" type="YAHOO.widget.StackedColumnChart" readonly="False">
              <description>StackedColumnChart class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="StackedColumnSeries" type="YAHOO.widget.StackedColumnSeries" readonly="False">
              <description>StackedColumnSeries class for the YUI Charts widget.</description>
            </attribute>
            <attribute name="Tab" type="YAHOO.widget.Tab" readonly="False">
              <description>A representation of a Tab's label and content.</description>
            </attribute>
            <attribute name="TabView" type="YAHOO.widget.TabView" readonly="False">
              <description>A widget to control tabbed views.</description>
            </attribute>
            <attribute name="TextareaCellEditor" type="YAHOO.widget.TextareaCellEditor" readonly="False">
              <description>The TextareaCellEditor class provides functionality for inline editing
DataTable cell data with a TEXTAREA element.</description>
            </attribute>
            <attribute name="TextboxCellEditor" type="YAHOO.widget.TextboxCellEditor" readonly="False">
              <description>The TextboxCellEditor class provides functionality for inline editing
DataTable cell data with an INPUT TYPE=TEXT element.</description>
            </attribute>
            <attribute name="TextNode" type="YAHOO.widget.TextNode" readonly="False">
              <description>The default node presentation.  The first parameter should be
either a string that will be used as the node's label, or an object
that has at least a string property called label.  By default,  clicking the
label will toggle the expanded/collapsed state of the node.  By
setting the href property of the instance, this behavior can be
changed so that the label will go to the specified href.</description>
            </attribute>
            <attribute name="TimeAxis" type="YAHOO.widget.TimeAxis" readonly="False">
              <description>A type of axis whose units are measured in time-based values.</description>
            </attribute>
            <attribute name="Toolbar" type="YAHOO.widget.Toolbar" readonly="False">
              <description>Provides a rich toolbar widget based on the button and menu widgets</description>
            </attribute>
            <attribute name="ToolbarButton" type="YAHOO.widget.ToolbarButton" readonly="False">
              <description>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's ToolbarProvides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</description>
            </attribute>
            <attribute name="ToolbarButtonAdvanced" type="YAHOO.widget.ToolbarButtonAdvanced" readonly="False">
              <description>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</description>
            </attribute>
            <attribute name="Tooltip" type="YAHOO.widget.Tooltip" readonly="False">
              <description>Tooltip is an implementation of Overlay that behaves like an OS tooltip,
displaying when the user mouses over a particular element, and
disappearing on mouse out.</description>
            </attribute>
            <attribute name="TreeView" type="YAHOO.widget.TreeView" readonly="False">
              <description>Contains the tree view state data and the root node.</description>
            </attribute>
            <attribute name="TVAnim" type="YAHOO.widget.TVAnim" readonly="False">
              <description>A static factory class for tree view expand/collapse animations</description>
            </attribute>
            <attribute name="TVFadeIn" type="YAHOO.widget.TVFadeIn" readonly="False">
              <description>A 1/2 second fade-in animation.</description>
            </attribute>
            <attribute name="TVFadeOut" type="YAHOO.widget.TVFadeOut" readonly="False">
              <description>A 1/2 second fade out animation.</description>
            </attribute>
            <attribute name="Uploader" type="YAHOO.widget.Uploader" readonly="False">
              <description>Uploader class for the YUI Uploader component.</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.widget.AutoComplete" extends="Object" private="True">
          <description>The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
auto completion widget.  Some key features:

Navigate with up/down arrow keys and/or mouse to pick a selection
The drop down container can "roll down" or "fly out" via configurable
animation
UI look-and-feel customizable through CSS, including container
attributes, borders, position, fonts, etc</description>
          <attributes>
            <attribute name="_bContainerOpen" type="Boolean" readonly="False">
              <description>Private property
Whether or not the results container is currently open.</description>
            </attribute>
            <attribute name="_bFocused" type="Boolean" readonly="False">
              <description>Private property
Whether or not the input field is currently in focus. If query results come back
but the user has already moved on, do not proceed with auto complete behavior.</description>
            </attribute>
            <attribute name="_bItemSelected" type="Boolean" readonly="False">
              <description>Private property
Whether or not an item has been selected since the container was populated
with results. Reset to false by _populateList, and set to true when item is
selected.</description>
            </attribute>
            <attribute name="_bOverContainer" type="Boolean" readonly="False">
              <description>Private property
Whether or not the mouse is currently over the results
container. This is necessary in order to prevent clicks on container items
from being text input field blur events.</description>
            </attribute>
            <attribute name="_elBody" type="HTMLElement" readonly="False">
              <description>Private property
Reference to body element within content element.</description>
            </attribute>
            <attribute name="_elContainer" type="HTMLElement" readonly="False">
              <description>Private property
Container DOM element.</description>
            </attribute>
            <attribute name="_elContent" type="HTMLElement" readonly="False">
              <description>Private property
Reference to content element within container element.</description>
            </attribute>
            <attribute name="_elCurListItem" type="HTMLElement" readonly="False">
              <description>Private property
Pointer to the currently highlighted &lt;li&gt; element in the container.</description>
            </attribute>
            <attribute name="_elFooter" type="HTMLElement" readonly="False">
              <description>Private property
Reference to footer element within content element.</description>
            </attribute>
            <attribute name="_elHeader" type="HTMLElement" readonly="False">
              <description>Private property
Reference to header element within content element.</description>
            </attribute>
            <attribute name="_elIFrame" type="HTMLElement" readonly="False">
              <description>Private property
Reference to iframe element within container element.</description>
            </attribute>
            <attribute name="_elList" type="HTMLElement" readonly="False">
              <description>Private property
Internal reference to &lt;ul&gt; elements that contains query results within the
results container.</description>
            </attribute>
            <attribute name="_elShadow" type="HTMLElement" readonly="False">
              <description>Private property
Reference to shadow element within container element.</description>
            </attribute>
            <attribute name="_elTextbox" type="HTMLElement" readonly="False">
              <description>Private property
Text input field DOM element.</description>
            </attribute>
            <attribute name="_iFrameSrc" type="String" readonly="False">
              <description>Private property
Src to iFrame used when useIFrame = true. Supports implementations over SSL
as well.</description>
            </attribute>
            <attribute name="_nDelayID" type="Number" readonly="False">
              <description>Private property
Delay timeout ID.</description>
            </attribute>
            <attribute name="_nDisplayedItems" type="Number" readonly="False">
              <description>Private property
Number of &lt;li&gt; elements currently displayed in results container.</description>
            </attribute>
            <attribute name="_nIndex" type="Number" readonly="False">
              <description>Private property
Internal class variable to index multiple AutoComplete instances.</description>
            </attribute>
            <attribute name="_nKeyCode" type="Number" readonly="False">
              <description>Private property
Key code of the last key pressed in textbox.</description>
            </attribute>
            <attribute name="_nTypeAheadDelayID" type="Number" readonly="False">
              <description>Private property
TypeAhead delay timeout ID.</description>
            </attribute>
            <attribute name="_oAnim" type="Boolean" readonly="False">
              <description>Private property
Animation instance for container expand/collapse.</description>
            </attribute>
            <attribute name="_queryInterval" type="Object" readonly="False">
              <description>Private property
For users typing via certain IMEs, queries must be triggered by intervals,
since key events yet supported across all browsers for all IMEs.</description>
            </attribute>
            <attribute name="_sCurQuery" type="String" readonly="False">
              <description>Private property
Current query string</description>
            </attribute>
            <attribute name="_sInitInputValue" type="String" readonly="False">
              <description>Private property
Stores initial input value used to determine if textboxChangeEvent should be fired.</description>
            </attribute>
            <attribute name="_sName" type="String" readonly="False">
              <description>Private property
Name of AutoComplete instance.</description>
            </attribute>
            <attribute name="_sPastSelections" type="String" readonly="False">
              <description>Private property
Selections from previous queries (for saving delimited queries).</description>
            </attribute>
            <attribute name="allowBrowserAutocomplete" type="Boolean" readonly="False">
              <description>Whether or not to allow browsers to cache user-typed input in the input
field. Disabling this feature will prevent the widget from setting the
autocomplete="off" on the input field. When autocomplete="off"
and users click the back button after form submission, user-typed input can
be prefilled by the browser from its cache. This caching of user input may
not be desired for sensitive data, such as credit card numbers, in which
case, implementers should consider setting allowBrowserAutocomplete to false.</description>
            </attribute>
            <attribute name="alwaysShowContainer" type="Boolean" readonly="False">
              <description>Enabling this feature prevents the toggling of the container to a collapsed state.
Setting to true does not automatically trigger the opening of the container.
Implementers are advised to pre-load the container with an explicit "sendQuery()" call.</description>
            </attribute>
            <attribute name="animHoriz" type="Boolean" readonly="False">
              <description>Whether or not to animate the expansion/collapse of the results container in the
horizontal direction.</description>
            </attribute>
            <attribute name="animSpeed" type="Number" readonly="False">
              <description>Speed of container expand/collapse animation, in seconds..</description>
            </attribute>
            <attribute name="animVert" type="Boolean" readonly="False">
              <description>Whether or not to animate the expansion/collapse of the results container in the
vertical direction.</description>
            </attribute>
            <attribute name="applyLocalFilter" type="Boolean" readonly="False">
              <description>By default, results from local DataSources will pass through the filterResults
method to apply a client-side matching algorithm.</description>
            </attribute>
            <attribute name="autoHighlight" type="Boolean" readonly="False">
              <description>Whether or not the first item in results container should be automatically highlighted
on expand.</description>
            </attribute>
            <attribute name="dataSource" type="YAHOO.widget.DataSource" readonly="False">
              <description>The DataSource object that encapsulates the data used for auto completion.
This object should be an inherited object from YAHOO.widget.DataSource.</description>
            </attribute>
            <attribute name="delimChar" type="String | String[]" readonly="False">
              <description>Query delimiter. A single character separator for multiple delimited
selections. Multiple delimiter characteres may be defined as an array of
strings. A null value or empty string indicates that query results cannot
be delimited. This feature is not recommended if you need forceSelection to
be true.</description>
            </attribute>
            <attribute name="forceSelection" type="Boolean" readonly="False">
              <description>Whether or not to force the user's selection to match one of the query
results. Enabling this feature essentially transforms the input field into a
&lt;select&gt; field. This feature is not recommended with delimiter character(s)
defined.</description>
            </attribute>
            <attribute name="highlightClassName" type="String" readonly="False">
              <description>Class name of a highlighted item within results container.</description>
            </attribute>
            <attribute name="maxResultsDisplayed" type="Number" readonly="False">
              <description>Maximum number of results to display in results container.</description>
            </attribute>
            <attribute name="minQueryLength" type="Number" readonly="False">
              <description>Number of characters that must be entered before querying for results. A negative value
effectively turns off the widget. A value of 0 allows queries of null or empty string
values.</description>
            </attribute>
            <attribute name="prehighlightClassName" type="String" readonly="False">
              <description>Class name of a pre-highlighted item within results container.</description>
            </attribute>
            <attribute name="queryDelay" type="Number" readonly="False">
              <description>Number of seconds to delay before submitting a query request.  If a query
request is received before a previous one has completed its delay, the
previous request is cancelled and the new request is set to the delay. If
typeAhead is also enabled, this value must always be less than the typeAheadDelay
in order to avoid certain race conditions.</description>
            </attribute>
            <attribute name="queryInterval" type="Number" readonly="False">
              <description>When IME usage is detected, AutoComplete will switch to querying the input
value at the given interval rather than per key event.</description>
            </attribute>
            <attribute name="queryMatchCase" type="Boolean" readonly="False">
              <description>When applyLocalFilter is true, the local filtering algorthim can have case sensitivity
enabled.</description>
            </attribute>
            <attribute name="queryMatchContains" type="Boolean" readonly="False">
              <description>When applyLocalFilter is true, results can  be locally filtered to return
matching strings that "contain" the query string rather than simply "start with"
the query string.</description>
            </attribute>
            <attribute name="queryMatchSubset" type="Boolean" readonly="False">
              <description>Enables query subset matching. When the DataSource's cache is enabled and queryMatchSubset is
true, substrings of queries will return matching cached results. For
instance, if the first query is for "abc" susequent queries that start with
"abc", like "abcd", will be queried against the cache, and not the live data
source. Recommended only for DataSources that return comprehensive results
for queries with very few characters.</description>
            </attribute>
            <attribute name="queryQuestionMark" type="Boolean" readonly="False">
              <description>For XHR DataSources, AutoComplete will automatically insert a "?" between the server URI and
the "query" param/value pair. To prevent this behavior, implementers should
set this value to false. To more fully customize the query syntax, implementers
should override the generateRequest() method.</description>
            </attribute>
            <attribute name="resultTypeList" type="Boolean" readonly="False">
              <description>For backward compatibility to pre-2.6.0 formatResults() signatures, setting
resultsTypeList to true will take each object literal result returned by
DataSource and flatten into an array.</description>
            </attribute>
            <attribute name="suppressInputUpdate" type="Boolean" readonly="False">
              <description>Whether or not the input field should be updated with selections.</description>
            </attribute>
            <attribute name="typeAhead" type="Boolean" readonly="False">
              <description>If autohighlight is enabled, whether or not the input field should be automatically updated
with the first query result as the user types, auto-selecting the substring portion
of the first result that the user has not yet typed.</description>
            </attribute>
            <attribute name="typeAheadDelay" type="Number" readonly="False">
              <description>If typeAhead is true, number of seconds to delay before updating input with
typeAhead value. In order to prevent certain race conditions, this value must
always be greater than the queryDelay.</description>
            </attribute>
            <attribute name="useIFrame" type="Boolean" readonly="False">
              <description>Whether or not to use an iFrame to layer over Windows form elements in
IE. Set to true only when the results container will be on top of a
&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,
5.5 &lt; IE &lt; 7).</description>
            </attribute>
            <attribute name="useShadow" type="Boolean" readonly="False">
              <description>Whether or not the results container should have a shadow.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="__initProps" returns="void">
              <description>Private property
Updates and validates latest public config properties.</description>
            </function>
            <function name="_clearInterval" returns="void">
              <description>Private property
Cancels text input detection by intervals.</description>
              <params>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_clearSelection" returns="void">
              <description>Private property
When forceSelection is true and the user attempts
leave the text input box without selecting an item from the query results,
the user selection is cleared.</description>
            </function>
            <function name="_enableIntervalDetection" returns="void">
              <description>Private property
Enables interval detection for IME support.</description>
            </function>
            <function name="_extractQuery" returns="Object">
              <description>Private property
Extracts rightmost query from delimited string.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_focus" returns="void">
              <description>Private property
Focuses input field.</description>
            </function>
            <function name="_initContainerEl" returns="void">
              <description>Private property
Initializes the results container once at object creation</description>
            </function>
            <function name="_initContainerHelperEls" returns="void">
              <description>Private property
Initializes the results container helpers if they are enabled and do
not exist</description>
            </function>
            <function name="_initListEl" returns="void">
              <description>Private property
Clears out contents of container body and creates up to
YAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an
&lt;ul&gt; element.</description>
            </function>
            <function name="_isIgnoreKey" returns="Boolean">
              <description>Private property
Whether or not key is functional or should be ignored. Note that the right
arrow key is NOT an ignored key since it triggers queries for certain intl
charsets.</description>
              <params>
                <param name="nKeycode" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_jumpSelection" returns="void">
              <description>Private property
If an item is highlighted in the container, the right arrow key jumps to the
end of the textbox and selects the highlighted item, otherwise the container
is closed.</description>
            </function>
            <function name="_moveSelection" returns="void">
              <description>Private property
Triggered by up and down arrow keys, changes the current highlighted
&lt;li&gt; element item. Scrolls container if necessary.</description>
              <params>
                <param name="nKeyCode" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onContainerClick" returns="void">
              <description>Private property
Handles container click events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onContainerMouseout" returns="void">
              <description>Private property
Handles container mouseout events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onContainerMouseover" returns="void">
              <description>Private property
Handles container mouseover events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onContainerResize" returns="void">
              <description>Private property
Handles container resize events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onContainerScroll" returns="void">
              <description>Private property
Handles container scroll events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onInterval" returns="void">
              <description>Private property
Enables query triggers based on text input detection by intervals (rather
than by key events).</description>
            </function>
            <function name="_onTextboxBlur" returns="void">
              <description>Private property
Handles text input box losing focus.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTextboxFocus" returns="void">
              <description>Private property
Handles text input box receiving focus.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTextboxKeyDown" returns="void">
              <description>Private property
Handles textbox keydown events of functional keys, mainly for UI behavior.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTextboxKeyPress" returns="void">
              <description>Private property
Handles textbox keypress events.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTextboxKeyUp" returns="void">
              <description>Private property
Handles textbox keyup events to trigger queries.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onWindowUnload" returns="void">
              <description>Private property
Handles window unload event.</description>
              <params>
                <param name="v" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.AutoComplete" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_populateList" returns="void">
              <description>Private property
Populates the array of &lt;li&gt; elements in the container with query
results.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_selectItem" returns="void">
              <description>Private property
Selects a result item from the container</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_selectText" returns="void">
              <description>Private property
Selects text in the input field.</description>
              <params>
                <param name="elTextbox" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="nStart" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="nEnd" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_sendQuery" returns="void">
              <description>Private property
Makes query request to the DataSource.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_textMatchesOption" returns="HTMLElement">
              <description>Private property
Whether or not user-typed value in the text input box matches any of the
query results.</description>
            </function>
            <function name="_toggleContainer" returns="void">
              <description>Private property
Animates expansion or collapse of the container.</description>
              <params>
                <param name="bShow" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toggleContainerHelpers" returns="void">
              <description>Private property
Syncs results container with its helpers.</description>
              <params>
                <param name="bShow" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toggleHighlight" returns="void">
              <description>Private property
Toggles the highlight on or off for an item in the container, and also cleans
up highlighting of any previous item.</description>
              <params>
                <param name="elNewListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_togglePrehighlight" returns="void">
              <description>Private property
Toggles the pre-highlight on or off for an item in the container.</description>
              <params>
                <param name="elNewListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_typeAhead" returns="void">
              <description>Private property
Updates in the text input box with the first query result as the user types,
selecting the substring that the user has not typed.</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateValue" returns="void">
              <description>Private property
Updates the text input box value with selected query result. If a delimiter
has been defined, then the value gets appended with the delimiter.</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_cloneObject" returns="void">
              <description>Private property
Clones object literal or array of object literals.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapseContainer" returns="void">
              <description>Collapses container.</description>
            </function>
            <function name="destroy" returns="void">
              <description>Nulls out the entire AutoComplete instance and related objects, removes attached
event listeners, and clears out DOM elements inside the container. After
calling this method, the instance reference should be expliclitly nulled by
implementer, as in myAutoComplete = null. Use with caution!</description>
            </function>
            <function name="doBeforeExpandContainer" returns="Boolean">
              <description>Overridable method called before container expands allows implementers to access data
and DOM elements.</description>
              <params>
                <param name="elTextbox" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aResults" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeLoadData" returns="Boolean">
              <description>Overridable method called before container is loaded with result data.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeSendQuery" returns="void">
              <description>
              </description>
            </function>
            <function name="filterResults" returns="Object">
              <description>Executed by DataSource (within DataSource scope via doBeforeCallback()) to
filter results through a simple client-side matching algorithm.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oFullResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParsedResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oCallback" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatResult" returns="String">
              <description>Overridable method that returns HTML markup for one result to be populated
as innerHTML of an &lt;LI&gt; element.</description>
              <params>
                <param name="oResultData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sResultMatch" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="generateRequest" returns="MIXED">
              <description>A function that converts an AutoComplete query into a request value which is then
passed to the DataSource's sendRequest method in order to retrieve data for
the query. By default, returns a String with the syntax: "query={query}"
Implementers can customize this method for custom request syntaxes.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getContainerEl" returns="HTMLELement">
              <description>Returns DOM reference to container element.</description>
            </function>
            <function name="getInputEl" returns="HTMLELement">
              <description>Returns DOM reference to input element.</description>
            </function>
            <function name="getListEl" returns="HTMLElement[]">
              <description>Public accessor to the &lt;ul&gt; element that displays query results within the results container.</description>
            </function>
            <function name="getListItemData" returns="Object">
              <description>Public accessor to the result data associated with a given &lt;li&gt; result.</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getListItemIndex" returns="Number">
              <description>Public accessor to the index of the associated with a given &lt;li&gt; result.</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getListItemMatch" returns="String">
              <description>Public accessor to the matching string associated with a given &lt;li&gt; result.</description>
              <params>
                <param name="elListItem" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getListItems" returns="void">
              <description>
              </description>
            </function>
            <function name="getSubsetMatches" returns="Object">
              <description>Handles subset matching for when queryMatchSubset is enabled.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleResponse" returns="void">
              <description>Handles response for display. This is the callback function method passed to
YAHOO.util.DataSourceBase#sendRequest so results from the DataSource are
returned to the AutoComplete instance.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isContainerOpen" returns="Boolean">
              <description>Returns true if container is in an expanded state, false otherwise.</description>
            </function>
            <function name="isFocused" returns="Boolean">
              <description>Returns true if widget instance is currently focused.</description>
            </function>
            <function name="preparseRawResponse" returns="Object">
              <description>Executed by DataSource (within DataSource scope via doBeforeParseData()) to
handle responseStripAfter cleanup.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sendQuery" returns="void">
              <description>Makes query request to the DataSource.</description>
              <params>
                <param name="sQuery" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setBody" returns="void">
              <description>Sets HTML markup for the results container body. This markup will be
inserted within a &lt;div&gt; tag with a class of "yui-ac-bd".</description>
              <params>
                <param name="sBody" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFooter" returns="void">
              <description>Sets HTML markup for the results container footer. This markup will be
inserted within a &lt;div&gt; tag with a class of "yui-ac-ft".</description>
              <params>
                <param name="sFooter" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHeader" returns="void">
              <description>Sets HTML markup for the results container header. This markup will be
inserted within a &lt;div&gt; tag with a class of "yui-ac-hd".</description>
              <params>
                <param name="sHeader" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the AutoComplete instance.</description>
            </function>
            <function name="AutoComplete" returns="YAHOO.widget.AutoComplete">
              <description>Class YAHOO.widget.AutoComplete constructor
The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
auto completion widget.  Some key features:

Navigate with up/down arrow keys and/or mouse to pick a selection
The drop down container can "roll down" or "fly out" via configurable
animation
UI look-and-feel customizable through CSS, including container
attributes, borders, position, fonts, etc</description>
              <params>
                <param name="elInput" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elInput" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elContainer" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oDataSource" type="YAHOO.widget.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Axis" extends="Object" private="True">
          <description>Defines a CartesianChart's vertical or horizontal axis.</description>
          <attributes>
            <attribute name="labelFunction" type="String" readonly="False">
              <description>A string reference to the globally-accessible function that may be called to
determine each of the label values for this axis. Also accepts function references.</description>
            </attribute>
            <attribute name="labelSpacing" type="Number" readonly="False">
              <description>The space, in pixels, between labels on an axis.</description>
            </attribute>
            <attribute name="reverse" type="Boolean" readonly="False">
              <description>If true, the items on the axis will be drawn in opposite direction.</description>
            </attribute>
            <attribute name="title" type="String" readonly="False">
              <description>The text that will appear next to the axis to indicate information about the data that it displays.</description>
            </attribute>
            <attribute name="type" type="String" readonly="False">
              <description>The type of axis.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Axis" returns="YAHOO.widget.Axis">
              <description>Class YAHOO.widget.Axis constructor
Defines a CartesianChart's vertical or horizontal axis.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.BarChart" extends="Object" private="True">
          <description>BarChart class for the YUI Charts widget.</description>
          <functions>
            <function name="BarChart" returns="YAHOO.widget.BarChart">
              <description>Class YAHOO.widget.BarChart constructor
BarChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.BarSeries" extends="Object" private="True">
          <description>BarSeries class for the YUI Charts widget.</description>
          <functions>
            <function name="BarSeries" returns="YAHOO.widget.BarSeries">
              <description>Class YAHOO.widget.BarSeries constructor
BarSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.BaseCellEditor" extends="Object" private="True">
          <description>The BaseCellEditor class provides base functionality common to all inline cell
editors for a DataTable widget.</description>
          <attributes>
            <attribute name="_elCancelBtn" type="HTMLElement" readonly="False">
              <description>Private property
Reference to Cancel button, if available.</description>
            </attribute>
            <attribute name="_elContainer" type="HTMLElement" readonly="False">
              <description>Private property
Container for inline editor.</description>
            </attribute>
            <attribute name="_elSaveBtn" type="HTMLElement" readonly="False">
              <description>Private property
Reference to Save button, if available.</description>
            </attribute>
            <attribute name="_elTd" type="HTMLElement" readonly="False">
              <description>Private property
TD element.</description>
            </attribute>
            <attribute name="_oColumn" type="YAHOO.widget.Column" readonly="False">
              <description>Private property
Column instance.</description>
            </attribute>
            <attribute name="_oDataTable" type="YAHOO.widget.DataTable" readonly="False">
              <description>Private property
DataTable instance.</description>
            </attribute>
            <attribute name="_oRecord" type="YAHOO.widget.Record" readonly="False">
              <description>Private property
Record instance.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Unique id assigned to instance "yui-ceditorN", useful prefix for generating unique
DOM ID strings and log messages.</description>
            </attribute>
            <attribute name="_sType" type="String" readonly="False">
              <description>Private property
Editor type.</description>
            </attribute>
            <attribute name="asyncSubmitter" type="HTMLFunction" readonly="False">
              <description>Implementer defined function that can submit the input value to a server. This
function must accept the arguments fnCallback and oNewValue. When the submission
is complete, the function must also call fnCallback(bSuccess, oNewValue) to
finish the save routine in the CellEditor. This function can also be used to
perform extra validation or input value manipulation.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Global instance counter.</description>
            </attribute>
            <attribute name="CLASS_CELLEDITOR" type="String" readonly="False">
              <description>Class applied to CellEditor container.</description>
            </attribute>
            <attribute name="defaultValue" type="MIXED" readonly="False">
              <description>Default value in case Record data is undefined. NB: Null values will not trigger
the default value.</description>
            </attribute>
            <attribute name="disableBtns" type="Boolean" readonly="False">
              <description>True if Save/Cancel buttons should not be displayed in the CellEditor.</description>
            </attribute>
            <attribute name="isActive" type="Boolean" readonly="False">
              <description>True if currently active.</description>
            </attribute>
            <attribute name="LABEL_CANCEL" type="String" readonly="False">
              <description>Text to display on Cancel button.</description>
            </attribute>
            <attribute name="LABEL_SAVE" type="String" readonly="False">
              <description>Text to display on Save button.</description>
            </attribute>
            <attribute name="resetInvalidData" type="Boolean" readonly="False">
              <description>If validation is enabled, resets input field of invalid data.</description>
            </attribute>
            <attribute name="validator" type="HTMLFunction" readonly="False">
              <description>Validator function for input data, called from the DataTable instance scope,
receives the arguments (inputValue, currentValue, editorInstance) and returns
either the validated (or type-converted) value or undefined.</description>
            </attribute>
            <attribute name="value" type="MIXED" readonly="False">
              <description>Current value.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_initConfigs" returns="void">
              <description>Private property
Initialize configs.</description>
            </function>
            <function name="_initEvents" returns="void">
              <description>Private property
Initialize Custom Events.</description>
            </function>
            <function name="attach" returns="void">
              <description>Attach CellEditor for a new interaction.</description>
              <params>
                <param name="oDataTable" type="YAHOO.widget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elCell" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="block" returns="void">
              <description>Fires blockEvent</description>
            </function>
            <function name="cancel" returns="void">
              <description>Cancels CellEditor input and hides UI.</description>
            </function>
            <function name="destroy" returns="void">
              <description>Nulls out the entire CellEditor instance and related objects, removes attached
event listeners, and clears out DOM elements inside the container, removes
container from the DOM.</description>
            </function>
            <function name="doAfterRender" returns="void">
              <description>Access to add additional event listeners.</description>
            </function>
            <function name="focus" returns="void">
              <description>Sets focus in CellEditor.</description>
            </function>
            <function name="getColumn" returns="YAHOO.widget.Column">
              <description>Returns reference to associated Column instance.</description>
            </function>
            <function name="getContainerEl" returns="HTMLElement">
              <description>Returns container element.</description>
            </function>
            <function name="getDataTable" returns="YAHOO.widget.DataTable">
              <description>Returns reference to associated DataTable instance.</description>
            </function>
            <function name="getId" returns="String">
              <description>CellEditor unique ID.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from CellEditor.</description>
            </function>
            <function name="getRecord" returns="YAHOO.widget.Record">
              <description>Returns reference to associated Record instance.</description>
            </function>
            <function name="getTdEl" returns="HTMLElement">
              <description>Returns reference to associated TD element.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="move" returns="void">
              <description>Moves container into position for display.</description>
            </function>
            <function name="render" returns="void">
              <description>Renders DOM elements and attaches event listeners.</description>
            </function>
            <function name="renderBtns" returns="void">
              <description>Renders Save/Cancel buttons.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Renders form elements.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets CellEditor UI to initial state.</description>
            </function>
            <function name="save" returns="void">
              <description>Saves value of CellEditor and hides UI.</description>
            </function>
            <function name="show" returns="void">
              <description>Displays CellEditor UI in the correct position.</description>
            </function>
            <function name="toString" returns="String">
              <description>CellEditor instance name, for logging.</description>
            </function>
            <function name="unblock" returns="void">
              <description>Fires unblockEvent</description>
            </function>
            <function name="BaseCellEditor" returns="YAHOO.widget.BaseCellEditor">
              <description>Class YAHOO.widget.BaseCellEditor constructor
The BaseCellEditor class provides base functionality common to all inline cell
editors for a DataTable widget.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Button" extends="YAHOO.util.Element" private="True">
          <description>The Button class creates a rich, graphical button.</description>
          <attributes>
            <attribute name="_activationButtonPressed" type="Boolean" readonly="False">
              <description>Protected property
Boolean indicating if the mouse button that toggles
the button's "active" state has been pressed.</description>
            </attribute>
            <attribute name="_activationKeyPressed" type="Boolean" readonly="False">
              <description>Protected property
Boolean indicating if the key(s) that toggle the button's
"active" state have been pressed.</description>
            </attribute>
            <attribute name="_button" type="HTMLAnchorElement|HTMLButtonElement" readonly="False">
              <description>Protected property
Object reference to the button's internal
&lt;a&gt; or &lt;button&gt; element.</description>
            </attribute>
            <attribute name="_hasKeyEventHandlers" type="Boolean" readonly="False">
              <description>Protected property
Boolean indicating if the button's "blur", "keydown" and
"keyup" event handlers are assigned</description>
            </attribute>
            <attribute name="_hasMouseEventHandlers" type="Boolean" readonly="False">
              <description>Protected property
Boolean indicating if the button's "mouseout,"
"mousedown," and "mouseup" event handlers are assigned</description>
            </attribute>
            <attribute name="_hiddenFields" type="HTMLInputElement|Array" readonly="False">
              <description>Protected property
Object reference to the &lt;input&gt;
element, or array of HTML form elements used to represent the button
when its parent form is submitted.</description>
            </attribute>
            <attribute name="_menu" type="{YAHOO.widget.Overlay|&#xA;YAHOO.widget.Menu}" readonly="False">
              <description>Protected property
Object reference to the button's menu.</description>
            </attribute>
            <attribute name="_nOptionRegionX" type="Number" readonly="False">
              <description>Protected property
Number representing the X coordinate of the leftmost edge of the Button's
option region.  Applies only to Buttons of type "split".</description>
            </attribute>
            <attribute name="_onclickAttributeValue" type="Object" readonly="False">
              <description>Protected property
Object reference to the button's current value for the
"onclick" configuration attribute.</description>
            </attribute>
            <attribute name="ACTIVATION_KEYS" type="Array" readonly="False">
              <description>Array of numbers representing keys that (when presed)
toggle the button's "active" state.</description>
            </attribute>
            <attribute name="CHECK_ACTIVATION_KEYS" type="Array" readonly="False">
              <description>Array of numbers representing keys that (when pressed)
toggle the button's "checked" attribute.</description>
            </attribute>
            <attribute name="CHECKBOX_CHECKED_TITLE" type="String" readonly="False">
              <description>String representing the title applied to buttons of type
"checkbox" when checked.</description>
            </attribute>
            <attribute name="CHECKBOX_DEFAULT_TITLE" type="String" readonly="False">
              <description>String representing the default title applied to
buttons of type "checkbox."</description>
            </attribute>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to
the button's root element.</description>
            </attribute>
            <attribute name="MENUBUTTON_DEFAULT_TITLE" type="String" readonly="False">
              <description>String representing the default title applied to
buttons of type "menu."</description>
            </attribute>
            <attribute name="MENUBUTTON_MENU_VISIBLE_TITLE" type="String" readonly="False">
              <description>String representing the title applied to buttons of type
"menu" when the button's menu is visible.</description>
            </attribute>
            <attribute name="NODE_NAME" type="String" readonly="False">
              <description>The name of the node to be used for the button's
root element.</description>
            </attribute>
            <attribute name="OPTION_AREA_WIDTH" type="Number" readonly="False">
              <description>Width (in pixels) of the area of a split button that
when pressed will display a menu.</description>
            </attribute>
            <attribute name="RADIO_CHECKED_TITLE" type="String" readonly="False">
              <description>String representing the title applied to buttons of
type "radio" when checked.</description>
            </attribute>
            <attribute name="RADIO_DEFAULT_TITLE" type="String" readonly="False">
              <description>String representing the default title applied to buttons
of type "radio."</description>
            </attribute>
            <attribute name="SPLITBUTTON_DEFAULT_TITLE" type="String" readonly="False">
              <description>String representing the default title applied to
buttons of type "split."</description>
            </attribute>
            <attribute name="SPLITBUTTON_OPTION_VISIBLE_TITLE" type="String" readonly="False">
              <description>String representing the title applied to buttons of type
"split" when the button's menu is visible.</description>
            </attribute>
            <attribute name="SUBMIT_TITLE" type="String" readonly="False">
              <description>String representing the title applied to buttons of
type "submit."</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addListenersToForm" returns="void">
              <description>Protected property
Adds event handlers to the button's form.</description>
            </function>
            <function name="_hideMenu" returns="void">
              <description>Protected property
Hides the button's menu.</description>
            </function>
            <function name="_isActivationKey" returns="Boolean">
              <description>Protected property
Determines if the specified keycode is one that toggles
the button's "active" state.</description>
              <params>
                <param name="p_nKeyCode" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_isSplitButtonOptionKey" returns="Boolean">
              <description>Protected property
Determines if the specified keycode is one that toggles
the display of the split button's menu.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onAppendTo" returns="void">
              <description>Protected property
"appendTo" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onBlur" returns="void">
              <description>Protected property
"blur" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClick" returns="void">
              <description>Protected property
"click" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDblClick" returns="void">
              <description>Protected property
"dblclick" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDocumentKeyUp" returns="void">
              <description>Protected property
"keyup" event handler for the document.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDocumentMouseDown" returns="void">
              <description>Protected property
"mousedown" event handler for the document.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDocumentMouseUp" returns="void">
              <description>Protected property
"mouseup" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onFocus" returns="void">
              <description>Protected property
"focus" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onFormReset" returns="void">
              <description>Protected property
"reset" event handler for the button's form.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onFormSubmit" returns="void">
              <description>Protected property
"submit" event handler for the button's form.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onKeyDown" returns="void">
              <description>Protected property
"keydown" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onKeyUp" returns="void">
              <description>Protected property
"keyup" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuClick" returns="void">
              <description>Private property
"click" event handler for the button's menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuHide" returns="void">
              <description>Private property
"hide" event handler for the button's menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuKeyDown" returns="void">
              <description>Private property
"keydown" event handler for the button's menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuRender" returns="void">
              <description>Private property
"render" event handler for the button's menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuShow" returns="void">
              <description>Private property
"show" event handler for the button's menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseDown" returns="void">
              <description>Protected property
"mousedown" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseMove" returns="void">
              <description>Protected property
"mousemove" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseOut" returns="void">
              <description>Protected property
"mouseout" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseOver" returns="void">
              <description>Protected property
"mouseover" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseUp" returns="void">
              <description>Protected property
"mouseup" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onOption" returns="void">
              <description>Protected property
"option" event handler for the button.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onSelectedMenuItemChange" returns="void">
              <description>"selectedMenuItemChange" event handler for the Button's
"selectedMenuItem" attribute.</description>
              <params>
                <param name="event" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setChecked" returns="void">
              <description>Protected property
Sets the value of the button's "target" attribute.</description>
              <params>
                <param name="p_bChecked" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setDisabled" returns="void">
              <description>Protected property
Sets the value of the button's "disabled" attribute.</description>
              <params>
                <param name="p_bDisabled" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setHref" returns="void">
              <description>Protected property
Sets the value of the button's "href" attribute.</description>
              <params>
                <param name="p_sHref" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setLabel" returns="void">
              <description>Protected property
Sets the value of the button's "label" attribute.</description>
              <params>
                <param name="p_sLabel" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setMenu" returns="void">
              <description>Protected property
Sets the value of the button's "menu" attribute.</description>
              <params>
                <param name="p_oMenu" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setOnClick" returns="void">
              <description>Protected property
Sets the value of the button's "onclick" attribute.</description>
              <params>
                <param name="p_oObject" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setTabIndex" returns="void">
              <description>Protected property
Sets the value of the button's "tabindex" attribute.</description>
              <params>
                <param name="p_nTabIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setTarget" returns="void">
              <description>Protected property
Sets the value of the button's "target" attribute.</description>
              <params>
                <param name="p_sTarget" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setTitle" returns="void">
              <description>Protected property
Sets the value of the button's "title" attribute.</description>
              <params>
                <param name="p_nTabIndex" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setType" returns="void">
              <description>Protected property
Sets the value of the button's "type" attribute.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_showMenu" returns="void">
              <description>Protected property
Shows the button's menu.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addStateCSSClasses" returns="void">
              <description>Appends state-specific CSS classes to the button's root
DOM element.</description>
            </function>
            <function name="blur" returns="void">
              <description>Causes the button to lose focus and fires the button's
"blur" event.</description>
            </function>
            <function name="createButtonElement" returns="HTMLElement">
              <description>Creates the button's HTML elements.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createHiddenFields" returns="HTMLInputElement|Array">
              <description>Creates the button's hidden form field and appends it
to its parent form.</description>
            </function>
            <function name="createInputElement" returns="HTMLInputElement">
              <description>Private property
Creates an &lt;input&gt; element of the
specified type.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_sName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_sValue" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_bChecked" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the button's element from its parent element and
removes all event handlers.</description>
            </function>
            <function name="focus" returns="void">
              <description>Causes the button to receive the focus and fires the
button's "focus" event.</description>
            </function>
            <function name="getForm" returns="HTMLFormElement">
              <description>Returns a reference to the button's parent form.</description>
            </function>
            <function name="getHiddenFields" returns="HTMLInputElement|Array">
              <description>Returns an &lt;input&gt; element or
array of form elements used to represent the button when its parent
form is submitted.</description>
            </function>
            <function name="getMenu" returns="YAHOO.widget.Overlay|YAHOO.widget.Menu">
              <description>Returns a reference to the button's menu.</description>
            </function>
            <function name="hasFocus" returns="Boolean">
              <description>Returns a boolean indicating whether or not the button
has focus.</description>
            </function>
            <function name="init" returns="void">
              <description>The Button class's initialization method.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLInputElement|HTMLButtonElement|&#xA;HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oAttributes" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to
create the button.</description>
              <params>
                <param name="p_oAttributes" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initConfig" returns="void">
              <description>Private property
Initializes the set of configuration attributes that are
used to instantiate the button.</description>
              <params>
                <param name="Object" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isActive" returns="Boolean">
              <description>Returns a boolean indicating whether or not the button
is active.</description>
            </function>
            <function name="removeHiddenFields" returns="void">
              <description>Removes the button's hidden form field(s) from its
parent form.</description>
            </function>
            <function name="removeStateCSSClasses" returns="void">
              <description>Removes state-specific CSS classes to the button's root
DOM element.</description>
            </function>
            <function name="setAttributeFromDOMAttribute" returns="void">
              <description>Private property
Gets the value of the specified DOM attribute and sets it
into the collection of configuration attributes used to configure
the button.</description>
              <params>
                <param name="p_sAttribute" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAttributesFromSrcElement" returns="void">
              <description>Private property
Gets the values for all the attributes of the source element
(either &lt;input&gt; or &lt;a&gt;) that
map to Button configuration attributes and sets them into a collection
that is passed to the Button constructor.</description>
              <params>
                <param name="p_oElement" type="HTMLInputElement|HTMLAnchorElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oAttributes" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFormElementProperties" returns="void">
              <description>Private property
Gets the value of the attributes from the form element
and sets them into the collection of configuration attributes used to
configure the button.</description>
            </function>
            <function name="submitForm" returns="Boolean">
              <description>Protected property
Submits the form to which the button belongs.  Returns
true if the form was submitted successfully, false if the submission
was cancelled.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the button.</description>
            </function>
            <function name="addHiddenFieldsToForm" returns="void">
              <description>Searches the specified form and adds hidden fields for
instances of YAHOO.widget.Button that are of type "radio," "checkbox,"
"menu," and "split."</description>
              <params>
                <param name="p_oForm" type="HTMLFormElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButton" returns="YAHOO.widget.Button">
              <description>Returns a button with the specified id.</description>
              <params>
                <param name="p_sId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onFormKeyPress" returns="void">
              <description>"keypress" event handler for the button's form.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Button" returns="YAHOO.widget.Button">
              <description>Class YAHOO.widget.Button constructor
The Button class creates a rich, graphical button.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLInputElement|&#xA;HTMLButtonElement|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oAttributes" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ButtonGroup" extends="YAHOO.util.Element" private="True">
          <description>The ButtonGroup class creates a set of buttons that are mutually
exclusive; checking one button in the set will uncheck all others in the
button group.</description>
          <attributes>
            <attribute name="_buttons" type="Array" readonly="False">
              <description>Protected property
Array of buttons in the button group.</description>
            </attribute>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied
to the button group's element.</description>
            </attribute>
            <attribute name="NODE_NAME" type="String" readonly="False">
              <description>The name of the tag to be used for the button
group's element.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createGroupElement" returns="HTMLDivElement">
              <description>Protected property
Creates the button group's element.</description>
            </function>
            <function name="_onAppendTo" returns="void">
              <description>Protected property
"appendTo" event handler for the button group.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onButtonCheckedChange" returns="void">
              <description>Protected property
"checkedChange" event handler for each button in the
button group.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oButton" type="YAHOO.widget.Button" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onKeyDown" returns="void">
              <description>Protected property
"keydown" event handler for the button group.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setDisabled" returns="void">
              <description>Protected property
Sets the value of the button groups's
"disabled" attribute.</description>
              <params>
                <param name="p_bDisabled" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addButton" returns="YAHOO.widget.Button">
              <description>Adds the button to the button group.</description>
              <params>
                <param name="p_oButton" type="YAHOO.widget.Button" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oButton" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oButton" type="HTMLInputElement|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oButton" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addButtons" returns="Array">
              <description>Adds the array of buttons to the button group.</description>
              <params>
                <param name="p_aButtons" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aButtons" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aButtons" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aButtons" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="check" returns="void">
              <description>Checks the button at the specified index.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the button group's element from its parent
element and removes all event handlers.</description>
            </function>
            <function name="focus" returns="void">
              <description>Sets focus to the button at the specified index.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButton" returns="YAHOO.widget.Button">
              <description>Returns the button at the specified index.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButtons" returns="Array">
              <description>Returns an array of the buttons in the button group.</description>
            </function>
            <function name="getCount" returns="Number">
              <description>Returns the number of buttons in the button group.</description>
            </function>
            <function name="init" returns="void">
              <description>The ButtonGroup class's initialization method.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oAttributes" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to
create the button group.</description>
              <params>
                <param name="p_oAttributes" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeButton" returns="void">
              <description>Removes the button at the specified index from the
button group.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the button group.</description>
            </function>
            <function name="ButtonGroup" returns="YAHOO.widget.ButtonGroup">
              <description>Class YAHOO.widget.ButtonGroup constructor
The ButtonGroup class creates a set of buttons that are mutually
exclusive; checking one button in the set will uncheck all others in the
button group.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oAttributes" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Calendar" extends="Object" private="True">
          <description>Calendar is the base class for the Calendar widget. In its most basic
implementation, it has the ability to render a calendar widget on the page
that can be manipulated to select a single date, move back and forth between
months and years.
To construct the placeholder for the calendar widget, the code is as
follows:

&lt;div id="calContainer"&gt;&lt;/div&gt;



NOTE: As of 2.4.0, the constructor's ID argument is optional.
The Calendar can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.Calendar("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.Calendar(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the Calendar's ID will be set to "calContainer_t".</description>
          <attributes>
            <attribute name="_renderStack" type="Array" readonly="False">
              <description>Private property
A copy of the initial render functions created before rendering.</description>
            </attribute>
            <attribute name="_selectedDates" type="Array" readonly="False">
              <description>Private property
The private list of initially selected dates.</description>
            </attribute>
            <attribute name="browser" type="String" readonly="False">
              <description>Returns a string representing the current browser.</description>
            </attribute>
            <attribute name="cellDates" type="Array[](Number[])" readonly="False">
              <description>The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].</description>
            </attribute>
            <attribute name="cells" type="HTMLTableCellElement[]" readonly="False">
              <description>The collection of calendar table cells</description>
            </attribute>
            <attribute name="cfg" type="YAHOO.util.Config" readonly="False">
              <description>The Config object used to hold the configuration variables for the Calendar</description>
            </attribute>
            <attribute name="Config" type="Object" readonly="False">
              <description>The configuration object used to set up the calendars various locale and style options.</description>
            </attribute>
            <attribute name="containerId" type="String" readonly="False">
              <description>The unique id associated with the Calendar's container</description>
            </attribute>
            <attribute name="domEventMap" type="Object" readonly="False">
              <description>A map of DOM event handlers to attach to cells associated with specific CSS class names</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The id that uniquely identifies this Calendar.</description>
            </attribute>
            <attribute name="index" type="Number" readonly="False">
              <description>The index of this item in the parent group</description>
            </attribute>
            <attribute name="Locale" type="Object" readonly="False">
              <description>The local object which contains the Calendar's locale settings</description>
            </attribute>
            <attribute name="oDomContainer" type="HTMLElement" readonly="False">
              <description>The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.</description>
            </attribute>
            <attribute name="oNavigator" type="CalendarNavigator" readonly="False">
              <description>A reference to the CalendarNavigator instance created for this Calendar.
Will be null if the "navigator" configuration property has not been set</description>
            </attribute>
            <attribute name="Options" type="Object" readonly="False">
              <description>The local object which contains the Calendar's options</description>
            </attribute>
            <attribute name="parent" type="CalendarGroup" readonly="False">
              <description>The parent CalendarGroup, only to be set explicitly by the parent group</description>
            </attribute>
            <attribute name="renderStack" type="Array[]" readonly="False">
              <description>The list of render functions, along with required parameters, used to render cells.</description>
            </attribute>
            <attribute name="CSS_BODY" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CALENDAR" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_BOTTOM" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_HIGHLIGHT1" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_HIGHLIGHT2" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_HIGHLIGHT3" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_HIGHLIGHT4" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_HOVER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_LEFT" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_OOB" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_OOM" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_RESTRICTED" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_RIGHT" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_SELECTABLE" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_SELECTED" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_SELECTOR" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_TODAY" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CELL_TOP" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CLOSE" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_CONTAINER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_FOOTER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_HEADER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_HEADER_TEXT" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_NAV" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_NAV_LEFT" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_NAV_RIGHT" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_ROW_FOOTER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_ROW_HEADER" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_SINGLE" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_WEEKDAY_CELL" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="CSS_WEEKDAY_ROW" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="today" type="Date" readonly="False">
              <description>A Date object representing today's date.</description>
            </attribute>
            <attribute name="_DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
The set of default Config property keys and values for the Calendar</description>
            </attribute>
            <attribute name="_EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
The set of Custom Event types supported by the Calendar</description>
            </attribute>
            <attribute name="_STYLES" type="Object" readonly="False">
              <description>Private property
The set of default style constants for the Calendar</description>
            </attribute>
            <attribute name="DATE" type="String" readonly="False">
              <description>Type constant used for renderers to represent an individual date (M/D/Y)</description>
            </attribute>
            <attribute name="DISPLAY_DAYS" type="Number" readonly="False">
              <description>Constant that represents the total number of date cells that are displayed in a given month</description>
            </attribute>
            <attribute name="IMG_ROOT" type="String" readonly="False">
              <description>The path to be used for images loaded for the Calendar</description>
            </attribute>
            <attribute name="LONG" type="String" readonly="False">
              <description>Constant used to represent long date field string formats (e.g. Monday or February)</description>
            </attribute>
            <attribute name="MEDIUM" type="String" readonly="False">
              <description>Constant used to represent medium date field string formats (e.g. Mon)</description>
            </attribute>
            <attribute name="MONTH" type="String" readonly="False">
              <description>Type constant used for renderers to represent a month across any year</description>
            </attribute>
            <attribute name="MONTH_DAY" type="String" readonly="False">
              <description>Type constant used for renderers to represent an individual date across any year (M/D)</description>
            </attribute>
            <attribute name="ONE_CHAR" type="String" readonly="False">
              <description>Constant used to represent single character date field string formats (e.g. M, T, W)</description>
            </attribute>
            <attribute name="RANGE" type="String" readonly="False">
              <description>Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)</description>
            </attribute>
            <attribute name="SHORT" type="String" readonly="False">
              <description>Constant used to represent short date field string formats (e.g. Tu or Feb)</description>
            </attribute>
            <attribute name="STOP_RENDER" type="String" readonly="False">
              <description>Constant used for halting the execution of the remainder of the render stack</description>
            </attribute>
            <attribute name="WEEKDAY" type="String" readonly="False">
              <description>Type constant used for renderers to represent a weekday</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addRenderer" returns="void">
              <description>Private property
The private method used for adding cell renderers to the local render stack.
This method is called by other methods that set the renderer type prior to the method call.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The type string that indicates the type of date renderer being added.
Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,
YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH</description>
                </param>
                <param name="aDates" type="Array" optional="False">
                  <description>The type string that indicates the type of date renderer being added.
Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,
YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH</description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>The type string that indicates the type of date renderer being added.
Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,
YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH</description>
                </param>
              </params>
            </function>
            <function name="_buildMonthLabel" returns="String">
              <description>Private property
Helper method, to format a Month Year string, given a JavaScript Date, based on the
Calendar localization settings</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_fieldArraysAreEqual" returns="Boolean">
              <description>Private property
Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.</description>
              <params>
                <param name="array1" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="array2" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_indexOfSelectedFieldArray" returns="Number">
              <description>Private property
Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.</description>
              <params>
                <param name="find" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parseArgs" returns="Object">
              <description>Protected property
Protected helper used to parse Calendar constructor/init arguments.
As of 2.4.0, Calendar supports a simpler constructor
signature. This method reconciles arguments
received in the pre 2.4.0 and 2.4.0 formats.</description>
              <params>
                <param name="Function" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parseDate" returns="void">
              <description>Private property
Converts a date string to a date field array</description>
              <params>
                <param name="sDate" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parseDates" returns="void">
              <description>Private property
Converts a multi or single-date string to an array of date field arrays</description>
              <params>
                <param name="sDates" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parsePageDate" returns="Date">
              <description>Private property
Parses a pagedate configuration property value. The value can either be specified as a string of form "mm/yyyy" or a Date object
and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object</description>
              <params>
                <param name="date" type="Date|String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_parseRange" returns="void">
              <description>Private property
Converts a date range to the full list of included dates</description>
              <params>
                <param name="startDate" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="endDate" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toDate" returns="Date">
              <description>Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.</description>
              <params>
                <param name="dateFieldArray" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toFieldArray" returns="Array[](Number[])">
              <description>Private property
Converts a date (either a JavaScript Date object, or a date string) to the internal data structure
used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].</description>
              <params>
                <param name="date" type="String/Date/Date[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addMonthRenderer" returns="void">
              <description>Adds a month to the render stack. The function reference passed to this method will be executed
when a date cell matches the month passed to this method.</description>
              <params>
                <param name="month" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addMonths" returns="void">
              <description>Adds the designated number of months to the current calendar month, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRenderer" returns="void">
              <description>Adds a renderer to the render stack. The function reference passed to this method will be executed
when a date cell matches the conditions specified in the date string for this renderer.</description>
              <params>
                <param name="sDates" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addWeekdayRenderer" returns="void">
              <description>Adds a weekday to the render stack. The function reference passed to this method will be executed
when a date cell matches the weekday passed to this method.</description>
              <params>
                <param name="weekday" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addYears" returns="void">
              <description>Adds the designated number of years to the current calendar, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyListeners" returns="void">
              <description>Applies the Calendar's DOM listeners to applicable elements.</description>
            </function>
            <function name="buildDayLabel" returns="String">
              <description>Builds the date digit that will be displayed in calendar cells</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="buildMonthLabel" returns="String">
              <description>Builds the date label that will be displayed in the calendar header or
footer, depending on configuration.</description>
            </function>
            <function name="buildWeekdays" returns="Array">
              <description>Renders the Calendar's weekday headers.</description>
              <params>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clear" returns="void">
              <description>Clears the selected dates in the current calendar widget and sets the calendar
to the current month and year.</description>
            </function>
            <function name="clearAllBodyCellStyles" returns="void">
              <description>Removes all styles from all body cells in the current calendar table.</description>
              <params>
                <param name="style" type="style" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearElement" returns="void">
              <description>Clears the inner HTML, CSS class and style information from the specified cell.</description>
              <params>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configClose" returns="void">
              <description>Default handler for the "close" property</description>
            </function>
            <function name="configIframe" returns="void">
              <description>Default Config listener for the iframe property. If the iframe config property is set to true,
renders the built-in IFRAME shim if the container is relatively or absolutely positioned.</description>
            </function>
            <function name="configLocale" returns="void">
              <description>The default handler for all configuration locale properties</description>
            </function>
            <function name="configLocaleValues" returns="void">
              <description>The default handler for all configuration locale field length properties</description>
            </function>
            <function name="configMaxDate" returns="void">
              <description>The default handler for the "maxdate" property</description>
            </function>
            <function name="configMinDate" returns="void">
              <description>The default handler for the "mindate" property</description>
            </function>
            <function name="configNavigator" returns="void">
              <description>The default handler for the "navigator" property</description>
            </function>
            <function name="configOptions" returns="void">
              <description>The default handler for all configuration options properties</description>
            </function>
            <function name="configPageDate" returns="void">
              <description>The default handler for the "pagedate" property</description>
            </function>
            <function name="configSelected" returns="void">
              <description>The default handler for the "selected" property</description>
            </function>
            <function name="configStrings" returns="void">
              <description>The default handler for the "strings" property</description>
            </function>
            <function name="configTitle" returns="void">
              <description>Default handler for the "title" property</description>
            </function>
            <function name="createCloseButton" returns="void">
              <description>Creates the close button HTML element and adds it to Calendar container DIV</description>
            </function>
            <function name="createTitleBar" returns="void">
              <description>Creates the title bar element and adds it to Calendar container DIV</description>
              <params>
                <param name="strTitle" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselect" returns="Date[]">
              <description>Deselects a date or a collection of dates on the current calendar. This method, by default,
does not call the render method explicitly. Once deselection has completed, render must be
called for the changes to be reflected visually.
The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable)
and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.
If all dates are OOB, beforeDeselect and deselect events will not be fired.</description>
              <params>
                <param name="date" type="String/Date/Date[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselectAll" returns="Date[]">
              <description>Deselects all dates on the current calendar.</description>
            </function>
            <function name="deselectCell" returns="Date[]">
              <description>Deselects a date on the current calendar by referencing the index of the cell that should be deselected.
This method is used to easily deselect a single cell (usually with a mouse click) without having to do
a full render. The selected style is removed from the cell directly.
If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and
deselect events will not be fired.</description>
              <params>
                <param name="cellIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the Calendar instance. The method will remove references
to HTML elements, remove any event listeners added by the Calendar,
and destroy the Config and CalendarNavigator instances it has created.</description>
            </function>
            <function name="doCellMouseOut" returns="void">
              <description>The event that is executed when the user moves the mouse out of a cell</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doCellMouseOver" returns="void">
              <description>The event that is executed when the user hovers over a cell</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doNextMonthNav" returns="void">
              <description>The default event handler for clicks on the "Next Month" navigation UI</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doPreviousMonthNav" returns="void">
              <description>The default event handler for clicks on the "Previous Month" navigation UI</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doSelectCell" returns="void">
              <description>The default event handler for date cell selection. Currently attached to
the Calendar's bounding box, referenced by it's oDomContainer property.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getCellIndex" returns="Number">
              <description>Find the Calendar's cell index for a given date.
If the date is not found, the method returns -1.

The returned index can be used to lookup the cell HTMLElement
using the Calendar's cells array or passed to selectCell to select
cells by index.

See cells, selectCell.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDateByCellId" returns="Date">
              <description>Retrieves the Date object for the specified Calendar cell</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDateFieldsByCellId" returns="Array">
              <description>Retrieves the Date object for the specified Calendar cell</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getIndexFromId" returns="Number">
              <description>Given the id used to mark each Calendar cell, this method
extracts the index number from the id.</description>
              <params>
                <param name="strId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSelectedDates" returns="Date[]">
              <description>Gets the list of currently selected dates from the calendar.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the Calendar's outer container from view.</description>
            </function>
            <function name="init" returns="void">
              <description>Initializes the Calendar widget.</description>
              <params>
                <param name="id" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="container" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes Calendar's built-in CustomEvents</description>
            </function>
            <function name="initStyles" returns="void">
              <description>Defines the style constants for the Calendar</description>
            </function>
            <function name="isDateOOB" returns="Boolean">
              <description>Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isDateOOM" returns="Boolean">
              <description>Determines whether a given date is OOM (out of month).</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="nextMonth" returns="void">
              <description>Navigates to the next month page in the calendar widget.</description>
            </function>
            <function name="nextYear" returns="void">
              <description>Navigates to the next year in the currently selected month in the calendar widget.</description>
            </function>
            <function name="onBeforeDeselect" returns="void">
              <description>Event executed before a date is deselected in the calendar widget.</description>
            </function>
            <function name="onBeforeSelect" returns="void">
              <description>Event executed before a date is selected in the calendar widget.</description>
            </function>
            <function name="onChangePage" returns="void">
              <description>Event executed when the user navigates to a different calendar page.</description>
            </function>
            <function name="onClear" returns="void">
              <description>Event executed when the calendar widget is completely cleared to the current month with no selections.</description>
            </function>
            <function name="onDeselect" returns="void">
              <description>Event executed when a date is deselected in the calendar widget.</description>
              <params>
                <param name="selected" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onRender" returns="void">
              <description>Event executed when the calendar widget is rendered.</description>
            </function>
            <function name="onReset" returns="void">
              <description>Event executed when the calendar widget is reset to its original state.</description>
            </function>
            <function name="onSelect" returns="void">
              <description>Event executed when a date is selected in the calendar widget.</description>
              <params>
                <param name="selected" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="previousMonth" returns="void">
              <description>Navigates to the previous month page in the calendar widget.</description>
            </function>
            <function name="previousYear" returns="void">
              <description>Navigates to the previous year in the currently selected month in the calendar widget.</description>
            </function>
            <function name="refreshLocale" returns="void">
              <description>Private property
Refreshes the locale values used to build the Calendar.</description>
            </function>
            <function name="removeCloseButton" returns="void">
              <description>Removes the close button HTML element from the DOM</description>
            </function>
            <function name="removeRenderers" returns="void">
              <description>Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and
addWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers
to re-render the Calendar without custom renderers applied.</description>
            </function>
            <function name="removeTitleBar" returns="void">
              <description>Removes the title bar element from the DOM</description>
            </function>
            <function name="render" returns="void">
              <description>Renders the calendar after it has been configured. The render() method has a specific call chain that will execute
when the method is called: renderHeader, renderBody, renderFooter.
Refer to the documentation for those methods for information on
individual render tasks.</description>
            </function>
            <function name="renderBody" returns="Array">
              <description>Renders the calendar body.</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderBodyCellRestricted" returns="String">
              <description>Renders the current calendar cell as a non-selectable "black-out" date using the default
restricted style.</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellDefault" returns="void">
              <description>Renders a single standard calendar cell in the calendar widget table.
All logic for determining how a standard default cell will be rendered is
encapsulated in this method, and must be accounted for when extending the
widget class.</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellNotThisMonth" returns="String">
              <description>Applies the default style used for rendering dates that are not a part of the current
month (preceding or trailing the cells for the current month)</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleHighlight1" returns="void">
              <description>Renders a single standard calendar cell using the CSS hightlight1 style</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleHighlight2" returns="void">
              <description>Renders a single standard calendar cell using the CSS hightlight2 style</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleHighlight3" returns="void">
              <description>Renders a single standard calendar cell using the CSS hightlight3 style</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleHighlight4" returns="void">
              <description>Renders a single standard calendar cell using the CSS hightlight4 style</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleSelected" returns="String">
              <description>Applies the default style used for rendering selected dates to the current calendar cell</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderCellStyleToday" returns="void">
              <description>Applies the default style used for rendering today's date to the current calendar cell</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderFooter" returns="Array">
              <description>Renders the calendar footer. In the default implementation, there is
no footer.</description>
              <params>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderHeader" returns="Array">
              <description>Renders the calendar header.</description>
              <params>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderOutOfBoundsDate" returns="String">
              <description>Renders a cell that falls before the minimum date or after the maximum date.
widget class.</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderRowFooter" returns="void">
              <description>Renders the row footer for a week.</description>
              <params>
                <param name="weekNum" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderRowHeader" returns="void">
              <description>Renders the row header for a week.</description>
              <params>
                <param name="weekNum" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="void">
              <description>Resets the calendar widget to the originally selected month and year, and
sets the calendar to the initial selection(s).</description>
            </function>
            <function name="resetRenderers" returns="void">
              <description>Resets the render stack of the current calendar to its original pre-render value.</description>
            </function>
            <function name="select" returns="Date[]">
              <description>Selects a date or a collection of dates on the current calendar. This method, by default,
does not call the render method explicitly. Once selection has completed, render must be
called for the changes to be reflected visually.
Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of
selected dates passed to the selectEvent will not contain OOB dates.
If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.</description>
              <params>
                <param name="date" type="String/Date/Date[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectCell" returns="Date[]">
              <description>Selects a date on the current calendar by referencing the index of the cell that should be selected.
This method is used to easily select a single cell (usually with a mouse click) without having to do
a full render. The selected style is applied to the cell directly.
If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.</description>
              <params>
                <param name="cellIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMonth" returns="void">
              <description>Sets the calendar's month explicitly</description>
              <params>
                <param name="month" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYear" returns="void">
              <description>Sets the calendar's year explicitly.</description>
              <params>
                <param name="year" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows the Calendar's outer container.</description>
            </function>
            <function name="styleCellDefault" returns="void">
              <description>Styles a selectable cell.</description>
              <params>
                <param name="workingDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cell" type="HTMLTableCellElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subtractMonths" returns="void">
              <description>Subtracts the designated number of months from the current calendar month, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subtractYears" returns="void">
              <description>Subtcats the designated number of years from the current calendar, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toDate" returns="Date">
              <description>Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array
is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.</description>
              <params>
                <param name="dateFieldArray" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="validate" returns="void">
              <description>Validates the calendar widget. This method has no default implementation
and must be extended by subclassing the widget.</description>
            </function>
            <function name="Calendar" returns="YAHOO.widget.Calendar">
              <description>Class YAHOO.widget.Calendar constructor
Calendar is the base class for the Calendar widget. In its most basic
implementation, it has the ability to render a calendar widget on the page
that can be manipulated to select a single date, move back and forth between
months and years.
To construct the placeholder for the calendar widget, the code is as
follows:

&lt;div id="calContainer"&gt;&lt;/div&gt;



NOTE: As of 2.4.0, the constructor's ID argument is optional.
The Calendar can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.Calendar("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.Calendar(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the Calendar's ID will be set to "calContainer_t".</description>
              <params>
                <param name="id" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="container" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Calendar_Core" extends="YAHOO.widget.Calendar" private="True">
          <description>
          </description>
        </interface>
        <interface name="YAHOO.widget.Calendar2up" extends="YAHOO.widget.CalendarGroup" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="Cal2up" type="object" readonly="False">
              <description>
              </description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.widget.CalendarGroup" extends="Object" private="True">
          <description>YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
the ability to have multi-page calendar views that share a single dataset and are
dependent on each other.
The calendar group instance will refer to each of its elements using a 0-based index.
For example, to construct the placeholder for a calendar group widget with id "cal1" and
containerId of "cal1Container", the markup would be as follows:

&lt;div id="cal1Container_0"&gt;&lt;/div&gt;
&lt;div id="cal1Container_1"&gt;&lt;/div&gt;

The tables for the calendars ("cal1_0" and "cal1_1") will be inserted into those containers.

NOTE: As of 2.4.0, the constructor's ID argument is optional.
The CalendarGroup can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.CalendarGroup("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the CalendarGroup's ID will be set to "calContainer_t".</description>
          <attributes>
            <attribute name="cfg" type="YAHOO.util.Config" readonly="False">
              <description>The Config object used to hold the configuration variables for the CalendarGroup</description>
            </attribute>
            <attribute name="containerId" type="String" readonly="False">
              <description>The unique id associated with the CalendarGroup container</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The unique id associated with the CalendarGroup</description>
            </attribute>
            <attribute name="Locale" type="Object" readonly="False">
              <description>The local object which contains the CalendarGroup's locale settings</description>
            </attribute>
            <attribute name="Options" type="Object" readonly="False">
              <description>The local object which contains the CalendarGroup's options</description>
            </attribute>
            <attribute name="pages" type="YAHOO.widget.Calendar[]" readonly="False">
              <description>The collection of Calendar pages contained within the CalendarGroup</description>
            </attribute>
            <attribute name="_DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
The set of default Config property keys and values for the CalendarGroup</description>
            </attribute>
            <attribute name="CSS_2UPCLOSE" type="String" readonly="False">
              <description>CSS class representing the close icon for the 2-up calendar</description>
            </attribute>
            <attribute name="CSS_2UPTITLE" type="String" readonly="False">
              <description>CSS class representing the title for the 2-up calendar</description>
            </attribute>
            <attribute name="CSS_CONTAINER" type="String" readonly="False">
              <description>CSS class representing the container for the calendar</description>
            </attribute>
            <attribute name="CSS_MULTI_UP" type="String" readonly="False">
              <description>CSS class representing the container for the calendar</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_fixWidth" returns="void">
              <description>Private property
Fixes the width of the CalendarGroup container element, to account for miswrapped floats</description>
            </function>
            <function name="_setMonthOnDate" returns="void">
              <description>Private property
Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.
The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>The month index to set</description>
                </param>
                <param name="iMonth" type="Number" optional="False">
                  <description>The month index to set</description>
                </param>
              </params>
            </function>
            <function name="addMonthRenderer" returns="void">
              <description>Adds a month to the render stack. The function reference passed to this method will be executed
when a date cell matches the month passed to this method.</description>
              <params>
                <param name="month" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addMonths" returns="void">
              <description>Adds the designated number of months to the current calendar month, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRenderer" returns="void">
              <description>Adds a renderer to the render stack. The function reference passed to this method will be executed
when a date cell matches the conditions specified in the date string for this renderer.</description>
              <params>
                <param name="sDates" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addWeekdayRenderer" returns="void">
              <description>Adds a weekday to the render stack. The function reference passed to this method will be executed
when a date cell matches the weekday passed to this method.</description>
              <params>
                <param name="weekday" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fnRender" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addYears" returns="void">
              <description>Adds the designated number of years to the current calendar, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="callChildFunction" returns="void">
              <description>Calls a function within all child Calendars within this CalendarGroup.</description>
              <params>
                <param name="fnName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clear" returns="void">
              <description>Clears the selected dates in the current calendar widget and sets the calendar
to the current month and year.</description>
            </function>
            <function name="configPageDate" returns="void">
              <description>The default Config handler for the "pagedate" property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configPages" returns="void">
              <description>The default Config handler for the "pages" property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configSelected" returns="void">
              <description>The default Config handler for the CalendarGroup "selected" property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="constructChild" returns="YAHOO.widget.Calendar">
              <description>Constructs a child calendar. This method can be overridden if a subclassed version of the default
calendar is to be used.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="containerId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="delegateConfig" returns="void">
              <description>Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselect" returns="Date[]">
              <description>Deselects a date or a collection of dates on the current calendar. This method, by default,
does not call the render method explicitly. Once deselection has completed, render must be
called for the changes to be reflected visually.</description>
              <params>
                <param name="date" type="String/Date/Date[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselectAll" returns="Date[]">
              <description>Deselects all dates on the current calendar.</description>
            </function>
            <function name="deselectCell" returns="Date[]">
              <description>Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
deselectCell will deselect the cell at the specified index on each displayed Calendar page.</description>
              <params>
                <param name="cellIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the CalendarGroup instance. The method will remove references
to HTML elements, remove any event listeners added by the CalendarGroup.
It will also destroy the Config and CalendarNavigator instances created by the
CalendarGroup and the individual Calendar instances created for each page.</description>
            </function>
            <function name="getCalendarPage" returns="Calendar">
              <description>Returns the Calendar page instance which has a pagedate (month/year) matching the given date.
Returns null if no match is found.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSelectedDates" returns="void">
              <description>Gets the list of currently selected dates from the calendar.</description>
            </function>
            <function name="init" returns="void">
              <description>Initializes the calendar group. All subclasses must call this method in order for the
group to be initialized properly.</description>
              <params>
                <param name="id" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="container" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes CalendarGroup's built-in CustomEvents</description>
            </function>
            <function name="nextMonth" returns="void">
              <description>Navigates to the next month page in the calendar widget.</description>
            </function>
            <function name="nextYear" returns="void">
              <description>Navigates to the next year in the currently selected month in the calendar widget.</description>
            </function>
            <function name="previousMonth" returns="void">
              <description>Navigates to the previous month page in the calendar widget.</description>
            </function>
            <function name="previousYear" returns="void">
              <description>Navigates to the previous year in the currently selected month in the calendar widget.</description>
            </function>
            <function name="removeRenderers" returns="void">
              <description>Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and
addWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers
to see the changes applied.</description>
            </function>
            <function name="render" returns="void">
              <description>Calls the render function of all child calendars within the group.</description>
            </function>
            <function name="renderFooter" returns="void">
              <description>Renders a footer for the 2-up calendar container. By default, this method is
unimplemented.</description>
            </function>
            <function name="renderHeader" returns="void">
              <description>Renders the header for the CalendarGroup.</description>
            </function>
            <function name="reset" returns="void">
              <description>Resets the calendar widget to the originally selected month and year, and
sets the calendar to the initial selection(s).</description>
            </function>
            <function name="select" returns="Date[]">
              <description>Selects a date or a collection of dates on the current calendar. This method, by default,
does not call the render method explicitly. Once selection has completed, render must be
called for the changes to be reflected visually.</description>
              <params>
                <param name="date" type="String/Date/Date[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectCell" returns="Date[]">
              <description>Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected.

If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.
If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.</description>
              <params>
                <param name="cellIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setChildFunction" returns="void">
              <description>Adds a function to all child Calendars within this CalendarGroup.</description>
              <params>
                <param name="fnName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMonth" returns="void">
              <description>Sets the calendar group's month explicitly. This month will be set into the first
page of the multi-page calendar, and all other months will be iterated appropriately.</description>
              <params>
                <param name="month" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYear" returns="void">
              <description>Sets the calendar group's year explicitly. This year will be set into the first
page of the multi-page calendar, and all other months will be iterated appropriately.</description>
              <params>
                <param name="year" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sub" returns="void">
              <description>Private property
Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bOverride" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subtractMonths" returns="void">
              <description>Subtracts the designated number of months from the current calendar month, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subtractYears" returns="void">
              <description>Subtcats the designated number of years from the current calendar, and sets the current
calendar page date to the new month.</description>
              <params>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="unsub" returns="void">
              <description>Private property
Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents</description>
              <params>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="CalendarGroup" returns="YAHOO.widget.CalendarGroup">
              <description>Class YAHOO.widget.CalendarGroup constructor
YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
the ability to have multi-page calendar views that share a single dataset and are
dependent on each other.
The calendar group instance will refer to each of its elements using a 0-based index.
For example, to construct the placeholder for a calendar group widget with id "cal1" and
containerId of "cal1Container", the markup would be as follows:

&lt;div id="cal1Container_0"&gt;&lt;/div&gt;
&lt;div id="cal1Container_1"&gt;&lt;/div&gt;

The tables for the calendars ("cal1_0" and "cal1_1") will be inserted into those containers.

NOTE: As of 2.4.0, the constructor's ID argument is optional.
The CalendarGroup can be constructed by simply providing a container ID string,
or a reference to a container DIV HTMLElement (the element needs to exist
in the document).
E.g.:

var c = new YAHOO.widget.CalendarGroup("calContainer", configOptions);

or:

var containerDiv = YAHOO.util.Dom.get("calContainer");
var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);



If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
For example if an ID is not provided, and the container's ID is "calContainer", the CalendarGroup's ID will be set to "calContainer_t".</description>
              <params>
                <param name="id" type="String" optional="True">
                  <description>
                  </description>
                </param>
                <param name="container" type="String | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CalendarNavigator" extends="Object" private="True">
          <description>The CalendarNavigator is used along with a Calendar/CalendarGroup to
provide a Month/Year popup navigation control, allowing the user to navigate
to a specific month/year in the Calendar/CalendarGroup without having to
scroll through months sequentially</description>
          <attributes>
            <attribute name="__isIEQuirks" type="object" readonly="False">
              <description>Private property
Private flag, to identify IE Quirks</description>
            </attribute>
            <attribute name="__isMac" type="object" readonly="False">
              <description>Private property
Private flag, to identify MacOS</description>
            </attribute>
            <attribute name="__rendered" type="Boolean" readonly="False">
              <description>Private property
Private internal state property which indicates whether or not the
Navigator has been rendered.</description>
            </attribute>
            <attribute name="_DEFAULT_CFG" type="Object" readonly="False">
              <description>Protected property
Object literal containing the default configuration values for the CalendarNavigator
The configuration object is expected to follow the format below, with the properties being
case sensitive.

strings
Object :  An object with the properties shown below, defining the string labels to use in the Navigator's UI

monthString : The string to use for the month label. Defaults to "Month".
yearString : The string to use for the year label. Defaults to "Year".
submitString : The string to use for the submit button label. Defaults to "Okay".
cancelString : The string to use for the cancel button label. Defaults to "Cancel".
invalidYearString : The string to use for invalid year values. Defaults to "Year needs to be a number".


monthFormatString : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG
initialFocusString : Either "year" or "month" specifying which input control should get initial focus. Defaults to "year"</description>
            </attribute>
            <attribute name="_doc" type="HTMLDocument" readonly="False">
              <description>Protected property
The document containing the Calendar/Calendar group instance</description>
            </attribute>
            <attribute name="_month" type="Number" readonly="False">
              <description>Protected property
Internal state property for the current month index displayed in the navigator</description>
            </attribute>
            <attribute name="_year" type="Number" readonly="False">
              <description>Protected property
Internal state property for the current year displayed in the navigator</description>
            </attribute>
            <attribute name="cal" type="{Calendar|CalendarGroup}" readonly="False">
              <description>The Calendar/CalendarGroup instance to which the navigator belongs</description>
            </attribute>
            <attribute name="cancelEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to hide the navigator without updating the
Calendar/Calendar group</description>
            </attribute>
            <attribute name="errorEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to display validation errors</description>
            </attribute>
            <attribute name="firstCtrl" type="HTMLElement" readonly="False">
              <description>Reference to the first focusable control in the navigator (by default monthEl)</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The unique ID for this CalendarNavigator instance</description>
            </attribute>
            <attribute name="lastCtrl" type="HTMLElement" readonly="False">
              <description>Reference to the last focusable control in the navigator (by default cancelEl)</description>
            </attribute>
            <attribute name="maskEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to render the navigator's mask</description>
            </attribute>
            <attribute name="monthEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to input the month</description>
            </attribute>
            <attribute name="navEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to render the navigator's bounding box</description>
            </attribute>
            <attribute name="submitEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to update the Calendar/Calendar group
with the month/year values</description>
            </attribute>
            <attribute name="CANCEL_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Navigator's ID, to generate
a unique ID for the "Cancel" button.</description>
            </attribute>
            <attribute name="CLASSES" type="Object" readonly="False">
              <description>YAHOO.widget.CalendarNavigator.CLASSES contains constants
for the class values applied to the CalendarNaviatgator's
DOM elements</description>
            </attribute>
            <attribute name="BUTTON" type="String" readonly="False">
              <description>Class applied to buttons wrapping element</description>
            </attribute>
            <attribute name="BUTTONS" type="String" readonly="False">
              <description>Class applied to the submit/cancel button's bounding box</description>
            </attribute>
            <attribute name="DEFAULT" type="String" readonly="False">
              <description>Class applied to default controls</description>
            </attribute>
            <attribute name="ERROR" type="String" readonly="False">
              <description>Class applied to the validation error area's bounding box</description>
            </attribute>
            <attribute name="INVALID" type="String" readonly="False">
              <description>Class applied to controls with invalid data (e.g. a year input field with invalid an year)</description>
            </attribute>
            <attribute name="MASK" type="String" readonly="False">
              <description>Class applied to the Navigator mask's bounding box</description>
            </attribute>
            <attribute name="MONTH" type="String" readonly="False">
              <description>Class applied to the month label/control bounding box</description>
            </attribute>
            <attribute name="MONTH_CTRL" type="String" readonly="False">
              <description>Class applied to the month input control</description>
            </attribute>
            <attribute name="NAV" type="String" readonly="False">
              <description>Class applied to the Calendar Navigator's bounding box</description>
            </attribute>
            <attribute name="NAV_VISIBLE" type="String" readonly="False">
              <description>Class applied to the Calendar/CalendarGroup's bounding box to indicate
the Navigator is currently visible</description>
            </attribute>
            <attribute name="YEAR" type="String" readonly="False">
              <description>Class applied to the year label/control bounding box</description>
            </attribute>
            <attribute name="YEAR_CTRL" type="String" readonly="False">
              <description>Class applied to the year input control</description>
            </attribute>
            <attribute name="ERROR_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Navigator's ID, to generate
a unique ID for the error bounding box.</description>
            </attribute>
            <attribute name="ID_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Calendar/CalendarGroup's ID, to generate
a unique ID for the Navigator and it's bounding box.</description>
            </attribute>
            <attribute name="MONTH_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Navigator's ID, to generate
a unique ID for the month control.</description>
            </attribute>
            <attribute name="SUBMIT_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Navigator's ID, to generate
a unique ID for the "Submit" button.</description>
            </attribute>
            <attribute name="TRIM" type="RegExp" readonly="False">
              <description>Regular expression used to trim strings</description>
            </attribute>
            <attribute name="UPDATE_DELAY" type="Number" readonly="False">
              <description>Artificial delay (in ms) between the time the Navigator is hidden
and the Calendar/CalendarGroup state is updated. Allows the user
the see the Calendar/CalendarGroup page changing. If set to 0
the Calendar/CalendarGroup page will be updated instantly</description>
            </attribute>
            <attribute name="YEAR_SUFFIX" type="String" readonly="False">
              <description>The suffix added to the Navigator's ID, to generate
a unique ID for the year control.</description>
            </attribute>
            <attribute name="YR_MAJOR_INC" type="Number" readonly="False">
              <description>The amount by which to increment the current year value,
when the page up/down key is pressed on the year control</description>
            </attribute>
            <attribute name="YR_MAX_DIGITS" type="Number" readonly="False">
              <description>The number of digits to which the year input control is to be limited.</description>
            </attribute>
            <attribute name="YR_MINOR_INC" type="Number" readonly="False">
              <description>The amount by which to increment the current year value,
when the arrow up/down key is pressed on the year control</description>
            </attribute>
            <attribute name="YR_PATTERN" type="RegExp" readonly="False">
              <description>Regular expression used to validate the year input</description>
            </attribute>
            <attribute name="yearEl" type="HTMLElement" readonly="False">
              <description>Reference to the HTMLElement used to input the year</description>
            </attribute>
          </attributes>
          <functions>
            <function name="__getCfg" returns="void">
              <description>Private property
Retrieve Navigator configuration values from
the parent Calendar/CalendarGroup's config value.

If it has not been set in the user provided configuration, the method will
return the default value of the configuration property, as set in _DEFAULT_CFG</description>
              <params>
                <param name="Case" type="String" optional="False">
                  <description>sensitive property name.</description>
                </param>
                <param name="true," type="Boolean" optional="False">
                  <description>sensitive property name.</description>
                </param>
              </params>
            </function>
            <function name="_getMonthFromUI" returns="Number">
              <description>Protected property
Returns the month value (index), from the month UI element</description>
            </function>
            <function name="_getYearFromUI" returns="Number">
              <description>Protected property
Returns the year value, from the Navitator's year UI element</description>
            </function>
            <function name="_handleDirectionKeys" returns="void">
              <description>Protected property
Default Keyboard event handler to capture up/down/pgup/pgdown
on the Navigator's year control (yearEl).</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleEnterKey" returns="void">
              <description>Protected property
Default Keyboard event handler to capture Enter
on the Navigator's year control (yearEl)</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleShiftTabKey" returns="void">
              <description>Protected property
Default Keyboard event handler to capture Shift-Tab
on the first control (firstCtrl) in the Navigator.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleTabKey" returns="void">
              <description>Protected property
Default Keyboard event handler to capture Tab
on the last control (lastCtrl) in the Navigator.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setFirstLastElements" returns="void">
              <description>Protected property
Sets up references to the first and last focusable element in the Navigator's UI
in terms of tab order (Naviagator's firstEl and lastEl properties). The references
are used to control modality by looping around from the first to the last control
and visa versa for tab/shift-tab navigation.

See applyKeyListeners</description>
            </function>
            <function name="_show" returns="void">
              <description>Protected property
Protected implementation to handle how UI elements are
hidden/shown.</description>
            </function>
            <function name="_syncMask" returns="void">
              <description>Protected property
Used to set the width/height of the mask in pixels to match the Calendar Container.
Currently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).

The method is also registered as an HTMLElement resize listener on the Calendars container element.</description>
            </function>
            <function name="_update" returns="void">
              <description>Protected property
Updates the Calendar rendered state, based on the state of the CalendarNavigator</description>
              <params>
                <param name="cal" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateMonthUI" returns="void">
              <description>Protected property
Updates the Navigator's month UI, based on the month value set on the Navigator object</description>
            </function>
            <function name="_updateYearUI" returns="void">
              <description>Protected property
Updates the Navigator's year UI, based on the year value set on the Navigator object</description>
            </function>
            <function name="applyKeyListeners" returns="void">
              <description>Attaches DOM listeners for keyboard support.
Tab/Shift-Tab looping, Enter Key Submit on Year element,
Up/Down/PgUp/PgDown year increment on Year element

NOTE: MacOSX Safari 2.x doesn't let you tab to buttons and
MacOSX Gecko does not let you tab to buttons or select controls,
so for these browsers, Tab/Shift-Tab looping is limited to the
elements which can be reached using the tab key.</description>
            </function>
            <function name="applyListeners" returns="void">
              <description>Attaches DOM event listeners to the rendered elements

The method will call applyKeyListeners, to setup keyboard specific
listeners</description>
            </function>
            <function name="cancel" returns="void">
              <description>Hides the navigator and mask, without updating the Calendar/CalendarGroup's state</description>
            </function>
            <function name="clearError" returns="void">
              <description>Clears the navigator's error message and hides the error panel</description>
            </function>
            <function name="clearErrors" returns="void">
              <description>Clears all validation and error messages in the UI</description>
            </function>
            <function name="clearYearError" returns="void">
              <description>Removes the validation error UI for the year control</description>
            </function>
            <function name="createMask" returns="void">
              <description>Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups
container.</description>
            </function>
            <function name="createNav" returns="void">
              <description>Creates the navigator's containing HTMLElement, it's contents, and appends
the containg element to the Calendar/CalendarGroup's container.</description>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the Navigator object and any HTML references</description>
            </function>
            <function name="erase" returns="void">
              <description>Removes all renderered HTML elements for the Navigator from
the DOM, purges event listeners and clears (nulls) any property
references to HTML references</description>
            </function>
            <function name="getMonth" returns="Number">
              <description>Returns the current month set on the navigator
Note: This may not be the month set in the UI, if
the UI contains an invalid value.</description>
            </function>
            <function name="getYear" returns="Number">
              <description>Returns the current year set on the navigator
Note: This may not be the year set in the UI, if
the UI contains an invalid value.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the navigator and mask
The show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events</description>
            </function>
            <function name="hideMask" returns="void">
              <description>Hides the navigator's mask element</description>
            </function>
            <function name="init" returns="void">
              <description>Init lifecycle method called as part of construction</description>
              <params>
                <param name="cal" type="Calendar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="purgeKeyListeners" returns="void">
              <description>Removes/purges DOM listeners for keyboard support</description>
            </function>
            <function name="purgeListeners" returns="void">
              <description>Removes/purges DOM event listeners from the rendered elements</description>
            </function>
            <function name="render" returns="void">
              <description>Renders the HTML for the navigator, adding it to the
document and attaches event listeners if it has not
already been rendered.</description>
            </function>
            <function name="renderButton" returns="String">
              <description>Renders the submit/cancel buttons for the navigator</description>
            </function>
            <function name="renderNavContents" returns="Array">
              <description>Renders the contents of the navigator</description>
              <params>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="renderYear" returns="Array">
              <description>Renders the year label and control for the navigator</description>
              <params>
                <param name="html" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setError" returns="void">
              <description>Displays an error message in the Navigator's error panel</description>
              <params>
                <param name="msg" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setInitialFocus" returns="void">
              <description>Sets the initial focus, based on the configured value</description>
            </function>
            <function name="setMonth" returns="void">
              <description>Sets the current month on the Navigator, and updates the UI</description>
              <params>
                <param name="nMonth" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYear" returns="void">
              <description>Sets the current year on the Navigator, and updates the UI. If the
provided year is invalid, it will not be set.</description>
              <params>
                <param name="nYear" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setYearError" returns="void">
              <description>Displays the validation error UI for the year control</description>
            </function>
            <function name="show" returns="void">
              <description>Displays the navigator and mask, updating the input controls to reflect the
currently set month and year. The show method will invoke the render method
if the navigator has not been renderered already, allowing for lazy rendering
of the control.
The show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events</description>
            </function>
            <function name="showMask" returns="void">
              <description>Displays the navigator's mask element</description>
            </function>
            <function name="submit" returns="void">
              <description>Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid.

If the currently set month/year is invalid, a validation error will be displayed and the
Calendar/CalendarGroup's pagedate will not be updated.</description>
            </function>
            <function name="validate" returns="Boolean">
              <description>Validates the current state of the UI controls</description>
            </function>
            <function name="CalendarNavigator" returns="YAHOO.widget.CalendarNavigator">
              <description>Class YAHOO.widget.CalendarNavigator constructor
The CalendarNavigator is used along with a Calendar/CalendarGroup to
provide a Month/Year popup navigation control, allowing the user to navigate
to a specific month/year in the Calendar/CalendarGroup without having to
scroll through months sequentially</description>
              <params>
                <param name="cal" type="Calendar|CalendarGroup" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Carousel" extends="YAHOO.util.Element" private="True">
          <description>The Carousel widget.</description>
          <attributes>
            <attribute name="_animObj" type="object" readonly="False">
              <description>Private property
The Animation object.</description>
            </attribute>
            <attribute name="_carouselEl" type="object" readonly="False">
              <description>Private property
The Carousel element.</description>
            </attribute>
            <attribute name="_clipEl" type="object" readonly="False">
              <description>Private property
The Carousel clipping container element.</description>
            </attribute>
            <attribute name="_firstItem" type="object" readonly="False">
              <description>Private property
The current first index of the Carousel.</description>
            </attribute>
            <attribute name="_hasFocus" type="object" readonly="False">
              <description>Private property
Does the Carousel element have focus?</description>
            </attribute>
            <attribute name="_hasRendered" type="object" readonly="False">
              <description>Private property
Is the Carousel rendered already?</description>
            </attribute>
            <attribute name="_isAnimationInProgress" type="object" readonly="False">
              <description>Private property
Is the animation still in progress?</description>
            </attribute>
            <attribute name="_isAutoPlayInProgress" type="object" readonly="False">
              <description>Private property
Is the auto-scrolling of Carousel in progress?</description>
            </attribute>
            <attribute name="_itemsTable" type="object" readonly="False">
              <description>Private property
The table of items in the Carousel.
The numItems is the number of items in the Carousel, items being the
array of items in the Carousel.  The size is the size of a single
item in the Carousel.  It is cached here for efficiency (to avoid
computing the size multiple times).</description>
            </attribute>
            <attribute name="_navBtns" type="object" readonly="False">
              <description>Private property
The Carousel navigation buttons.</description>
            </attribute>
            <attribute name="_navEl" type="object" readonly="False">
              <description>Private property
The Carousel navigation.</description>
            </attribute>
            <attribute name="_nextEnabled" type="object" readonly="False">
              <description>Private property
Status of the next navigation item.</description>
            </attribute>
            <attribute name="_pages" type="object" readonly="False">
              <description>Private property
The Carousel pages structure.
This is an object of the total number of pages and the current page.</description>
            </attribute>
            <attribute name="_prevEnabled" type="object" readonly="False">
              <description>Private property
Status of the previous navigation item.</description>
            </attribute>
            <attribute name="_recomputeSize" type="object" readonly="False">
              <description>Private property
Whether the Carousel size needs to be recomputed or not?</description>
            </attribute>
            <attribute name="BUTTON" type="object" readonly="False">
              <description>The class name of the Carousel navigation buttons.</description>
            </attribute>
            <attribute name="CAROUSEL" type="object" readonly="False">
              <description>The class name of the Carousel element.</description>
            </attribute>
            <attribute name="CAROUSEL_EL" type="object" readonly="False">
              <description>The class name of the container of the items in the Carousel.</description>
            </attribute>
            <attribute name="CONTAINER" type="object" readonly="False">
              <description>The class name of the Carousel's container element.</description>
            </attribute>
            <attribute name="CONTENT" type="object" readonly="False">
              <description>The class name of the Carousel's container element.</description>
            </attribute>
            <attribute name="DISABLED" type="object" readonly="False">
              <description>The class name of a disabled navigation button.</description>
            </attribute>
            <attribute name="FIRST_NAV" type="object" readonly="False">
              <description>The class name of the first Carousel navigation button.</description>
            </attribute>
            <attribute name="FIRST_NAV_DISABLED" type="object" readonly="False">
              <description>The class name of a first disabled navigation button.</description>
            </attribute>
            <attribute name="FIRST_PAGE" type="object" readonly="False">
              <description>The class name of a first page element.</description>
            </attribute>
            <attribute name="FIRST_VISIBLE" type="object" readonly="False">
              <description>The offset of the first visible item in the Carousel.</description>
            </attribute>
            <attribute name="FOCUSSED_BUTTON" type="object" readonly="False">
              <description>The class name of the Carousel navigation button that has focus.</description>
            </attribute>
            <attribute name="HORIZONTAL" type="object" readonly="False">
              <description>The class name of a horizontally oriented Carousel.</description>
            </attribute>
            <attribute name="HORZ_MIN_WIDTH" type="object" readonly="False">
              <description>The minimum width of the horizontal Carousel container to support
the navigation buttons.</description>
            </attribute>
            <attribute name="instances" type="object" readonly="False">
              <description>Private property
The internal table of Carousel instances.</description>
            </attribute>
            <attribute name="ITEM_LOADING" type="object" readonly="False">
              <description>The element to be used as the progress indicator when the item
is still being loaded.</description>
            </attribute>
            <attribute name="ITEM_LOADING_CONTENT" type="object" readonly="False">
              <description>The content to be used as the progress indicator when the item
is still being loaded.</description>
            </attribute>
            <attribute name="MAX_PAGER_BUTTONS" type="object" readonly="False">
              <description>The maximum number of pager buttons allowed beyond which the UI
of the pager would be a drop-down of pages instead of buttons.</description>
            </attribute>
            <attribute name="MIN_WIDTH" type="object" readonly="False">
              <description>The class name that will be set if the Carousel adjusts itself
for a minimum width.</description>
            </attribute>
            <attribute name="NAV_CONTAINER" type="object" readonly="False">
              <description>The class name for the navigation container for prev/next.</description>
            </attribute>
            <attribute name="NAVIGATION" type="object" readonly="False">
              <description>The navigation element container class name.</description>
            </attribute>
            <attribute name="NEXT_BUTTON_TEXT" type="object" readonly="False">
              <description>The next navigation button name/text.</description>
            </attribute>
            <attribute name="NEXT_NAV" type="object" readonly="False">
              <description>The class name of the next Carousel navigation button.</description>
            </attribute>
            <attribute name="NEXT_PAGE" type="object" readonly="False">
              <description>The class name of the next navigation link. This variable is
not only used for styling, but also for identifying the link
within the Carousel container.</description>
            </attribute>
            <attribute name="NUM_VISIBLE" type="object" readonly="False">
              <description>The number of visible items in the Carousel.</description>
            </attribute>
            <attribute name="PAGE_FOCUS" type="object" readonly="False">
              <description>The class name of the focussed page navigation.  This class is
specifically used for the ugly focus handling in Opera.</description>
            </attribute>
            <attribute name="PAGER_PREFIX_TEXT" type="object" readonly="False">
              <description>The prefix text for the pager in case the UI is a drop-down.</description>
            </attribute>
            <attribute name="PREV_PAGE" type="object" readonly="False">
              <description>The class name of the previous navigation link. This variable
is not only used for styling, but also for identifying the link
within the Carousel container.</description>
            </attribute>
            <attribute name="PREVIOUS_BUTTON_TEXT" type="object" readonly="False">
              <description>The previous navigation button name/text.</description>
            </attribute>
            <attribute name="SELECTED_ITEM" type="object" readonly="False">
              <description>The class name of the selected item.</description>
            </attribute>
            <attribute name="SELECTED_NAV" type="object" readonly="False">
              <description>The class name of the selected paging navigation.</description>
            </attribute>
            <attribute name="VERT_MIN_WIDTH" type="object" readonly="False">
              <description>The minimum width of the vertical Carousel container to support
the navigation buttons.</description>
            </attribute>
            <attribute name="VERTICAL" type="object" readonly="False">
              <description>The class name of a vertically oriented Carousel.</description>
            </attribute>
            <attribute name="VERTICAL_CONTAINER" type="object" readonly="False">
              <description>The class name of the (vertical) Carousel's container element.</description>
            </attribute>
            <attribute name="VISIBLE" type="object" readonly="False">
              <description>The class name of a visible Carousel.</description>
            </attribute>
            <attribute name="WidgetName" type="object" readonly="False">
              <description>Private property
The widget name.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_animateAndSetCarouselOffset" returns="void">
              <description>Protected property
Set the Carousel offset to the passed offset after animating.</description>
              <params>
                <param name="offset" type="Integer" optional="False">
                  <description>The offset to which the Carousel has to be
scrolled to.</description>
                </param>
                <param name="item" type="Integer" optional="False">
                  <description>The offset to which the Carousel has to be
scrolled to.</description>
                </param>
                <param name="sentinel" type="Integer" optional="False">
                  <description>The offset to which the Carousel has to be
scrolled to.</description>
                </param>
              </params>
            </function>
            <function name="_animationCompleteHandler" returns="void">
              <description>Protected property
Handle the animation complete event.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>The event parameters.</description>
                </param>
                <param name="p" type="Array" optional="False">
                  <description>The event parameters.</description>
                </param>
                <param name="o" type="Object" optional="False">
                  <description>The event parameters.</description>
                </param>
              </params>
            </function>
            <function name="_autoScroll" returns="void">
              <description>Protected property
Automatically scroll the contents of the Carousel.</description>
            </function>
            <function name="_getSelectedItem" returns="Number">
              <description>Protected property
Get the value for the selected item.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getValidIndex" returns="Object">
              <description>Protected property
Return a valid item for a possibly out of bounds index considering
the isCircular property.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_itemClickHandler" returns="void">
              <description>Protected property
The "click" handler for the item.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_keyboardEventHandler" returns="void">
              <description>Protected property
The keyboard event handler for Carousel.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_loadItems" returns="void">
              <description>Protected property
The load the required set of items that are needed for display.</description>
            </function>
            <function name="_pagerClickHandler" returns="void">
              <description>Protected property
The "click" handler for the pager navigation.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_refreshUi" returns="void">
              <description>Protected property
Refresh the widget UI if it is not already rendered, on first item
addition.</description>
            </function>
            <function name="_setCarouselOffset" returns="void">
              <description>Protected property
Set the Carousel offset to the passed offset.</description>
            </function>
            <function name="_setClipContainerSize" returns="void">
              <description>Protected property
Set the clip container size (based on the new numVisible value).</description>
              <params>
                <param name="clip" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="num" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setContainerSize" returns="void">
              <description>Protected property
Set the container size.</description>
              <params>
                <param name="clip" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setFirstVisible" returns="Number">
              <description>Protected property
Set the value for the Carousel's first visible item.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setNavigation" returns="Object">
              <description>Protected property
Set the value for the Carousel's navigation.</description>
              <params>
                <param name="cfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setNumItems" returns="Number">
              <description>Protected property
Set the number of items in the Carousel.
Warning: Setting this to a lower number than the current removes
items from the end.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setNumVisible" returns="Number">
              <description>Protected property
Set the value for the number of visible items in the Carousel.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setOrientation" returns="Boolean">
              <description>Protected property
Set the orientation of the Carousel.</description>
              <params>
                <param name="val" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setRevealAmount" returns="Number">
              <description>Protected property
Set the value for the reveal amount percentage in the Carousel.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setSelectedItem" returns="void">
              <description>Protected property
Set the value for the selected item.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setupCarouselNavigation" returns="void">
              <description>Protected property
Setup/Create the Carousel navigation element (if needed).</description>
            </function>
            <function name="_syncUiForItemAdd" returns="void">
              <description>Protected property
Synchronize and redraw the UI after an item is added.</description>
            </function>
            <function name="_syncUiForLazyLoading" returns="void">
              <description>Protected property
Synchronize and redraw the UI for lazy loading.</description>
            </function>
            <function name="_updateNavButtons" returns="void">
              <description>Protected property
Set the correct class for the navigation buttons.</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="setFocus" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updatePagerButtons" returns="void">
              <description>Protected property
Update the UI for the pager buttons based on the current page and
the number of pages.</description>
            </function>
            <function name="_updatePagerMenu" returns="void">
              <description>Protected property
Update the UI for the pager menu based on the current page and
the number of pages.  If the number of pages is greater than
MAX_PAGER_BUTTONS, then the selection of pages is provided by a drop
down menu instead of a set of buttons.</description>
            </function>
            <function name="_updateTabIndex" returns="void">
              <description>Protected property
Set the correct tab index for the Carousel items.</description>
              <params>
                <param name="el" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateAnimation" returns="Boolean">
              <description>Protected property
Validate animation parameters.</description>
              <params>
                <param name="cfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateFirstVisible" returns="Boolean">
              <description>Protected property
Validate the firstVisible value.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateNavigation" returns="Boolean">
              <description>Protected property
Validate and navigation parameters.</description>
              <params>
                <param name="cfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateNumItems" returns="Boolean">
              <description>Protected property
Validate the numItems value.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateNumVisible" returns="Boolean">
              <description>Protected property
Validate the numVisible value.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateRevealAmount" returns="Boolean">
              <description>Protected property
Validate the revealAmount value.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateScrollIncrement" returns="Boolean">
              <description>Protected property
Validate the scrollIncrement value.</description>
              <params>
                <param name="val" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addItem" returns="Boolean">
              <description>Insert or append an item to the Carousel.</description>
              <params>
                <param name="item" type="String | Object | HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addItems" returns="Boolean">
              <description>Insert or append multiple items to the Carousel.</description>
              <params>
                <param name="items" type="Array} An array of items to be added with each item&#xA;representing an item, index pair [{item, index" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blur" returns="void">
              <description>Remove focus from the Carousel.</description>
            </function>
            <function name="clearItems&#xA;public" returns="void">
              <description>Clears the items from Carousel.</description>
            </function>
            <function name="createCarousel" returns="void">
              <description>Protected property
Create the Carousel.</description>
              <params>
                <param name="elId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createCarouselClip" returns="void">
              <description>Protected property
Create the Carousel clip container.</description>
            </function>
            <function name="createCarouselItem" returns="void">
              <description>Protected property
Create the Carousel item.</description>
              <params>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="createElement" returns="void">
              <description>Private property
Create an element, set its class name and optionally install the element
to its parent.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Set focus on the Carousel.</description>
            </function>
            <function name="getById" returns="void">
              <description>Return the appropriate Carousel object based on the id associated with
the Carousel element or false if none match.</description>
            </function>
            <function name="getCarouselItemSize" returns="void">
              <description>Private property
Compute and return the height or width of a single Carousel item
depending upon the orientation.</description>
              <params>
                <param name="which" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElementForItem" returns="Element">
              <description>Return the carouselItemEl at index or null if the index is not
found.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElementForItems" returns="Array">
              <description>Return the carouselItemEl for all items in the Carousel.</description>
            </function>
            <function name="getFirstVisibleForPosition" returns="void">
              <description>Private property
Return the index of the first item in the view port for displaying item
in "pos".</description>
              <params>
                <param name="pos" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getItem" returns="Object">
              <description>Return the item at index or null if the index is not found.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getItemPositionById" returns="void">
              <description>Return the position of the Carousel item that has the id "id", or -1
if the id is not found.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getItems" returns="Array">
              <description>Return all items as an array.</description>
            </function>
            <function name="getScrollOffset" returns="void">
              <description>Private property
Return the scrolling offset size given the number of elements to
scroll.</description>
              <params>
                <param name="delta" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getStyle" returns="void">
              <description>Private property
Get the computed style of an element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="style" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getVisibleItems" returns="Array">
              <description>Return all visible items as an array.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hide the Carousel.</description>
            </function>
            <function name="init" returns="void">
              <description>Initialize the Carousel.</description>
              <params>
                <param name="el" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initialize the configuration attributes used to create the Carousel.</description>
              <params>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initEvents" returns="void">
              <description>Initialize and bind the event handlers.</description>
            </function>
            <function name="isAnimating" returns="Boolean">
              <description>Return true if the Carousel is still animating, or false otherwise.</description>
            </function>
            <function name="isAutoPlayOn" returns="Boolean">
              <description>Return true if the auto-scrolling of Carousel is "on", or false
otherwise.</description>
            </function>
            <function name="parseCarousel" returns="Boolean">
              <description>Protected property
Find the Carousel within a container. The Carousel is identified by
the first element that matches the carousel element tag or the
element that has the Carousel class.</description>
              <params>
                <param name="parent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="parseCarouselItems" returns="void">
              <description>Protected property
Find the items within the Carousel and add them to the items table.
A Carousel item is identified by elements that matches the carousel
item element tag.</description>
            </function>
            <function name="parseCarouselNavigation" returns="Boolean">
              <description>Protected property
Find the Carousel navigation within a container. The navigation
elements need to match the carousel navigation class names.</description>
              <params>
                <param name="parent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeItem" returns="Boolean">
              <description>Remove an item at index from the Carousel.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="Boolean">
              <description>Render the Carousel.</description>
              <params>
                <param name="appendTo" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollBackward" returns="void">
              <description>Scroll the Carousel by an item backward.</description>
            </function>
            <function name="scrollForward" returns="void">
              <description>Scroll the Carousel by an item forward.</description>
            </function>
            <function name="scrollPageBackward" returns="void">
              <description>Private property
Scroll the Carousel by a page backward.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollPageForward" returns="void">
              <description>Private property
Scroll the Carousel by a page forward.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="scrollTo" returns="void">
              <description>Scroll the Carousel to make the item the first visible item.</description>
              <params>
                <param name="item" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dontSelect" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectNextItem" returns="void">
              <description>Select the next item in the Carousel.</description>
            </function>
            <function name="selectPreviousItem" returns="void">
              <description>Select the previous item in the Carousel.</description>
            </function>
            <function name="setItemSelection" returns="void">
              <description>Private property
Set the selected item.</description>
              <params>
                <param name="newpos" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oldpos" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Display the Carousel.</description>
            </function>
            <function name="startAutoPlay" returns="void">
              <description>Start auto-playing the Carousel.</description>
            </function>
            <function name="stopAutoPlay" returns="void">
              <description>Stop auto-playing the Carousel.</description>
            </function>
            <function name="syncNavigation" returns="void">
              <description>Private property
Fire custom events for enabling/disabling navigation elements.</description>
            </function>
            <function name="syncPagerUi" returns="void">
              <description>Private property
Synchronize and redraw the Pager UI if necessary.</description>
            </function>
            <function name="syncUi" returns="void">
              <description>Private property
Handle UI update.
Call the appropriate methods on events fired when an item is added, or
removed for synchronizing the DOM.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Return the string representation of the Carousel.</description>
            </function>
            <function name="updateStateAfterScroll" returns="void">
              <description>Private property
Update the state variables after scrolling the Carousel view port.</description>
              <params>
                <param name="item" type="Integer" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sentinel" type="Integer" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Carousel" returns="YAHOO.widget.Carousel">
              <description>Class YAHOO.widget.Carousel constructor
The Carousel widget.</description>
              <params>
                <param name="el" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="cfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CartesianChart" extends="Object" private="True">
          <description>CartesianChart class for the YUI Charts widget.</description>
          <attributes>
            <attribute name="_xAxisLabelFunction" type="String" readonly="False">
              <description>Private property
Stores a reference to the xAxis labelFunction created by
YAHOO.widget.FlashAdapter.createProxyFunction()</description>
            </attribute>
            <attribute name="_yAxisLabelFunction" type="String" readonly="False">
              <description>Private property
Stores a reference to the yAxis labelFunction created by
YAHOO.widget.FlashAdapter.createProxyFunction()</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_getXField" returns="void">
              <description>Private property
Getter for the xField attribute.</description>
            </function>
            <function name="_getYField" returns="void">
              <description>Private property
Getter for the yField attribute.</description>
            </function>
            <function name="_initAttributes" returns="void">
              <description>Private property
Initializes the attributes.</description>
            </function>
            <function name="_setXAxis" returns="void">
              <description>Private property
Setter for the xAxis attribute.</description>
            </function>
            <function name="_setXField" returns="void">
              <description>Private property
Setter for the xField attribute.</description>
            </function>
            <function name="_setYAxis" returns="void">
              <description>Private property
Getter for the yAxis attribute.</description>
            </function>
            <function name="_setYField" returns="void">
              <description>Private property
Setter for the yField attribute.</description>
            </function>
            <function name="CartesianChart" returns="YAHOO.widget.CartesianChart">
              <description>Class YAHOO.widget.CartesianChart constructor
CartesianChart class for the YUI Charts widget.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CartesianSeries" extends="Object" private="True">
          <description>Functionality common to most series appearing in cartesian charts.
Generally, a CartesianSeries object shouldn't be
instantiated directly. Instead, a subclass with a concrete implementation
should be used.</description>
          <attributes>
            <attribute name="xField" type="String" readonly="False">
              <description>The field used to access the x-axis value from the items from the data source.</description>
            </attribute>
            <attribute name="yField" type="String" readonly="False">
              <description>The field used to access the y-axis value from the items from the data source.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="CartesianSeries" returns="YAHOO.widget.CartesianSeries">
              <description>Class YAHOO.widget.CartesianSeries constructor
Functionality common to most series appearing in cartesian charts.
Generally, a CartesianSeries object shouldn't be
instantiated directly. Instead, a subclass with a concrete implementation
should be used.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CategoryAxis" extends="Object" private="True">
          <description>A type of axis that displays items in categories.</description>
          <attributes>
            <attribute name="calcualateCategoryCount" type="Boolean" readonly="False">
              <description>Indicates whether or not to calculate the number of categories (ticks and labels)
when there is not enough room to display all labels on the axis. If set to true, the axis
will determine the number of categories to plot. If not, all categories will be plotted.</description>
            </attribute>
            <attribute name="categoryNames" type="Array" readonly="False">
              <description>A list of category names to display along this axis.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="CategoryAxis" returns="YAHOO.widget.CategoryAxis">
              <description>Class YAHOO.widget.CategoryAxis constructor
A type of axis that displays items in categories.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>Factory class for instantiating a BaseCellEditor subclass.</description>
          <functions>
            <function name="CellEditor" returns="YAHOO.widget.CellEditor">
              <description>Class YAHOO.widget.CellEditor constructor
Factory class for instantiating a BaseCellEditor subclass.</description>
              <params>
                <param name="sType" type="String" optional="False">
                  <description>Type indicator, to map to YAHOO.widget.DataTable.Editors.</description>
                </param>
                <param name="oConfigs" type="Object" optional="False">
                  <description>Type indicator, to map to YAHOO.widget.DataTable.Editors.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Chart" extends="Object" private="True">
          <description>Chart class for the YUI Charts widget.</description>
          <attributes>
            <attribute name="_dataSource" type="object" readonly="False">
              <description>Private property
Storage for the dataSource attribute.</description>
            </attribute>
            <attribute name="_dataTipFunction" type="String" readonly="False">
              <description>Private property
Stores a reference to the dataTipFunction created by
YAHOO.widget.FlashAdapter.createProxyFunction()</description>
            </attribute>
            <attribute name="_pollingID" type="Number" readonly="False">
              <description>Private property
The id returned from the DataSource's setInterval function.</description>
            </attribute>
            <attribute name="_pollingInterval" type="Number" readonly="False">
              <description>Private property
The time, in ms, between requests for data.</description>
            </attribute>
            <attribute name="_request" type="object" readonly="False">
              <description>Private property
Storage for the request attribute.</description>
            </attribute>
            <attribute name="_seriesDefs" type="object" readonly="False">
              <description>Private property
Storage for the series attribute.</description>
            </attribute>
            <attribute name="_seriesLabelFunctions" type="Array" readonly="False">
              <description>Private property
Stores references to series labelFunction values created by
YAHOO.widget.FlashAdapter.createProxyFunction()</description>
            </attribute>
            <attribute name="_type" type="String" readonly="False">
              <description>Private property
The type of this chart instance.</description>
            </attribute>
            <attribute name="SWFURL" type="object" readonly="False">
              <description>Private property
Storage for the dataTipFunction attribute.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_getCategoryNames" returns="void">
              <description>Private property
Getter for the categoryNames attribute.</description>
            </function>
            <function name="_getDataSource" returns="void">
              <description>Private property
Getter for the dataSource attribute.</description>
            </function>
            <function name="_getPolling" returns="void">
              <description>Private property
Getter for the polling attribute.</description>
            </function>
            <function name="_getRequest" returns="void">
              <description>Private property
Getter for the request attribute.</description>
            </function>
            <function name="_getSeriesDefs" returns="void">
              <description>Private property
Getter for the series attribute.</description>
            </function>
            <function name="_initAttributes" returns="void">
              <description>Private property
Initializes the attributes.</description>
            </function>
            <function name="_loadDataHandler" returns="void">
              <description>Private property
Called when the DataSource receives new data. The series definitions are used
to build a data provider for the SWF chart.</description>
            </function>
            <function name="_loadHandler" returns="void">
              <description>Private property
Called when the SWF is ready for communication. Sets the type, initializes
the styles, and sets the DataSource.</description>
            </function>
            <function name="_setCategoryNames" returns="void">
              <description>Private property
Setter for the categoryNames attribute.</description>
            </function>
            <function name="_setDataSource" returns="void">
              <description>Private property
Setter for the dataSource attribute.</description>
            </function>
            <function name="_setDataTipFunction" returns="void">
              <description>Private property
Setter for the dataTipFunction attribute.</description>
            </function>
            <function name="_setPolling" returns="void">
              <description>Private property
Setter for the polling attribute.</description>
            </function>
            <function name="_setRequest" returns="void">
              <description>Private property
Setter for the request attribute.</description>
            </function>
            <function name="_setSeriesDefs" returns="void">
              <description>Private property
Setter for the series attribute.</description>
            </function>
            <function name="refreshData" returns="void">
              <description>Sends (or resends) the request to the DataSource.</description>
            </function>
            <function name="setSeriesStyles" returns="void">
              <description>Sets the styles on all series in the Chart.</description>
              <params>
                <param name="styles" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStyle" returns="void">
              <description>Sets a single style value on the Chart instance.</description>
              <params>
                <param name="name" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStyles" returns="void">
              <description>Resets all styles on the Chart instance.</description>
              <params>
                <param name="styles" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the Chart instance.</description>
            </function>
            <function name="Chart" returns="YAHOO.widget.Chart">
              <description>Class YAHOO.widget.Chart constructor
Chart class for the YUI Charts widget.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.CheckboxCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The CheckboxCellEditor class provides functionality for inline editing
DataTable cell data with checkboxes.</description>
          <attributes>
            <attribute name="checkboxes" type="HTMLElement[]" readonly="False">
              <description>Reference to the checkbox elements.</description>
            </attribute>
            <attribute name="checkboxOptions" type="String[] | Object[]" readonly="False">
              <description>Array of checkbox values. Can either be a simple array (e.g., ["red","green","blue"])
or a an array of objects (e.g., [{label:"red", value:"#FF0000"},
{label:"green", value:"#00FF00"}, {label:"blue", value:"#0000FF"}]).</description>
            </attribute>
            <attribute name="value" type="String[]" readonly="False">
              <description>Array of checked values</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in CheckboxCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from CheckboxCellEditor.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a form with input(s) type=checkbox.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets CheckboxCellEditor UI to initial state.</description>
            </function>
            <function name="CheckboxCellEditor" returns="YAHOO.widget.CheckboxCellEditor">
              <description>Class YAHOO.widget.CheckboxCellEditor constructor
The CheckboxCellEditor class provides functionality for inline editing
DataTable cell data with checkboxes.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ColorPicker" extends="YAHOO.util.Element" private="True">
          <description>A widget to select colors</description>
          <attributes>
            <attribute name="DEFAULT" type="object" readonly="False">
              <description>Constants for the control's default default values</description>
            </attribute>
            <attribute name="hueSlider" type="YAHOO.widget.Slider" readonly="False">
              <description>The hue slider</description>
            </attribute>
            <attribute name="ID" type="object" readonly="False">
              <description>The element ids used by this control</description>
            </attribute>
            <attribute name="B" type="String" readonly="False">
              <description>The id for the "blue" form field</description>
            </attribute>
            <attribute name="B_HEX" type="String" readonly="False">
              <description>The id for the "blue" hex pair output</description>
            </attribute>
            <attribute name="CONTROLS" type="object" readonly="False">
              <description>The id for the control details</description>
            </attribute>
            <attribute name="CONTROLS_LABEL" type="object" readonly="False">
              <description>The id for the controls section header</description>
            </attribute>
            <attribute name="G" type="String" readonly="False">
              <description>The id for the "green" form field</description>
            </attribute>
            <attribute name="G_HEX" type="String" readonly="False">
              <description>The id for the "green" hex pair output</description>
            </attribute>
            <attribute name="H" type="String" readonly="False">
              <description>The id for the "hue" form field</description>
            </attribute>
            <attribute name="HEX" type="String" readonly="False">
              <description>The id for the hex value form field</description>
            </attribute>
            <attribute name="HEX_CONTROLS" type="object" readonly="False">
              <description>The id for the hsv controls</description>
            </attribute>
            <attribute name="HEX_SUMMARY" type="object" readonly="False">
              <description>The id for the hex summary</description>
            </attribute>
            <attribute name="HSV_CONTROLS" type="object" readonly="False">
              <description>The id for the hsv controls</description>
            </attribute>
            <attribute name="HUE_BG" type="String" readonly="False">
              <description>The id for the hue slider</description>
            </attribute>
            <attribute name="HUE_THUMB" type="String" readonly="False">
              <description>The id for the hue thumb</description>
            </attribute>
            <attribute name="PICKER_BG" type="String" readonly="False">
              <description>The id for the picker region slider</description>
            </attribute>
            <attribute name="PICKER_THUMB" type="String" readonly="False">
              <description>The id for the picker region thumb</description>
            </attribute>
            <attribute name="R" type="String" readonly="False">
              <description>The id for the "red" form field</description>
            </attribute>
            <attribute name="R_HEX" type="String" readonly="False">
              <description>The id for the "red" hex pair output</description>
            </attribute>
            <attribute name="RGB_CONTROLS" type="object" readonly="False">
              <description>The id for the rgb controls</description>
            </attribute>
            <attribute name="S" type="String" readonly="False">
              <description>The id for the "saturation" form field</description>
            </attribute>
            <attribute name="SWATCH" type="String" readonly="False">
              <description>The id for the color swatch</description>
            </attribute>
            <attribute name="V" type="String" readonly="False">
              <description>The id for the "value" form field</description>
            </attribute>
            <attribute name="WEBSAFE_SWATCH" type="String" readonly="False">
              <description>The id for the websafe color swatch</description>
            </attribute>
            <attribute name="IMAGE" type="object" readonly="False">
              <description>Constants for the default image locations for img tags that are
generated by the control.  They can be modified by passing the
complete list to the contructor for the "images" attribute</description>
            </attribute>
            <attribute name="OPT" type="object" readonly="False">
              <description>Constants for the control's configuration attributes</description>
            </attribute>
            <attribute name="pickerSlider" type="YAHOO.widget.Slider" readonly="False">
              <description>The picker region</description>
            </attribute>
            <attribute name="skipAnim" type="Boolean" readonly="False">
              <description>Flag to allow individual UI updates to forego animation if available.
True during construction for initial thumb placement.  Set to false
after that.</description>
            </attribute>
            <attribute name="TXT" type="object" readonly="False">
              <description>Constants for any script-generated messages.  The values here
are the default messages.  They can be updated by providing
the complete list to the constructor for the "txt" attribute.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_bindUI" returns="void">
              <description>Protected property
Adds event listeners to Sliders and UI elements.  Wires everything
up.</description>
            </function>
            <function name="_createHostElement" returns="void">
              <description>Protected property
Creates the host element if it doesn't exist</description>
            </function>
            <function name="_getCommand" returns="int">
              <description>Protected property
Key map to well-known commands for txt field input</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getH" returns="int">
              <description>Protected property
Translates the slider value into hue, int[0,359]</description>
            </function>
            <function name="_getS" returns="int">
              <description>Protected property
Translates the slider value into saturation, int[0,1], left to right</description>
            </function>
            <function name="_getV" returns="int">
              <description>Protected property
Translates the slider value into value/brightness, int[0,1], top
to bottom</description>
            </function>
            <function name="_getValuesFromSliders" returns="void">
              <description>Protected property
Reads the sliders and converts the values to RGB, updating the
internal state for all the individual form fields</description>
            </function>
            <function name="_hexFieldKeypress" returns="void">
              <description>Protected property
Handle keydown on the hex field</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prop" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_hexOnly" returns="boolean">
              <description>Protected property
Allows numbers and special chars, and by default allows a-f.
Used for the hex field keypress handler.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="numbersOnly" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_hideShowEl" returns="void">
              <description>Protected property
Returns the cached element reference.  If the id is not a string, it
is assumed that it is an element and this is returned.</description>
              <params>
                <param name="id" type="string|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="on" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initElements" returns="void">
              <description>Protected property
Creates any missing DOM structure.</description>
            </function>
            <function name="_initSliders" returns="void">
              <description>Protected property
Creates the Hue and Value/Saturation Sliders.</description>
            </function>
            <function name="_numbersOnly" returns="boolean">
              <description>Protected property
Allows numbers and special chars only.  Used for the
rgb and hsv fields keypress handler.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onHueSliderChange" returns="void">
              <description>Protected property
Event handler for the hue slider.</description>
              <params>
                <param name="newOffset" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onPickerSliderChange" returns="void">
              <description>Protected property
Event handler for the picker slider, which controls the
saturation and value/brightness.</description>
              <params>
                <param name="newOffset" type="{x: int, y: int}" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_rgbFieldKeypress" returns="void">
              <description>Protected property
Handle keypress on one of the rgb or hsv fields.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prop" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateFormFields" returns="void">
              <description>Protected property
Updates the form field controls with the state data contained
in the control.</description>
            </function>
            <function name="_updateHex" returns="void">
              <description>Protected property
Parses the hex string to normalize shorthand values, converts
the hex value to rgb and updates the rgb attribute (which
updates the state for all of the other values)
method _updateHex</description>
            </function>
            <function name="_updateHueSlider" returns="void">
              <description>Protected property
Moves the hue slider into the position dictated by the current state
of the control</description>
            </function>
            <function name="_updatePickerSlider" returns="void">
              <description>Protected property
Moves the picker slider into the position dictated by the current state
of the control</description>
            </function>
            <function name="_updateRGB" returns="void">
              <description>Protected property
Updates the rgb attribute with the current state of the r,g,b
fields.  This is invoked from change listeners on these
attributes to facilitate updating these values from the
individual form fields</description>
            </function>
            <function name="_updateRGBFromHSV" returns="void">
              <description>Protected property
Updates the RGB values from the current state of the HSV
values.  Executed when the one of the HSV form fields are
updated
_updateRGBFromHSV</description>
            </function>
            <function name="_updateSliders" returns="void">
              <description>Protected property
Moves the sliders into the position dictated by the current state
of the control</description>
            </function>
            <function name="_updateSwatch" returns="void">
              <description>Protected property
Updates the background of the swatch with the current rbg value.
Also updates the websafe swatch to the closest websafe color</description>
            </function>
            <function name="_useFieldValue" returns="void">
              <description>Protected property
Use the value of the text field to update the control</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="prop" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getElement" returns="HTMLElement">
              <description>Returns the element reference that is saved.  The id can be either
the element id, or the key for this id in the "id" config attribute.
For instance, the host element id can be obtained by passing its
id (default: "yui_picker") or by its key "YUI_PICKER".</description>
              <params>
                <param name="id" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Sets up the config attributes and the change listeners for this
properties</description>
              <params>
                <param name="attr" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initPicker" returns="void">
              <description>Sets the initial state of the sliders</description>
            </function>
            <function name="setValue" returns="void">
              <description>Sets the control to the specified rgb value and
moves the sliders to the proper positions</description>
              <params>
                <param name="rgb" type="[int, int, int]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="syncUI" returns="void">
              <description>Wrapper for _updateRGB, but allows setting</description>
              <params>
                <param name="skipAnim" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="ColorPicker" returns="YAHOO.widget.ColorPicker">
              <description>Class YAHOO.widget.ColorPicker constructor
A widget to select colors</description>
              <params>
                <param name="el(optional)" type="HTMLElement | String | Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Column" extends="Object" private="True">
          <description>The Column class defines and manages attributes of DataTable Columns</description>
          <attributes>
            <attribute name="_dd" type="YAHOO.util.DragDrop" readonly="False">
              <description>Private property
For unreg() purposes, a reference to the Column's DragDrop instance.</description>
            </attribute>
            <attribute name="_ddResizer" type="YAHOO.util.DragDrop" readonly="False">
              <description>Private property
For unreg() purposes, a reference to the Column resizer's DragDrop instance.</description>
            </attribute>
            <attribute name="_elResizer" type="HTMLElement" readonly="False">
              <description>Private property
The DOM reference to the associated resizerelement (if any).</description>
            </attribute>
            <attribute name="_elTh" type="HTMLElement" readonly="False">
              <description>Private property
The DOM reference to the associated TH element.</description>
            </attribute>
            <attribute name="_elThLabel" type="HTMLElement" readonly="False">
              <description>Private property
The DOM reference to the associated TH element's label SPAN element.</description>
            </attribute>
            <attribute name="_elThLiner" type="HTMLElement" readonly="False">
              <description>Private property
The DOM reference to the associated TH element's liner DIV element.</description>
            </attribute>
            <attribute name="_nColspan" type="Number" readonly="False">
              <description>Private property
Number of table cells the Column spans.</description>
            </attribute>
            <attribute name="_nKeyIndex" type="Number" readonly="False">
              <description>Private property
Reference to Column's current position index within its ColumnSet's keys
array, if applicable. This property only applies to non-nested and bottom-
level child Columns.</description>
            </attribute>
            <attribute name="_nRowspan" type="Number" readonly="False">
              <description>Private property
Number of table rows the Column spans.</description>
            </attribute>
            <attribute name="_nTreeIndex" type="Number" readonly="False">
              <description>Private property
Reference to Column's current position index within its ColumnSet's tree
array, if applicable. This property only applies to non-nested and top-
level parent Columns.</description>
            </attribute>
            <attribute name="_nWidth" type="Number" readonly="False">
              <description>Private property
Internal width tracker.</description>
            </attribute>
            <attribute name="_oParent" type="YAHOO.widget.Column" readonly="False">
              <description>Private property
Column's parent Column instance, or null.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Unique String identifier assigned at instantiation.</description>
            </attribute>
            <attribute name="abbr" type="String" readonly="False">
              <description>Column head cell ABBR for accessibility.</description>
            </attribute>
            <attribute name="children" type="Object[]" readonly="False">
              <description>Array of object literals that define children (nested headers) of a Column.</description>
            </attribute>
            <attribute name="className" type="String || String[]" readonly="False">
              <description>Custom CSS class or array of classes to be applied to every cell in the Column.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Internal class variable to index multiple Column instances.</description>
            </attribute>
            <attribute name="currencyOptions" type="Object" readonly="False">
              <description>Config passed to YAHOO.util.Number.format() by the 'currency' Column formatter.</description>
            </attribute>
            <attribute name="dateOptions" type="Object" readonly="False">
              <description>Config passed to YAHOO.util.Date.format() by the 'date' Column formatter.</description>
            </attribute>
            <attribute name="editor" type="YAHOO.widget.CellEditor" readonly="False">
              <description>A CellEditor instance, otherwise Column is not editable.</description>
            </attribute>
            <attribute name="field" type="String" readonly="False">
              <description>Associated database field, or null.</description>
            </attribute>
            <attribute name="formatter" type="String || HTMLFunction" readonly="False">
              <description>Defines a format function.</description>
            </attribute>
            <attribute name="hidden" type="Boolean" readonly="False">
              <description>True if Column is in hidden state.</description>
            </attribute>
            <attribute name="key" type="String" readonly="False">
              <description>Unique name, required.</description>
            </attribute>
            <attribute name="label" type="String" readonly="False">
              <description>Text or HTML for display as Column's label in the TH element.</description>
            </attribute>
            <attribute name="maxAutoWidth" type="Number" readonly="False">
              <description>When a width is not defined for a Column, maxAutoWidth defines an upper
limit that the Column should be auto-sized to. If resizeable is enabled,
users may still resize to a greater width. Most useful for Columns intended
to hold long unbroken, unwrapped Strings, such as URLs, to prevent very
wide Columns from disrupting visual readability by inducing truncation.</description>
            </attribute>
            <attribute name="minWidth" type="Number" readonly="False">
              <description>Minimum Column width (in pixels).</description>
            </attribute>
            <attribute name="resizeable" type="Boolean" readonly="False">
              <description>True if Column is resizeable, false otherwise. The Drag &amp; Drop Utility is
required to enable this feature. Only bottom-level and non-nested Columns are
resizeble.</description>
            </attribute>
            <attribute name="selected" type="Boolean" readonly="False">
              <description>True if Column is in selected state.</description>
            </attribute>
            <attribute name="sortable" type="Boolean" readonly="False">
              <description>True if Column is sortable, false otherwise.</description>
            </attribute>
            <attribute name="defaultDir" type="String" readonly="False">
              <description>Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC.</description>
            </attribute>
            <attribute name="defaultOrder" type="object" readonly="False">
              <description>
              </description>
            </attribute>
            <attribute name="field" type="String" readonly="False">
              <description>Custom field to sort on.</description>
            </attribute>
            <attribute name="sortFunction" type="Function" readonly="False">
              <description>Custom sort handler.</description>
            </attribute>
            <attribute name="width" type="Number" readonly="False">
              <description>Column width (in pixels).</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getColEl" returns="void">
              <description>
              </description>
            </function>
            <function name="getColspan" returns="Number">
              <description>Public accessor returns Column's calculated COLSPAN value.</description>
            </function>
            <function name="getDefinition" returns="Object">
              <description>Returns object literal definition.</description>
            </function>
            <function name="getField" returns="String">
              <description>Returns field.</description>
            </function>
            <function name="getId" returns="String">
              <description>Returns unique ID string.</description>
            </function>
            <function name="getKey" returns="String">
              <description>Returns unique Column key.</description>
            </function>
            <function name="getKeyIndex" returns="Number">
              <description>Public accessor returns Column's current position index within its
ColumnSet's keys array, if applicable. Only non-nested and bottom-level
child Columns will return a value.</description>
            </function>
            <function name="getParent" returns="YAHOO.widget.Column">
              <description>Public accessor returns Column's parent instance if any, or null otherwise.</description>
            </function>
            <function name="getResizerEl" returns="HTMLElement">
              <description>Returns DOM reference to the resizer element, or null.</description>
            </function>
            <function name="getRowspan" returns="Number">
              <description>Public accessor returns Column's calculated ROWSPAN value.</description>
            </function>
            <function name="getSanitizedKey" returns="String">
              <description>Returns Column key which has been sanitized for DOM (class and ID) usage
starts with letter, contains only letters, numbers, hyphen, or period.</description>
            </function>
            <function name="getThEl" returns="HTMLElement">
              <description>Returns DOM reference to the key TH element.</description>
            </function>
            <function name="getThLInerEl" returns="HTMLElement">
              <description>Returns DOM reference to the TH's liner DIV element. Introduced since
resizeable Columns may have an extra resizer liner, making the DIV liner
not reliably the TH element's first child.</description>
            </function>
            <function name="getTreeIndex" returns="Number">
              <description>Public accessor returns Column's current position index within its
ColumnSet's tree array, if applicable. Only non-nested and top-level parent
Columns will return a value;</description>
            </function>
            <function name="toString" returns="String">
              <description>Column instance name, for logging.</description>
            </function>
            <function name="Column" returns="YAHOO.widget.Column">
              <description>Class YAHOO.widget.Column constructor
The Column class defines and manages attributes of DataTable Columns</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ColumnChart" extends="Object" private="True">
          <description>ColumnChart class for the YUI Charts widget.</description>
          <functions>
            <function name="ColumnChart" returns="YAHOO.widget.ColumnChart">
              <description>Class YAHOO.widget.ColumnChart constructor
ColumnChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ColumnSeries" extends="Object" private="True">
          <description>ColumnSeries class for the YUI Charts widget.</description>
          <functions>
            <function name="ColumnSeries" returns="YAHOO.widget.ColumnSeries">
              <description>Class YAHOO.widget.ColumnSeries constructor
ColumnSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ColumnSet" extends="Object" private="True">
          <description>The ColumnSet class defines and manages a DataTable's Columns,
including nested hierarchies and access to individual Column instances.</description>
          <attributes>
            <attribute name="_aDefinitions" type="Object[]" readonly="False">
              <description>Private property
Array of object literal Column definitions passed to the constructor.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Unique instance name.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Internal class variable to index multiple ColumnSet instances.</description>
            </attribute>
            <attribute name="flat" type="YAHOO.widget.Column[]" readonly="False">
              <description>Flattened representation of all Columns.</description>
            </attribute>
            <attribute name="headers" type="String[]" readonly="False">
              <description>ID index of nested parent hierarchies for HEADERS accessibility attribute.</description>
            </attribute>
            <attribute name="keys" type="YAHOO.widget.Column[]" readonly="False">
              <description>Array of Columns that map one-to-one to a table column.</description>
            </attribute>
            <attribute name="tree" type="YAHOO.widget.Column[]" readonly="False">
              <description>Top-down tree representation of Column hierarchy.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_init" returns="void">
              <description>Private property
Initializes ColumnSet instance with data from Column definitions.</description>
              <params>
                <param name="aDefinitions" type="Object[]" optional="False">
                  <description>Array of object literals that define cells in
the THEAD .</description>
                </param>
              </params>
            </function>
            <function name="getColumn" returns="YAHOO.widget.Column">
              <description>Returns Column instance with given key or ColumnSet key index.</description>
              <params>
                <param name="column" type="String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnById" returns="YAHOO.widget.Column">
              <description>Returns Column instance with given ID.</description>
              <params>
                <param name="column" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDefinitions" returns="Object[]">
              <description>Public accessor to the definitions array.</description>
            </function>
            <function name="getDescendants" returns="Array">
              <description>Public accessor returns array of given Column's desendants (if any), including itself.</description>
            </function>
            <function name="getId" returns="String">
              <description>Returns unique name of the ColumnSet instance.</description>
            </function>
            <function name="toString" returns="String">
              <description>ColumnSet instance name, for logging.</description>
            </function>
            <function name="ColumnSet" returns="YAHOO.widget.ColumnSet">
              <description>Class YAHOO.widget.ColumnSet constructor
The ColumnSet class defines and manages a DataTable's Columns,
including nested hierarchies and access to individual Column instances.</description>
              <params>
                <param name="aDefinitions" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ContainerEffect" extends="Object" private="True">
          <description>ContainerEffect encapsulates animation transitions that are executed when
an Overlay is shown or hidden.</description>
          <attributes>
            <attribute name="animClass" type="class" readonly="False">
              <description>The animation class to use for animating the overlay</description>
            </attribute>
            <attribute name="attrIn" type="Object" readonly="False">
              <description>The animation attributes to use when transitioning into view</description>
            </attribute>
            <attribute name="attrOut" type="Object" readonly="False">
              <description>The animation attributes to use when transitioning out of view</description>
            </attribute>
            <attribute name="overlay" type="YAHOO.widget.Overlay" readonly="False">
              <description>The overlay to animate</description>
            </attribute>
            <attribute name="targetElement" type="HTMLElement" readonly="False">
              <description>The target element to be animated</description>
            </attribute>
          </attributes>
          <functions>
            <function name="animateIn" returns="void">
              <description>Triggers the in-animation.</description>
            </function>
            <function name="animateOut" returns="void">
              <description>Triggers the out-animation.</description>
            </function>
            <function name="FADE" returns="YAHOO.widget.ContainerEffect">
              <description>A pre-configured ContainerEffect instance that can be used for fading
an overlay in and out.</description>
              <params>
                <param name="overlay" type="YAHOO.widget.Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dur" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleCompleteAnimateIn" returns="void">
              <description>The default onComplete handler for the in-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleCompleteAnimateOut" returns="void">
              <description>The default onComplete handler for the out-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleStartAnimateIn" returns="void">
              <description>The default onStart handler for the in-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleStartAnimateOut" returns="void">
              <description>The default onStart handler for the out-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleTweenAnimateIn" returns="void">
              <description>The default onTween handler for the in-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleTweenAnimateOut" returns="void">
              <description>The default onTween handler for the out-animation.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>Initializes the animation classes and events.</description>
            </function>
            <function name="SLIDE" returns="YAHOO.widget.ContainerEffect">
              <description>A pre-configured ContainerEffect instance that can be used for sliding an
overlay in and out.</description>
              <params>
                <param name="overlay" type="YAHOO.widget.Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dur" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="ContainerEffect" returns="YAHOO.widget.ContainerEffect">
              <description>Class YAHOO.widget.ContainerEffect constructor
ContainerEffect encapsulates animation transitions that are executed when
an Overlay is shown or hidden.</description>
              <params>
                <param name="overlay" type="YAHOO.widget.Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrIn" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrOut" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="targetElement" type="HTMLElement" optional="True">
                  <description>
                  </description>
                </param>
                <param name="param" type="class" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ContextMenu" extends="YAHOO.widget.Menu" private="True">
          <description>Creates a list of options or commands which are made visible in response to
an HTML element's "contextmenu" event ("mousedown" for Opera).</description>
          <attributes>
            <attribute name="_bCancelled" type="Boolean" readonly="False">
              <description>Private property
Boolean indicating if the display of the context menu should
be cancelled.</description>
            </attribute>
            <attribute name="_oTrigger" type="String|HTMLElement|Array" readonly="False">
              <description>Private property
Object reference to the current value of the "trigger"
configuration property.</description>
            </attribute>
            <attribute name="contextEventTarget" type="HTMLElement" readonly="False">
              <description>Object reference for the HTML element that was the target of the
"contextmenu" DOM event ("mousedown" for Opera) that triggered the display of
the context menu.</description>
            </attribute>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the ContextMenu's configuration properties</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the ContextMenu's events</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_onTriggerClick" returns="void">
              <description>Private property
"click" event handler for the HTML element(s) identified as the
"trigger" for the context menu.  Used to cancel default behaviors in Opera.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>Object representing the DOM event object passed back
by the event utility (YAHOO.util.Event).</description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.ContextMenu" optional="False">
                  <description>Object representing the DOM event object passed back
by the event utility (YAHOO.util.Event).</description>
                </param>
              </params>
            </function>
            <function name="_onTriggerContextMenu" returns="void">
              <description>Private property
"contextmenu" event handler ("mousedown" for Opera) for the HTML
element(s) that trigger the display of the context menu.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>Object representing the context
menu that is handling the event.</description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.ContextMenu" optional="False">
                  <description>Object representing the context
menu that is handling the event.</description>
                </param>
              </params>
            </function>
            <function name="_removeEventHandlers" returns="void">
              <description>Private property
Removes all of the DOM event handlers from the HTML element(s)
whose "context menu" event ("click" for Opera) trigger the display of
the context menu.</description>
            </function>
            <function name="cancel" returns="void">
              <description>Cancels the display of the context menu.</description>
            </function>
            <function name="configTrigger" returns="void">
              <description>Event handler for when the value of the "trigger" configuration
property changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.ContextMenu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the context menu's &lt;div&gt; element
(and accompanying child nodes) from the document.</description>
            </function>
            <function name="init" returns="void">
              <description>The ContextMenu class's initialization method. This method is
automatically called by the constructor, and sets up all DOM references for
pre-existing markup, and creates required markup if it is not already present.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be
changed using the context menu's Config object ("cfg").</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for the context menu.</description>
            </function>
            <function name="position" returns="void">
              <description>Private property
"beforeShow" event handler used to position the contextmenu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aPos" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the context menu.</description>
            </function>
            <function name="ContextMenu" returns="YAHOO.widget.ContextMenu">
              <description>Class YAHOO.widget.ContextMenu constructor
Creates a list of options or commands which are made visible in response to
an HTML element's "contextmenu" event ("mousedown" for Opera).</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ContextMenuItem" extends="YAHOO.widget.MenuItem" private="True">
          <description>Creates an item for a context menu.</description>
          <functions>
            <function name="ContextMenuItem" returns="YAHOO.widget.ContextMenuItem">
              <description>Class YAHOO.widget.ContextMenuItem constructor
Creates an item for a context menu.</description>
              <params>
                <param name="p_oObject" type="String" optional="False">
                  <description>String specifying the text of the context menu item.</description>
                </param>
                <param name="p_oObject" type="HTMLLIElement" optional="False">
                  <description>String specifying the text of the context menu item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptGroupElement" optional="False">
                  <description>String specifying the text of the context menu item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptionElement" optional="False">
                  <description>String specifying the text of the context menu item.</description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>String specifying the text of the context menu item.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DataTable" extends="YAHOO.util.Element" private="True">
          <description>DataTable class for the YUI DataTable widget.</description>
          <attributes>
            <attribute name="_aDynFunctions" type="Array" readonly="False">
              <description>Private property
Sparse array of custom functions to set column widths for browsers that don't
support dynamic CSS rules.  Functions are added at the index representing
the number of rows they update.</description>
            </attribute>
            <attribute name="_aSelections" type="Object[]" readonly="False">
              <description>Private property
Array to track row selections (by sRecordId) and/or cell selections
(by {recordId:sRecordId, columnKey:sColumnKey})</description>
            </attribute>
            <attribute name="_bInit" type="Boolean" readonly="False">
              <description>Private property
True if instance is initialized, so as to fire the initEvent after render.</description>
            </attribute>
            <attribute name="_elCaption" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the CAPTION element for the DataTable instance.</description>
            </attribute>
            <attribute name="_elColgroup" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the COLGROUP element for the DataTable instance.</description>
            </attribute>
            <attribute name="_elContainer" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the container element for the DataTable instance into which
all other elements get created.</description>
            </attribute>
            <attribute name="_elMask" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the mask element for the DataTable instance which disables it.</description>
            </attribute>
            <attribute name="_elMsgTbody" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the secondary TBODY element used to display DataTable messages.</description>
            </attribute>
            <attribute name="_elMsgTd" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the secondary TBODY element's single TD element used to display DataTable messages.</description>
            </attribute>
            <attribute name="_elMsgTr" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the secondary TBODY element's single TR element used to display DataTable messages.</description>
            </attribute>
            <attribute name="_elTable" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the TABLE element for the DataTable instance.</description>
            </attribute>
            <attribute name="_elTbody" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the primary TBODY element for the DataTable instance.</description>
            </attribute>
            <attribute name="_elThead" type="HTMLElement" readonly="False">
              <description>Private property
DOM reference to the THEAD element for the DataTable instance.</description>
            </attribute>
            <attribute name="_elTrTemplate" type="{HTMLElement}" readonly="False">
              <description>Private property
Template row to create all new rows from.</description>
            </attribute>
            <attribute name="_nIndex" type="Number" readonly="False">
              <description>Private property
Index assigned to instance.</description>
            </attribute>
            <attribute name="_nTdCount" type="Number" readonly="False">
              <description>Private property
Counter for IDs assigned to TD elements.</description>
            </attribute>
            <attribute name="_nTrCount" type="Number" readonly="False">
              <description>Private property
Counter for IDs assigned to TR elements.</description>
            </attribute>
            <attribute name="_oAnchorCell" type="Object" readonly="False">
              <description>Private property
Object literal representing cell selection anchor:
{recordId:sRecordId, columnKey:sColumnKey}.</description>
            </attribute>
            <attribute name="_oAnchorRecord" type="YAHOO.widget.Record" readonly="False">
              <description>Private property
Record instance of the row selection anchor.</description>
            </attribute>
            <attribute name="_oCellEditor" type="YAHOO.widget.CellEditor" readonly="False">
              <description>Private property
The active CellEditor instance for the DataTable instance.</description>
            </attribute>
            <attribute name="_oChainRender" type="YAHOO.util.Chain" readonly="False">
              <description>Private property
Render chain.</description>
            </attribute>
            <attribute name="_oColumnSet" type="YAHOO.widget.ColumnSet" readonly="False">
              <description>Private property
ColumnSet instance for the DataTable instance.</description>
            </attribute>
            <attribute name="_oDataSource" type="YAHOO.util.DataSource" readonly="False">
              <description>Private property
DataSource instance for the DataTable instance.</description>
            </attribute>
            <attribute name="_oRecordSet" type="YAHOO.widget.RecordSet" readonly="False">
              <description>Private property
RecordSet instance for the DataTable instance.</description>
            </attribute>
            <attribute name="_sFirstTrId" type="String" readonly="False">
              <description>Private property
ID string of first TR element of the current DataTable page.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Unique id assigned to instance "yui-dtN", useful prefix for generating unique
DOM ID strings and log messages.</description>
            </attribute>
            <attribute name="_sLastTrId" type="String" readonly="False">
              <description>Private property
ID string of the last TR element of the current DataTable page.</description>
            </attribute>
            <attribute name="configs" type="Object" readonly="False">
              <description>Returns object literal of initial configs.</description>
            </attribute>
            <attribute name="_bDynStylesFallback" type="boolean" readonly="False">
              <description>Private property
Set to true if _elDynStyleNode cannot be populated due to browser incompatibility.</description>
            </attribute>
            <attribute name="_elColumnDragTarget" type="HTMLElement" readonly="False">
              <description>Private property
Element reference to shared Column drag target.</description>
            </attribute>
            <attribute name="_elColumnResizerProxy" type="HTMLElement" readonly="False">
              <description>Private property
Element reference to shared Column resizer proxy.</description>
            </attribute>
            <attribute name="_elDynStyleNode" type="HTMLElement" readonly="False">
              <description>Private property
Reference to the STYLE node that is dynamically created and updated
in order to manage Column widths.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Internal class variable for indexing multiple DataTable instances.</description>
            </attribute>
            <attribute name="_nCurrentCount" type="Number" readonly="False">
              <description>Private property
Internal class variable tracking current number of DataTable instances,
so that certain class values can be reset when all instances are destroyed.</description>
            </attribute>
            <attribute name="_oDynStyles" type="Object" readonly="False">
              <description>Private property
Object literal hash of Columns and their dynamically create style rules.</description>
            </attribute>
            <attribute name="CLASS_ASC" type="String" readonly="False">
              <description>Class name assigned to ascending elements.</description>
            </attribute>
            <attribute name="CLASS_BUTTON" type="String" readonly="False">
              <description>Class name assigned to BUTTON elements and/or container elements.</description>
            </attribute>
            <attribute name="CLASS_CHECKBOX" type="String" readonly="False">
              <description>Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements.</description>
            </attribute>
            <attribute name="CLASS_COLTARGET" type="String" readonly="False">
              <description>Class name assigned to Column drag target.</description>
            </attribute>
            <attribute name="CLASS_DATA" type="String" readonly="False">
              <description>Class name assigned to data elements.</description>
            </attribute>
            <attribute name="CLASS_DATATABLE" type="String" readonly="False">
              <description>Class name assigned to outer DataTable container.</description>
            </attribute>
            <attribute name="CLASS_DEFAULT" type="String" readonly="False">
              <description>Class name assigned to default indicators.</description>
            </attribute>
            <attribute name="CLASS_DESC" type="String" readonly="False">
              <description>Class name assigned to descending elements.</description>
            </attribute>
            <attribute name="CLASS_DISABLED" type="String" readonly="False">
              <description>Class name assigned to disabled elements.</description>
            </attribute>
            <attribute name="CLASS_DRAGGABLE" type="String" readonly="False">
              <description>Class name assigned to draggable elements.</description>
            </attribute>
            <attribute name="CLASS_DROPDOWN" type="String" readonly="False">
              <description>Class name assigned to SELECT elements and/or container elements.</description>
            </attribute>
            <attribute name="CLASS_EDITABLE" type="String" readonly="False">
              <description>Class name assigned to editable elements.</description>
            </attribute>
            <attribute name="CLASS_EDITOR" type="String" readonly="False">
              <description>Class name assigned to CellEditor container elements.</description>
            </attribute>
            <attribute name="CLASS_EMPTY" type="String" readonly="False">
              <description>Class name assigned to empty indicators.</description>
            </attribute>
            <attribute name="CLASS_ERROR" type="String" readonly="False">
              <description>Class name assigned to error indicators.</description>
            </attribute>
            <attribute name="CLASS_EVEN" type="String" readonly="False">
              <description>Class name assigned to even elements.</description>
            </attribute>
            <attribute name="CLASS_FIRST" type="String" readonly="False">
              <description>Class name assigned to first elements.</description>
            </attribute>
            <attribute name="CLASS_HIDDEN" type="String" readonly="False">
              <description>Class name assigned to hidden elements.</description>
            </attribute>
            <attribute name="CLASS_HIGHLIGHTED" type="String" readonly="False">
              <description>Class name assigned to highlighted elements.</description>
            </attribute>
            <attribute name="CLASS_LABEL" type="String" readonly="False">
              <description>Class name assigned to display label elements.</description>
            </attribute>
            <attribute name="CLASS_LAST" type="String" readonly="False">
              <description>Class name assigned to last elements.</description>
            </attribute>
            <attribute name="CLASS_LINER" type="String" readonly="False">
              <description>Class name assigned to liner DIV elements.</description>
            </attribute>
            <attribute name="CLASS_LOADING" type="String" readonly="False">
              <description>Class name assigned to loading indicatorx.</description>
            </attribute>
            <attribute name="CLASS_MASK" type="String" readonly="False">
              <description>Class name assigned to mask element when DataTable is disabled.</description>
            </attribute>
            <attribute name="CLASS_MESSAGE" type="String" readonly="False">
              <description>Class name assigned to messaging elements.</description>
            </attribute>
            <attribute name="CLASS_NEXT" type="String" readonly="False">
              <description>Class name assigned next indicators.</description>
            </attribute>
            <attribute name="CLASS_ODD" type="String" readonly="False">
              <description>Class name assigned to odd elements.</description>
            </attribute>
            <attribute name="CLASS_PAGE" type="String" readonly="False">
              <description>Class name assigned to page number indicators.</description>
            </attribute>
            <attribute name="CLASS_PAGINATOR" type="String" readonly="False">
              <description>Class name assigned to paginator container elements.</description>
            </attribute>
            <attribute name="CLASS_PREVIOUS" type="String" readonly="False">
              <description>Class name assigned to previous indicators.</description>
            </attribute>
            <attribute name="CLASS_RADIO" type="String" readonly="False">
              <description>Class name assigned to INPUT TYPE=RADIO elements and/or container elements.</description>
            </attribute>
            <attribute name="CLASS_RESIZEABLE" type="String" readonly="False">
              <description>Class name assigned to resizeable elements.</description>
            </attribute>
            <attribute name="CLASS_RESIZER" type="String" readonly="False">
              <description>Class name assigned to resizer handle elements.</description>
            </attribute>
            <attribute name="CLASS_RESIZERLINER" type="String" readonly="False">
              <description>Class name assigned to resizer liner elements.</description>
            </attribute>
            <attribute name="CLASS_RESIZERPROXY" type="String" readonly="False">
              <description>Class name assigned to resizer proxy elements.</description>
            </attribute>
            <attribute name="CLASS_SCROLLABLE" type="String" readonly="False">
              <description>Class name assigned to scrollable elements.</description>
            </attribute>
            <attribute name="CLASS_SELECTED" type="String" readonly="False">
              <description>Class name assigned to selected elements.</description>
            </attribute>
            <attribute name="CLASS_SORTABLE" type="String" readonly="False">
              <description>Class name assigned to sortable elements.</description>
            </attribute>
            <attribute name="Formatter" type="Object" readonly="False">
              <description>Cell formatting functions.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_clearMinWidth" returns="void">
              <description>Private property
Clears minWidth.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>Which Column.</description>
                </param>
              </params>
            </function>
            <function name="_clearTrTemplateEl" returns="void">
              <description>Private property
Clears TR element template in response to any Column state change.</description>
            </function>
            <function name="_createTrEl" returns="HTMLElement">
              <description>Private property
Create a new TR element for a given Record and appends it with the correct
number of Column-state-classed TD elements. Striping is the responsibility of
the calling function, which may decide to stripe the single row, a subset of
rows, or all the rows.</description>
              <params>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_defaultPaginatorContainers" returns="void">
              <description>Private property
Returns the default containers used for Paginators.  If create param is
passed, the containers will be created and added to the DataTable container.</description>
              <params>
                <param name="create" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_deleteTrEl" returns="Boolean">
              <description>Private property
Deletes TR element by DOM reference or by DataTable page row index.</description>
              <params>
                <param name="row" type="HTMLElement | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_destroyColgroupEl" returns="void">
              <description>Private property
Destroy's the DataTable COLGROUP element, if available.</description>
            </function>
            <function name="_destroyColumnHelpers" returns="void">
              <description>Private property
Destroys elements associated with Column functionality: ColumnDD and ColumnResizers.</description>
            </function>
            <function name="_destroyContainerEl" returns="void">
              <description>Private property
Destroy's the DataTable outer container element, if available.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_destroyDraggableColumns" returns="void">
              <description>Private property
Disables DD from top-level Column TH elements.</description>
            </function>
            <function name="_destroyMsgTbodyEl" returns="void">
              <description>Private property
Destroy's the DataTable message TBODY element, if available.</description>
            </function>
            <function name="_destroyResizeableColumns" returns="void">
              <description>Private property
Disables resizeability on key Column TH elements.</description>
            </function>
            <function name="_destroyTableEl" returns="void">
              <description>Private property
Destroy's the DataTable TABLE element, if available.</description>
            </function>
            <function name="_destroyTbodyEl" returns="void">
              <description>Private property
Destroy's the DataTable TBODY element, if available.</description>
            </function>
            <function name="_destroyTheadEl" returns="void">
              <description>Private property
Destroy's the DataTable THEAD element, if available.</description>
            </function>
            <function name="_focusEl" returns="void">
              <description>Private property
Sets focus on the given element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_formatTdEl" returns="HTMLElement">
              <description>Private property
Formats a basic TD element.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elTd" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="isLast" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getColumnClassnames" returns="String">
              <description>Private property
Retruns classnames to represent current Column states.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aAddClasses" type="String[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getSelectionAnchor" returns="void">
              <description>Private property
Returns object literal of values that represent the selection anchor. Used
to determine selection behavior resulting from a user event.</description>
              <params>
                <param name="oTrigger" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getSelectionTrigger" returns="void">
              <description>Private property
Returns object literal of values that represent the selection trigger. Used
to determine selection behavior resulting from a key event.</description>
            </function>
            <function name="_getTrTemplateEl" returns="HTMLElement">
              <description>Private property
Returns a new TR element template with TD elements classed with current
Column states.</description>
            </function>
            <function name="_handleCellBlockSelectionByKey" returns="void">
              <description>Private property
Determines selection behavior resulting from a key event when selection mode
is set to "cellblock".</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleCellBlockSelectionByMouse" returns="void">
              <description>Private property
Determines selection behavior resulting from a mouse event when selection mode
is set to "cellblock".</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleCellRangeSelectionByKey" returns="void">
              <description>Private property
Determines selection behavior resulting from a key event when selection mode
is set to "cellrange".</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleCellRangeSelectionByMouse" returns="void">
              <description>Private property
Determines selection behavior resulting from a mouse event when selection mode
is set to "cellrange".</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handlePaginatorChange" returns="void">
              <description>Private property
Update the UI infrastructure in response to a "paginator" attribute change.</description>
              <params>
                <param name="e" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleSingleCellSelectionByKey" returns="void">
              <description>Private property
Determines selection behavior resulting from a key event when selection mode
is set to "singlecell".</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleSingleCellSelectionByMouse" returns="void">
              <description>Private property
Determines selection behavior resulting from a mouse event when selection mode
is set to "singlecell".</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleSingleSelectionByKey" returns="void">
              <description>Private property
Determines selection behavior resulting from a key event when selection mode
is set to "single".</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleSingleSelectionByMouse" returns="void">
              <description>Private property
Determines selection behavior resulting from a mouse event when selection mode
is set to "single".</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleStandardSelectionByKey" returns="void">
              <description>Private property
Determines selection behavior resulting from a key event when selection mode
is set to "standard".</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleStandardSelectionByMouse" returns="void">
              <description>Private property
Determines selection behavior resulting from a mouse event when selection mode
is set to "standard".</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initCaptionEl" returns="void">
              <description>Private property
Creates HTML markup CAPTION element.</description>
              <params>
                <param name="sCaption" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initCellEditing" returns="void">
              <description>Private property
Initializes CellEditor integration.</description>
            </function>
            <function name="_initCellEditorEl" returns="void">
              <description>Backward compatibility.</description>
            </function>
            <function name="_initColgroupEl" returns="void">
              <description>Private property
Initializes COLGROUP and COL elements for managing minWidth.</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initColumnHelpers" returns="void">
              <description>Private property
Initializes elements associated with Column functionality: ColumnDD and ColumnResizers.</description>
            </function>
            <function name="_initColumnSet" returns="void">
              <description>Private property
Initializes ColumnSet.</description>
              <params>
                <param name="aColumnDefs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initColumnSort" returns="void">
              <description>Private property
Initializes Column sorting.</description>
            </function>
            <function name="_initConfigs" returns="void">
              <description>Private property
Initializes object literal of config values.</description>
              <params>
                <param name="oConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initContainerEl" returns="void">
              <description>Private property
Initializes the DataTable outer container element, including a mask.</description>
              <params>
                <param name="elContainer" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initDataSource" returns="void">
              <description>Private property
Initializes DataSource.</description>
              <params>
                <param name="oDataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initDomElements" returns="void">
              <description>Private property
Initializes DOM elements.</description>
              <params>
                <param name="elContainer" type="HTMLElement | String} HTML DIV element by reference or ID. &#xA;return {Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initDraggableColumns" returns="void">
              <description>Private property
Initializes top-level Column TH elements into DD instances.</description>
            </function>
            <function name="_initEvents" returns="void">
              <description>Private property
Initialize internal event listeners</description>
            </function>
            <function name="_initMsgTbodyEl" returns="void">
              <description>Private property
Initializes TBODY element for messaging.</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initRecordSet" returns="void">
              <description>Private property
Initializes RecordSet.</description>
            </function>
            <function name="_initResizeableColumns" returns="void">
              <description>Private property
Initializes resizeability on key Column TH elements.</description>
            </function>
            <function name="_initTableEl" returns="void">
              <description>Private property
Creates HTML markup for TABLE, COLGROUP, THEAD and TBODY elements in outer
container element.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initTbodyEl" returns="void">
              <description>Private property
Initializes TBODY element for data.</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initTheadEl" returns="void">
              <description>Private property
Initializes THEAD element.</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="Initialized" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initThEl" returns="void">
              <description>Private property
Populates TH element as defined by Column.</description>
              <params>
                <param name="elTh" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_insertColgroupColEl" returns="void">
              <description>Private property
Adds a COL element to COLGROUP at given index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDocumentClick" returns="void">
              <description>Private property
Handles click events on the DOCUMENT.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onDropdownChange" returns="void">
              <description>Private property
Handles change events on SELECT elements within DataTable.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorBlockEvent" returns="void">
              <description>Private property
Passes through blockEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorBlurEvent" returns="void">
              <description>Private property
Passes through blurEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorCancelEvent" returns="void">
              <description>Private property
Passes through cancelEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorKeydownEvent" returns="void">
              <description>Private property
Passes through keydownEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorRevertEvent" returns="void">
              <description>Private property
Passes through revertEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorSaveEvent" returns="void">
              <description>Private property
Passes through saveEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorShowEvent" returns="void">
              <description>Private property
Passes through showEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onEditorUnblockEvent" returns="void">
              <description>Private property
Passes through unblockEvent of the active CellEditor.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onRenderChainEnd" returns="void">
              <description>Private property
Validates minWidths whenever the render chain ends.</description>
            </function>
            <function name="_onTableDblclick" returns="void">
              <description>Private property
Handles dblclick events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableFocus" returns="void">
              <description>Private property
Handles focus events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableKeypress" returns="void">
              <description>Private property
Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableMousedown" returns="void">
              <description>Private property
Handles mousedown events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableMouseout" returns="void">
              <description>Private property
Handles mouseout events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableMouseover" returns="void">
              <description>Private property
Handles mouseover events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTableMouseup" returns="void">
              <description>Private property
Handles mouseup events on the DataTable instance.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTbodyClick" returns="void">
              <description>Private property
Handles click events on the primary TBODY element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTbodyFocus" returns="void">
              <description>Private property
Handles focus events on the TBODY element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTbodyKeydown" returns="void">
              <description>Private property
Handles keydown events on the TBODY element. Handles selection behavior,
provides hooks for ENTER to edit functionality.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTheadClick" returns="void">
              <description>Private property
Handles click events on the THEAD element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTheadFocus" returns="void">
              <description>Private property
Handles focus events on the THEAD element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTheadKeydown" returns="void">
              <description>Private property
Handles keydown events on the THEAD element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.wiget.DataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_removeColgroupColEl" returns="void">
              <description>Private property
Removes a COL element to COLGROUP at given index.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_reorderColgroupColEl" returns="void">
              <description>Private property
Reorders a COL element from old index(es) to new index.</description>
              <params>
                <param name="aKeyIndexes" type="Number[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_repaintGecko" returns="void">
              <description>Private property
Forces Gecko repaint.</description>
            </function>
            <function name="_repaintOpera" returns="void">
              <description>Private property
Forces Opera repaint.</description>
            </function>
            <function name="_repaintWebkit" returns="void">
              <description>Private property
Forces Webkit repaint.</description>
            </function>
            <function name="_restoreMinWidth" returns="void">
              <description>Private property
Restores minWidth.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_runRenderChain" returns="void">
              <description>Private property
Internal wrapper calls run() on render Chain instance.</description>
            </function>
            <function name="_setColumnWidth" returns="void">
              <description>Private property
Sets liner DIV elements of given Column to given width. When value should be
auto-calculated to fit content overflow is set to visible, otherwise overflow
is set to hidden. No validations against minimum width and no updating
Column.width value.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sWidth" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sOverflow" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setColumnWidthDynFunction" returns="void">
              <description>Private property
Updates width of a Column's liner DIV elements by dynamically creating a
function to update all element style properties in one pass. Note: This
technique is not supported in sandboxed environments that prohibit EVALs.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sWidth" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setColumnWidthDynStyles" returns="void">
              <description>Private property
Updates width of a Column's liner DIV elements by dynamically creating a
STYLE node and writing and updating CSS style rules to it. If this fails during
runtime, the fallback method _setColumnWidthDynFunction() will be called.
Notes: This technique is not performant in IE6. IE7 crashes if DataTable is
nested within another TABLE element. For these cases, it is recommended to
use the method _setColumnWidthDynFunction by setting _bDynStylesFallback to TRUE.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sWidth" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setFirstRow" returns="void">
              <description>Private property
Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element
of the DataTable page and updates internal tracker.</description>
            </function>
            <function name="_setLastRow" returns="void">
              <description>Private property
Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element
of the DataTable page and updates internal tracker.</description>
            </function>
            <function name="_setRowStripes" returns="void">
              <description>Private property
Assigns the classes DT.CLASS_EVEN and DT.CLASS_ODD to one, many, or all TR elements.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setSelections" returns="void">
              <description>Private property
Assigns the class DT.CLASS_SELECTED to TR and TD elements.</description>
            </function>
            <function name="_syncColWidths" returns="void">
              <description>
              </description>
            </function>
            <function name="_unselectAllTdEls" returns="void">
              <description>Private property
Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED
from all TD elements in the internal tracker.</description>
            </function>
            <function name="_unselectAllTrEls" returns="void">
              <description>Private property
Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED
from all TR elements on the page.</description>
            </function>
            <function name="_unsetFirstRow" returns="void">
              <description>Private property
Removes the class YAHOO.widget.DataTable.CLASS_FIRST from the first TR element
of the DataTable page and updates internal tracker.</description>
            </function>
            <function name="_unsetLastRow" returns="void">
              <description>Private property
Removes the class YAHOO.widget.DataTable.CLASS_LAST from the last TR element
of the DataTable page and updates internal tracker.</description>
            </function>
            <function name="_updatePaginator" returns="void">
              <description>Private property
Method executed during set() operation for the "paginator" attribute.
Adds and/or severs event listeners between DataTable and Paginator</description>
              <params>
                <param name="newPag" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateTrEl" returns="HTMLElement">
              <description>Private property
Formats the contents of the given TR's TD elements with data from the given
Record. Only innerHTML should change, nothing structural.</description>
              <params>
                <param name="elTr" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRow" returns="void">
              <description>Adds one new Record of data into the RecordSet at the index if given,
otherwise at the end. If the new Record is in page view, the
corresponding DOM elements are also updated.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRows" returns="void">
              <description>Convenience method to add multiple rows.</description>
              <params>
                <param name="aData" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cancelCellEditor" returns="void">
              <description>Cancels active CellEditor.</description>
            </function>
            <function name="clearTextSelection" returns="void">
              <description>Clears browser text selection. Useful to call on rowSelectEvent or
cellSelectEvent to prevent clicks or dblclicks from selecting text in the
browser.</description>
            </function>
            <function name="_cloneObject" returns="void">
              <description>Private property
Clones object literal or array of object literals.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_destroyColumnDragTargetEl" returns="void">
              <description>Private property
Destroys shared Column drag target.</description>
            </function>
            <function name="_destroyColumnResizerProxyEl" returns="HTMLElement">
              <description>Private property
Destroys shared Column resizer proxy.</description>
            </function>
            <function name="_initColumnDragTargetEl" returns="HTMLElement">
              <description>Private property
Creates HTML markup for shared Column drag target.</description>
            </function>
            <function name="_initColumnResizerProxyEl" returns="HTMLElement">
              <description>Private property
Creates HTML markup for shared Column resizer proxy.</description>
            </function>
            <function name="editCheckbox" returns="void">
              <description>
              </description>
            </function>
            <function name="editDate" returns="void">
              <description>
              </description>
            </function>
            <function name="editDropdown" returns="void">
              <description>
              </description>
            </function>
            <function name="editRadio" returns="void">
              <description>
              </description>
            </function>
            <function name="editTextarea" returns="void">
              <description>
              </description>
            </function>
            <function name="editTextbox" returns="void">
              <description>
              </description>
            </function>
            <function name="formatButton" returns="void">
              <description>Formats a BUTTON element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object | Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatCheckbox" returns="void">
              <description>Formats a CHECKBOX element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object | Boolean} Data value for the cell. Can be a simple&#xA;Boolean to indicate whether checkbox is checked or not. Can be object literal&#xA;{checked:bBoolean, label:sLabel" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatCurrency" returns="void">
              <description>Formats currency. Default unit is USD.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatDate" returns="void">
              <description>Formats JavaScript Dates.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatDefault" returns="void">
              <description>Default cell formatter</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatDropdown" returns="void">
              <description>Formats SELECT elements.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatEmail" returns="void">
              <description>Formats emails.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatLink" returns="void">
              <description>Formats links.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatNumber" returns="void">
              <description>Formats numbers.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatRadio" returns="void">
              <description>Formats INPUT TYPE=RADIO elements.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatText" returns="void">
              <description>Formats text strings.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatTextarea" returns="void">
              <description>Formats TEXTAREA elements.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatTextbox" returns="void">
              <description>Formats INPUT TYPE=TEXT elements.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="formatTheadCell" returns="void">
              <description>Outputs markup into the given TH based on given Column.</description>
              <params>
                <param name="elCellLabel" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSortedBy" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="validateNumber" returns="void">
              <description>Validates data value to type Number, doing type conversion as
necessary. A valid Number value is return, else null is returned
if input value does not validate.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deleteRow" returns="void">
              <description>Deletes the given row's Record from the RecordSet. If the row is on current page,
the corresponding DOM elements are also deleted.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deleteRows" returns="void">
              <description>Convenience method to delete multiple rows.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="count" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Nulls out the entire DataTable instance and related objects, removes attached
event listeners, and clears out DOM elements inside the container. After
calling this method, the instance reference should be expliclitly nulled by
implementer, as in myDataTable = null. Use with caution!</description>
            </function>
            <function name="destroyCellEditor" returns="void">
              <description>Destroys active CellEditor instance and UI.</description>
            </function>
            <function name="disable" returns="void">
              <description>Disables DataTable UI.</description>
            </function>
            <function name="doBeforeLoadData" returns="Boolean">
              <description>Overridable method gives implementers a hook to access data before
it gets added to RecordSet and rendered to the TBODY.</description>
              <params>
                <param name="sRequest" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforePaginatorChange" returns="Boolean">
              <description>Overridable method gives implementers a hook to show loading message before
changing Paginator value.</description>
              <params>
                <param name="oPaginatorState" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeShowCellEditor" returns="Boolean">
              <description>Overridable abstract method to customize CellEditor before showing.</description>
              <params>
                <param name="oCellEditor" type="YAHOO.widget.CellEditor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="doBeforeSortColumn" returns="Boolean">
              <description>Overridable method gives implementers a hook to show loading message before
sorting Column.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sSortDir" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Brings focus to the TBODY element. Alias to focusTbodyEl.</description>
            </function>
            <function name="focusTbodyEl" returns="void">
              <description>Brings focus to the TBODY element.</description>
            </function>
            <function name="focusTheadEl" returns="void">
              <description>Brings focus to the THEAD element.</description>
            </function>
            <function name="formatCell" returns="void">
              <description>Outputs markup into the given TD based on given Record.</description>
              <params>
                <param name="elCell" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getAboveTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the above TD element from the given cell, or null.</description>
              <params>
                <param name="cell" type="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBelowTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the below TD element from the given cell, or null.</description>
              <params>
                <param name="cell" type="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getBody" returns="void">
              <description>
              </description>
            </function>
            <function name="getCell" returns="void">
              <description>
              </description>
            </function>
            <function name="getCellEditor" returns="YAHOO.widget.CellEditor">
              <description>Returns current CellEditor instance, or null.</description>
            </function>
            <function name="getColumn" returns="YAHOO.widget.Column">
              <description>For the given identifier, returns the associated Column instance. Note: For
getting Columns by Column ID string, please use the method getColumnById().</description>
              <params>
                <param name="column" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnById" returns="YAHOO.widget.Column">
              <description>For the given Column ID, returns the associated Column instance. Note: For
getting Columns by key, please use the method getColumn().</description>
              <params>
                <param name="column" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getColumnSet" returns="YAHOO.widget.ColumnSet">
              <description>Returns the DataTable instance's ColumnSet instance.</description>
            </function>
            <function name="getColumnSortDir" returns="String">
              <description>For the given Column instance, returns next direction to sort.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSortedBy" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getContainerEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's container element.</description>
            </function>
            <function name="getDataSource" returns="YAHOO.util.DataSource">
              <description>Returns the DataTable instance's DataSource instance.</description>
            </function>
            <function name="getFirstTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the first TD element in the DataTable page (by default),
the first TD element of the optionally given row, or null.</description>
              <params>
                <param name="row" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFirstTrEl" returns="HTMLElement">
              <description>Returns DOM reference to the first TR element in the DataTable page, or null.</description>
            </function>
            <function name="getId" returns="String">
              <description>Returns unique id assigned to instance, which is a useful prefix for
generating unique DOM ID strings.</description>
            </function>
            <function name="getLastSelectedCell" returns="Object">
              <description>Returns last selected cell as an object literal:
{recordId:sRecordId, columnKey:sColumnKey}.</description>
            </function>
            <function name="getLastSelectedRecord" returns="String">
              <description>Returns last selected Record ID.</description>
            </function>
            <function name="getLastTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the last TD element in the DataTable page (by default),
the first TD element of the optionally given row, or null.</description>
            </function>
            <function name="getLastTrEl" returns="HTMLElement">
              <description>Returns DOM reference to the last TR element in the DataTable page, or null.</description>
            </function>
            <function name="getMsgTbodyEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's secondary TBODY element that is
used to display messages.</description>
            </function>
            <function name="getMsgTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the TD element within the secondary TBODY that is
used to display messages.</description>
            </function>
            <function name="getNextTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the next TD element from the given cell, or null.</description>
              <params>
                <param name="cell" type="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNextTrEl" returns="HTMLElement">
              <description>Returns DOM reference to the next TR element from the given TR element, or null.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPreviousTdEl" returns="HTMLElement">
              <description>Returns DOM reference to the previous TD element from the given cell, or null.</description>
              <params>
                <param name="cell" type="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPreviousTrEl" returns="HTMLElement">
              <description>Returns DOM reference to the previous TR element from the given TR element, or null.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecord" returns="YAHOO.widget.Record">
              <description>For the given identifier, returns the associated Record instance.</description>
              <params>
                <param name="row" type="HTMLElement | Number | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecordIndex" returns="Number">
              <description>Returns Record index for given TR element or page row index.</description>
              <params>
                <param name="row" type="YAHOO.widget.Record | HTMLElement | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecordSet" returns="YAHOO.widget.RecordSet">
              <description>Returns the DataTable instance's RecordSet instance.</description>
            </function>
            <function name="getRow" returns="void">
              <description>
              </description>
            </function>
            <function name="getSelectedCells" returns="Object[]">
              <description>Returns selected cells as an array of object literals:
{recordId:sRecordId, columnKey:sColumnKey}.</description>
            </function>
            <function name="getSelectedColumns" returns="YAHOO.widget.Column[]">
              <description>Returns an array selected Column instances.</description>
            </function>
            <function name="getSelectedRows" returns="String[]">
              <description>Returns selected rows as an array of Record IDs.</description>
            </function>
            <function name="getSelectedTdEls" returns="HTMLElement[]">
              <description>Returns array of selected TD elements on the page.</description>
            </function>
            <function name="getSelectedTrEls" returns="HTMLElement[]">
              <description>Returns array of selected TR elements on the page.</description>
            </function>
            <function name="getState" returns="Object">
              <description>Returns on object literal representing the DataTable instance's current
state with the following properties:

pagination
Instance of YAHOO.widget.Paginator
sortedBy


sortedBy.key
{String} Key of sorted Column
sortedBy.dir
{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC


selectedRows
Array of selected rows by Record ID.
selectedCells
Selected cells as an array of object literals:
{recordId:sRecordId, columnKey:sColumnKey}</description>
            </function>
            <function name="getTableEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's TABLE element.</description>
            </function>
            <function name="getTbodyEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's primary TBODY element.</description>
            </function>
            <function name="getTdEl" returns="HTMLElement">
              <description>Returns DOM reference to a TD element.</description>
              <params>
                <param name="cell" type="HTMLElement | String | Object} TD element or child of a TD element, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTdLinerEl" returns="HTMLElement">
              <description>Returns DOM reference to a TD liner element.</description>
              <params>
                <param name="cell" type="HTMLElement | Object} TD element or child of a TD element, or&#xA;object literal of syntax {record:oRecord, column:oColumn" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTheadEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's THEAD element.</description>
            </function>
            <function name="getThEl" returns="HTMLElement">
              <description>Returns DOM reference to a TH element.</description>
              <params>
                <param name="theadCell" type="YAHOO.widget.Column | HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getThLinerEl" returns="HTMLElement">
              <description>Returns DOM reference to a TH liner element. Needed to normalize for resizeable
Columns, which have an additional resizer liner DIV element between the TH
element and the liner DIV element.</description>
              <params>
                <param name="theadCell" type="YAHOO.widget.Column | HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTrEl" returns="HTMLElement">
              <description>Returns the corresponding TR reference for a given DOM element, ID string or
directly page row index. If the given identifier is a child of a TR element,
then DOM tree is traversed until a parent TR element is returned, otherwise
null.</description>
              <params>
                <param name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTrIndex" returns="Number">
              <description>Returns the page row index of given row. Returns null if the row is not on the
current DataTable page.</description>
              <params>
                <param name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleDataReturnPayload" returns="MIXED">
              <description>Hook to update oPayload before consumption.</description>
              <params>
                <param name="oRequest" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideColumn" returns="void">
              <description>Hides given Column. NOTE: You cannot hide/show nested Columns. You can only
hide/show non-nested Columns, and top-level parent Columns (which will
hide/show all children Columns).</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideTableMessage" returns="void">
              <description>Hides secondary TBODY.</description>
            </function>
            <function name="highlightCell" returns="void">
              <description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell.</description>
              <params>
                <param name="cell" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="highlightColumn" returns="void">
              <description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.
NOTE: You cannot highlight/unhighlight nested Columns. You can only
highlight/unhighlight non-nested Columns, and bottom-level key Columns.</description>
              <params>
                <param name="column" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="highlightRow" returns="void">
              <description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row.</description>
              <params>
                <param name="row" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Implementation of Element's abstract method. Sets up config values.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initializeTable" returns="void">
              <description>Resets a RecordSet with the given data and populates the page view
with the new data. Any previous data, and selection and sort states are
cleared. New data should be added as a separate step.</description>
            </function>
            <function name="insertColumn" returns="YAHOO.widget.Column">
              <description>Inserts given Column at the index if given, otherwise at the end. NOTE: You
can only add non-nested Columns and top-level parent Columns. You cannot add
a nested Column to an existing parent.</description>
              <params>
                <param name="oColumn" type="Object | YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Returns true if given item is selected, false otherwise.</description>
              <params>
                <param name="o" type="String | HTMLElement | YAHOO.widget.Record | Number&#xA;{record:YAHOO.widget.Record, column:YAHOO.widget.Column}" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnAppendRows" returns="void">
              <description>Callback function receives data from DataSource and appends to an existing
DataTable new Records and, if applicable, creates or updates
corresponding TR elements.</description>
              <params>
                <param name="sRequest" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnInitializeTable" returns="void">
              <description>Callback function receives data from DataSource and populates an entire
DataTable with Records and TR elements, clearing previous Records, if any.</description>
              <params>
                <param name="sRequest" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnInsertRows" returns="void">
              <description>Callback function receives data from DataSource and inserts new records
starting at the index specified in oPayload.insertIndex. The value for
oPayload.insertIndex can be populated when sending the request to the DataSource,
or by accessing oPayload.insertIndex with the doBeforeLoadData() method at runtime.
If applicable, creates or updates corresponding TR elements.</description>
              <params>
                <param name="sRequest" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnReplaceRows" returns="void">
              <description>Callback function receives reponse from DataSource, replaces all existing
Records in  RecordSet, updates TR elements with new data, and updates state
UI for pagination and sorting from payload data, if necessary.</description>
              <params>
                <param name="oRequest" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnSetRecords" returns="void">
              <description>Alias for onDataReturnSetRows for backward compatibility</description>
            </function>
            <function name="onDataReturnSetRows" returns="void">
              <description>Callback function receives reponse from DataSource and populates the
RecordSet with the results.</description>
              <params>
                <param name="oRequest" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDataReturnUpdateRows" returns="void">
              <description>Callback function receives data from DataSource and incrementally updates Records
starting at the index specified in oPayload.updateIndex. The value for
oPayload.updateIndex can be populated when sending the request to the DataSource,
or by accessing oPayload.updateIndex with the doBeforeLoadData() method at runtime.
If applicable, creates or updates corresponding TR elements.</description>
              <params>
                <param name="sRequest" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oResponse" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oPayload" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEditorBlockEvent" returns="void">
              <description>Public handler of the editorBlockEvent. By default, disables DataTable UI.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEditorBlurEvent" returns="void">
              <description>Public handler of the editorBlurEvent. By default, saves on blur if
disableBtns is true, otherwise cancels on blur.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEditorUnblockEvent" returns="void">
              <description>Public handler of the editorUnblockEvent. By default, undisables DataTable UI.</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventCancelCellEditor" returns="void">
              <description>Overridable custom event handler to cancel active CellEditor.</description>
            </function>
            <function name="onEventEditCell" returns="void">
              <description>
              </description>
            </function>
            <function name="onEventFormatCell" returns="void">
              <description>Overridable custom event handler to format cell.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventHighlightCell" returns="void">
              <description>Overridable custom event handler to highlight cell. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventHighlightColumn" returns="void">
              <description>Overridable custom event handler to highlight Column. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventHighlightRow" returns="void">
              <description>Overridable custom event handler to highlight row. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventSaveCellEditor" returns="void">
              <description>Overridable custom event handler to save active CellEditor input.</description>
            </function>
            <function name="onEventSelectCell" returns="void">
              <description>Overridable custom event handler to select cell.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventSelectColumn" returns="void">
              <description>Overridable custom event handler to select Column.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventSelectRow" returns="void">
              <description>Overridable custom event handler to manage selection according to desktop paradigm.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventShowCellEditor" returns="void">
              <description>Overridable custom event handler to edit cell.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventSortColumn" returns="void">
              <description>Overridable custom event handler to sort Column.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventUnhighlightCell" returns="void">
              <description>Overridable custom event handler to unhighlight cell. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventUnhighlightColumn" returns="void">
              <description>Overridable custom event handler to unhighlight Column. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventUnhighlightRow" returns="void">
              <description>Overridable custom event handler to unhighlight row. Accounts for spurious
caused-by-child events.</description>
              <params>
                <param name="event" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="target" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onPaginatorChange" returns="void">
              <description>Alias for onPaginatorChange for backward compatibility</description>
            </function>
            <function name="onPaginatorChangeRequest" returns="void">
              <description>Responds to new Pagination states. By default, updates the UI to reflect the
new state. If "dynamicData" is true, current selections are purged before
a request is sent to the DataSource for data for the new state (using the
request returned by "generateRequest()").</description>
              <params>
                <param name="oPaginatorState" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onShow" returns="void">
              <description>Setting display:none on DataTable or any parent may impact width validations.
After setting display back to "", implementers should call this method to
manually perform those validations.</description>
            </function>
            <function name="refreshView" returns="void">
              <description>
              </description>
            </function>
            <function name="removeColumn" returns="YAHOO.widget.Column">
              <description>Removes given Column. NOTE: You cannot remove nested Columns. You can only remove
non-nested Columns, and top-level parent Columns (which will remove all
children Columns).</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="void">
              <description>Renders the view with existing Records from the RecordSet while
maintaining sort, pagination, and selection states. For performance, reuses
existing DOM elements when possible while deleting extraneous elements.</description>
            </function>
            <function name="renderPaginator" returns="void">
              <description>Renders the Paginator to the DataTable UI</description>
            </function>
            <function name="reorderColumn" returns="YAHOO.widget.Column">
              <description>Removes given Column and inserts into given tree index. NOTE: You
can only reorder non-nested Columns and top-level parent Columns. You cannot
reorder a nested Column to an existing parent.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetCellEditor" returns="void">
              <description>
              </description>
            </function>
            <function name="saveCellEditor" returns="void">
              <description>Saves active CellEditor input to Record and upates DOM UI.</description>
            </function>
            <function name="select" returns="void">
              <description>
              </description>
            </function>
            <function name="selectCell" returns="void">
              <description>Sets given cell to the selected state.</description>
              <params>
                <param name="cell" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectColumn" returns="void">
              <description>Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only
select/unselect non-nested Columns, and bottom-level key Columns.</description>
              <params>
                <param name="column" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectRow" returns="void">
              <description>Sets given row to the selected state.</description>
              <params>
                <param name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setColumnWidth" returns="void">
              <description>Sets given Column to given pixel width. If new width is less than minimum
width, sets to minimum width. Updates oColumn.width value.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="nWidth" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showCellEditor" returns="void">
              <description>Activates and shows CellEditor instance for the given cell while deactivating and
canceling previous CellEditor. It is baked into DataTable that only one CellEditor
can be active at any given time.</description>
              <params>
                <param name="elCell" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showColumn" returns="void">
              <description>Shows given Column. NOTE: You cannot hide/show nested Columns. You can only
hide/show non-nested Columns, and top-level parent Columns (which will
hide/show all children Columns).</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showTableMessage" returns="void">
              <description>Displays message within secondary TBODY.</description>
              <params>
                <param name="sHTML" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sortColumn" returns="void">
              <description>Sorts given Column. If "dynamicData" is true, current selections are purged before
a request is sent to the DataSource for data for the new state (using the
request returned by "generateRequest()").</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sDir" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>DataSource instance name, for logging.</description>
            </function>
            <function name="undisable" returns="void">
              <description>Undisables DataTable UI.</description>
            </function>
            <function name="unhighlightCell" returns="void">
              <description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell.</description>
              <params>
                <param name="cell" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unhighlightColumn" returns="void">
              <description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.
NOTE: You cannot highlight/unhighlight nested Columns. You can only
highlight/unhighlight non-nested Columns, and bottom-level key Columns.</description>
              <params>
                <param name="column" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unhighlightRow" returns="void">
              <description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row.</description>
              <params>
                <param name="row" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unselectAllCells" returns="void">
              <description>Clears out all cell selections.</description>
            </function>
            <function name="unselectAllRows" returns="void">
              <description>Clears out all row selections.</description>
            </function>
            <function name="unselectCell" returns="void">
              <description>Sets given cell to the unselected state.</description>
              <params>
                <param name="cell" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unselectColumn" returns="void">
              <description>Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only
select/unselect non-nested Columns, and bottom-level key Columns.</description>
              <params>
                <param name="column" type="HTMLElement | String | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="unselectRow" returns="void">
              <description>Sets given row to the unselected state.</description>
              <params>
                <param name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateCell" returns="void">
              <description>For the given row and column, updates the Record with the given data. If the
cell is on current page, the corresponding DOM elements are also updated.</description>
              <params>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column | String | Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateRow" returns="void">
              <description>For the given row, updates the associated Record with the given data. If the
row is on current page, the corresponding DOM elements are also updated.</description>
              <params>
                <param name="row" type="YAHOO.widget.Record | Number | HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateRows" returns="void">
              <description>Starting with the given row, updates associated Records with the given data.
The number of rows to update are determined by the array of data provided.
Undefined data (i.e., not an object literal) causes a row to be skipped. If
any of the rows are on current page, the corresponding DOM elements are also
updated.</description>
              <params>
                <param name="startrow" type="YAHOO.widget.Record | Number | HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aData" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="validateColumnWidths" returns="void">
              <description>For one or all Columns, when Column is not hidden, width is not set, and minWidth
and/or maxAutoWidth is set, validates auto-width against minWidth and maxAutoWidth.</description>
              <params>
                <param name="column" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DataTable" returns="YAHOO.widget.DataTable">
              <description>Class YAHOO.widget.DataTable constructor
DataTable class for the YUI DataTable widget.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aColumnDefs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oDataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DateCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The DataCellEditor class provides functionality for inline editing
DataTable cell data with a YUI Calendar.</description>
          <attributes>
            <attribute name="calendar" type="YAHOO.widget.Calendar" readonly="False">
              <description>Reference to Calendar instance.</description>
            </attribute>
            <attribute name="calendarOptions" type="Object" readonly="False">
              <description>Configs for the calendar instance, to be passed to Calendar constructor.</description>
            </attribute>
            <attribute name="defaultValue" type="Date" readonly="False">
              <description>Default value.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in DateCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from DateCellEditor.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a Calendar.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets DateCellEditor UI to initial state.</description>
            </function>
            <function name="DateCellEditor" returns="YAHOO.widget.DateCellEditor">
              <description>Class YAHOO.widget.DateCellEditor constructor
The DataCellEditor class provides functionality for inline editing
DataTable cell data with a YUI Calendar.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DateMath" extends="Object" private="True">
          <description>YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility
used for adding, subtracting, and comparing dates.</description>
          <attributes>
            <attribute name="DAY" type="String" readonly="False">
              <description>Constant field representing Day</description>
            </attribute>
            <attribute name="MONTH" type="String" readonly="False">
              <description>Constant field representing Month</description>
            </attribute>
            <attribute name="ONE_DAY_MS" type="Number" readonly="False">
              <description>Constant field representing one day, in milliseconds</description>
            </attribute>
            <attribute name="WEEK" type="String" readonly="False">
              <description>Constant field representing Week</description>
            </attribute>
            <attribute name="WEEK_ONE_JAN_DATE" type="Number" readonly="False">
              <description>Constant field representing the date in first week of January
which identifies the first week of the year.

In the U.S, Jan 1st is normally used based on a Sunday start of week.
ISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.</description>
            </attribute>
            <attribute name="YEAR" type="String" readonly="False">
              <description>Constant field representing Year</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addDays" returns="void">
              <description>Private property
Private helper method to account for bug in Safari 2 (webkit &lt; 420)
when Date.setDate(n) is called with n less than -128 or greater than 127.

Fix approach and original findings are available here:
http://brianary.blogspot.com/2006/03/safari-date-bug.html</description>
              <params>
                <param name="d" type="Date" optional="False">
                  <description>JavaScript date object</description>
                </param>
                <param name="nDays" type="Number" optional="False">
                  <description>JavaScript date object</description>
                </param>
              </params>
            </function>
            <function name="add" returns="Date">
              <description>Adds the specified amount of time to the this instance.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>The field constant to be used for performing addition.</description>
                </param>
                <param name="field" type="String" optional="False">
                  <description>The field constant to be used for performing addition.</description>
                </param>
                <param name="amount" type="Number" optional="False">
                  <description>The field constant to be used for performing addition.</description>
                </param>
              </params>
            </function>
            <function name="after" returns="Boolean">
              <description>Determines whether a given date is after another date on the calendar.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="compareTo" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="before" returns="Boolean">
              <description>Determines whether a given date is before another date on the calendar.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="compareTo" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="between" returns="Boolean">
              <description>Determines whether a given date is between two other dates on the calendar.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dateBegin" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dateEnd" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearTime" returns="Date">
              <description>Clears the time fields from a given date, effectively setting the time to 12 noon.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findMonthEnd" returns="Date">
              <description>Gets the last day of a month containing a given date.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="findMonthStart" returns="Date">
              <description>Gets the first day of a month containing a given date.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDate" returns="Date">
              <description>Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object
are set to 0. The method allows Date instances to be created with the a year less than 100. "new Date(year, month, date)" implementations
set the year to 19xx if a year (xx) which is less than 100 is provided.

NOTE:Validation on argument values is not performed. It is the caller's responsibility to ensure
arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.</description>
              <params>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="m" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="d" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getDayOffset" returns="Number">
              <description>Calculates the number of days the specified date is from January 1 of the specified calendar year.
Passing January 1 to this function would return an offset value of zero.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="calendarYear" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getFirstDayOfWeek" returns="Date">
              <description>Get the first day of the week, for the give date.</description>
              <params>
                <param name="dt" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="startOfWeek" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getJan1" returns="Date">
              <description>Retrieves a JavaScript Date object representing January 1 of any given year.</description>
              <params>
                <param name="calendarYear" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getWeekNumber" returns="Number">
              <description>Calculates the week number for the given date. Can currently support standard
U.S. week numbers, based on Jan 1st defining the 1st week of the year, and
ISO8601 week numbers, based on Jan 4th defining the 1st week of the year.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="firstDayOfWeek" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="janDate" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isMonthOverlapWeek" returns="Boolean">
              <description>Determines if a given week overlaps two different months.</description>
              <params>
                <param name="weekBeginDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isYearOverlapWeek" returns="Boolean">
              <description>Determines if a given week overlaps two different years.</description>
              <params>
                <param name="weekBeginDate" type="Date" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subtract" returns="Date">
              <description>Subtracts the specified amount of time from the this instance.</description>
              <params>
                <param name="date" type="Date" optional="False">
                  <description>
                  </description>
                </param>
                <param name="field" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="amount" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DateNode" extends="YAHOO.widget.TextNode" private="True">
          <description>A Date-specific implementation that differs from TextNode in that it uses
YAHOO.widget.Calendar as an in-line editor, if available
If Calendar is not available, it behaves as a plain TextNode.</description>
          <attributes>
            <attribute name="_type" type="string" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
            <attribute name="calendarConfig" type="object" readonly="False">
              <description>Configuration object for the Calendar editor, if used.
See http://developer.yahoo.com/yui/calendar/#internationalization</description>
            </attribute>
          </attributes>
          <functions>
            <function name="fillEditorContainer" returns="void">
              <description>If YAHOO.widget.Calendar is available, it will pop up a Calendar to enter a new date.  Otherwise, it falls back to a plain &lt;input&gt;  textbox</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>a shortcut to the static object holding editing information</description>
                </param>
              </params>
            </function>
            <function name="getNodeDefinition" returns="Object | false">
              <description>Returns an object which could be used to build a tree out of this node and its children.
It can be passed to the tree constructor to reproduce this node as a tree.
It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.</description>
            </function>
            <function name="saveEditorValue" returns="void">
              <description>Saves the date entered in the editor into the DateNode label property and displays it.
Overrides Node.saveEditorValue</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DateNode" returns="YAHOO.widget.DateNode">
              <description>Class YAHOO.widget.DateNode constructor
A Date-specific implementation that differs from TextNode in that it uses
YAHOO.widget.Calendar as an in-line editor, if available
If Calendar is not available, it behaves as a plain TextNode.</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParent" type="YAHOO.widget.Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Dialog" extends="YAHOO.widget.Panel" private="True">
          <description>Dialog is an implementation of Panel that can be used to submit form
data.


Built-in functionality for buttons with event handlers is included.
If the optional YUI Button dependancy is included on the page, the buttons
created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
will be created.


Forms can be processed in 3 ways -- via an asynchronous Connection utility call,
a simple form POST or GET, or manually. The YUI Connection utility should be
included if you're using the default "async" postmethod, but is not required if
you're using any of the other postmethod values.</description>
          <attributes>
            <attribute name="callback" type="Object" readonly="False">
              <description>The internally maintained callback object for use with the
Connection utility. The format of the callback object is
similar to Connection Manager's callback object and is
simply passed through to Connection Manager when the async
request is made.</description>
            </attribute>
            <attribute name="argument" type="Object" readonly="False">
              <description>The arbitraty argument or arguments to pass to the Connection
callback functions</description>
            </attribute>
            <attribute name="failure" type="Function" readonly="False">
              <description>The function to execute upon failure of the
Connection submission</description>
            </attribute>
            <attribute name="success" type="Function" readonly="False">
              <description>The function to execute upon success of the
Connection submission (when the form does not
contain a file input element).</description>
            </attribute>
            <attribute name="upload" type="Function" readonly="False">
              <description>The function to execute upon success of the
Connection submission, when the form contains
a file input element.


NOTE: Connection manager will not
invoke the success or failure handlers for the file
upload use case. This will be the only callback
handler invoked.


For more information, see the
Connection Manager documenation on file uploads.</description>
            </attribute>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the Dialog's configuration properties</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the Dialog's events</description>
            </attribute>
            <attribute name="form" type="HTMLFormElement" readonly="False">
              <description>Object reference to the Dialog's
&lt;form&gt; element.</description>
            </attribute>
            <attribute name="CSS_DIALOG" type="String" readonly="False">
              <description>Constant representing the default CSS class used for a Dialog</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_doClose" returns="void">
              <description>Protected property
Event handler for the close icon</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getButton" returns="YAHOO.widget.Button|HTMLElement">
              <description>Private property
Helper method to normalize button references. It either returns the
YUI Button instance for the given element if found,
or the passes back the HTMLElement reference if a corresponding YUI Button
reference is not found or YAHOO.widget.Button does not exist on the page.</description>
              <params>
                <param name="button" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getFormAttributes" returns="Object">
              <description>Protected property
Retrieves important attributes (currently method and action) from
the form element, accounting for any elements which may have the same name
as the attributes. Defaults to "POST" and "" for method and action respectively
if the attribute cannot be retrieved.</description>
              <params>
                <param name="oForm" type="HTMLFormElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_submitHandler" returns="void">
              <description>Protected property
Internal handler for the form submit event</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blurButtons" returns="void">
              <description>Blurs all the buttons defined via the "buttons"
configuration property.</description>
            </function>
            <function name="cancel" returns="void">
              <description>Executes the cancel of the Dialog followed by a hide.</description>
            </function>
            <function name="configButtons" returns="void">
              <description>The default event handler for the "buttons" configuration property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configClose" returns="void">
              <description>The default event handler fired when the "close" property is
changed. The method controls the appending or hiding of the close
icon at the top right of the Dialog.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configPostMethod" returns="void">
              <description>The default event handler for the "postmethod" configuration property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the Panel element from the DOM and sets all child elements
to null.</description>
            </function>
            <function name="doSubmit" returns="void">
              <description>Submits the Dialog's form depending on the value of the
"postmethod" configuration property.  Please note:
 As of version 2.3 this method will automatically handle
asyncronous file uploads should the Dialog instance's form contain
&lt;input type="file"&gt; elements.  If a Dialog
instance will be handling asyncronous file uploads, its
callback property will need to be setup with a
upload handler rather than the standard
success and, or failure handlers.  For more
information, see the Connection Manager documenation on file uploads.</description>
            </function>
            <function name="focusDefaultButton" returns="void">
              <description>Sets the focus to the button that is designated as the default via
the "buttons" configuration property. By default, this method is
called when the Dialog is made visible.</description>
            </function>
            <function name="focusFirst" returns="void">
              <description>Sets focus to the first focusable element in the Dialog's form if found,
else, the default button if found, else the first button defined via the
"buttons" configuration property.


This method is invoked when the Dialog is made visible.</description>
            </function>
            <function name="focusFirstButton" returns="void">
              <description>Sets the focus to the first button created via the "buttons"
configuration property.</description>
            </function>
            <function name="focusLast" returns="void">
              <description>Sets focus to the last element in the Dialog's form or the last
button defined via the "buttons" configuration property.</description>
            </function>
            <function name="focusLastButton" returns="void">
              <description>Sets the focus to the last button created via the "buttons"
configuration property.</description>
            </function>
            <function name="getButtons" returns="Array">
              <description>Returns an array containing each of the Dialog's
buttons, by default an array of HTML &lt;BUTTON&gt;
elements.  If the Dialog's buttons were created using the
YAHOO.widget.Button class (via the inclusion of the optional Button
dependancy on the page), an array of YAHOO.widget.Button instances
is returned.</description>
            </function>
            <function name="getData" returns="Object">
              <description>Returns a JSON-compatible data structure representing the data
currently contained in the form.</description>
            </function>
            <function name="init" returns="void">
              <description>The Dialog initialization method, which is executed for Dialog and
all of its subclasses. This method is automatically called by the
constructor, and  sets up all DOM references for pre-existing markup,
and creates required markup if it is not already present.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be changed
using the Dialog's Config object (cfg).</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for Dialog which are fired
automatically at appropriate times by the Dialog class.</description>
            </function>
            <function name="registerForm" returns="void">
              <description>Prepares the Dialog's internal FORM object, creating one if one is
not currently present.</description>
            </function>
            <function name="setFirstLastFocusable" returns="void">
              <description>Configures instance properties, pointing to the
first and last focusable elements in the Dialog's form.</description>
            </function>
            <function name="setTabLoop" returns="void">
              <description>Sets up a tab, shift-tab loop between the first and last elements
provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener
instance properties, which are reset everytime this method is invoked.</description>
              <params>
                <param name="firstElement" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="lastElement" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="submit" returns="void">
              <description>Executes a submit of the Dialog if validation
is successful. By default the Dialog is hidden
after submission, but you can set the "hideaftersubmit"
configuration property to false, to prevent the Dialog
from being hidden.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="validate" returns="void">
              <description>Built-in function hook for writing a validation function that will
be checked for a "true" value prior to a submit. This function, as
implemented by default, always returns true, so it should be
overridden if validation is necessary.</description>
            </function>
            <function name="Dialog" returns="YAHOO.widget.Dialog">
              <description>Class YAHOO.widget.Dialog constructor
Dialog is an implementation of Panel that can be used to submit form
data.


Built-in functionality for buttons with event handlers is included.
If the optional YUI Button dependancy is included on the page, the buttons
created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
will be created.


Forms can be processed in 3 ways -- via an asynchronous Connection utility call,
a simple form POST or GET, or manually. The YUI Connection utility should be
included if you're using the default "async" postmethod, but is not required if
you're using any of the other postmethod values.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DropdownCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The DropdownCellEditor class provides functionality for inline editing
DataTable cell data a SELECT element.</description>
          <attributes>
            <attribute name="dropdown" type="HTMLElement" readonly="False">
              <description>Reference to Dropdown element.</description>
            </attribute>
            <attribute name="dropdownOptions" type="String[] | Object[]" readonly="False">
              <description>Array of dropdown values. Can either be a simple array (e.g.,
["Alabama","Alaska","Arizona","Arkansas"]) or a an array of objects (e.g.,
[{label:"Alabama", value:"AL"}, {label:"Alaska", value:"AK"},
{label:"Arizona", value:"AZ"}, {label:"Arkansas", value:"AR"}]).</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in DropdownCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from DropdownCellEditor.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a form with select element.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets DropdownCellEditor UI to initial state.</description>
            </function>
            <function name="DropdownCellEditor" returns="YAHOO.widget.DropdownCellEditor">
              <description>Class YAHOO.widget.DropdownCellEditor constructor
The DropdownCellEditor class provides functionality for inline editing
DataTable cell data a SELECT element.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.DualSlider" extends="Object" private="True">
          <description>A slider with two thumbs, one that represents the min value and
the other the max.  Actually a composition of two sliders, both with
the same background.  The constraints for each slider are adjusted
dynamically so that the min value of the max slider is equal or greater
to the current value of the min slider, and the max value of the min
slider is the current value of the max slider.
Constructor assumes both thumbs are positioned absolutely at the 0 mark on
the background.</description>
          <attributes>
            <attribute name="activeSlider" type="Slider" readonly="False">
              <description>The currently active slider (min or max). read only</description>
            </attribute>
            <attribute name="isHoriz" type="boolean" readonly="False">
              <description>Is the DualSlider oriented horizontally or vertically?
read only</description>
            </attribute>
            <attribute name="maxSlider" type="Slider" readonly="False">
              <description>A slider instance that keeps track of the upper value of the range.
read only</description>
            </attribute>
            <attribute name="maxVal" type="int" readonly="False">
              <description>The current value of the max thumb. read only.</description>
            </attribute>
            <attribute name="minRange" type="int" readonly="False">
              <description>Pixel distance to maintain between thumbs.</description>
            </attribute>
            <attribute name="minSlider" type="Slider" readonly="False">
              <description>A slider instance that keeps track of the lower value of the range.
read only</description>
            </attribute>
            <attribute name="minVal" type="int" readonly="False">
              <description>The current value of the min thumb. read only.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_bindKeyEvents" returns="void">
              <description>Protected property
Set up the listeners for the keydown and keypress events.</description>
            </function>
            <function name="_cleanEvent" returns="void">
              <description>Private property
Clean up the slideEnd event subscribers array, since each one-time
callback will be replaced in the event's subscribers property with
null.  This will cause memory bloat and loss of performance.</description>
              <params>
                <param name="o" type="EventProvider" optional="False">
                  <description>name of the CustomEvent</description>
                </param>
                <param name="evt" type="string" optional="False">
                  <description>name of the CustomEvent</description>
                </param>
              </params>
            </function>
            <function name="_handleDrag" returns="void">
              <description>Private property
Overrides the onDrag method for both sliders</description>
            </function>
            <function name="_handleKeyDown" returns="void">
              <description>Protected property
Delegate event handling to the active Slider.  See Slider.handleKeyDown.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleKeyPress" returns="void">
              <description>Protected property
Delegate event handling to the active Slider.  See Slider.handleKeyPress.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMaxChange" returns="void">
              <description>Private property
Executed when the max slider fires the change event</description>
            </function>
            <function name="_handleMinChange" returns="void">
              <description>Private property
Executed when the min slider fires the change event</description>
            </function>
            <function name="_handleMouseDown" returns="void">
              <description>Protected property
Delegates the onMouseDown to the appropriate Slider</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseUp" returns="void">
              <description>Protected property
Delegates the onMouseUp to the active Slider</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleSlideEnd" returns="void">
              <description>Private property
Executed when one of the sliders fires the slideEnd event</description>
            </function>
            <function name="_handleSlideStart" returns="void">
              <description>Private property
Executed when one of the sliders fires the slideStart event</description>
            </function>
            <function name="_oneTimeCallback" returns="void">
              <description>Private property
Schedule an event callback that will execute once, then unsubscribe
itself.</description>
              <params>
                <param name="o" type="EventProvider" optional="False">
                  <description>
                  </description>
                </param>
                <param name="evt" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectActiveSlider" returns="void">
              <description>Private property
A background click will move the slider thumb nearest to the click.
Override if you need different behavior.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMaxValue" returns="void">
              <description>Set the max thumb position to a new value.</description>
              <params>
                <param name="max" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setMinValue" returns="void">
              <description>Set the min thumb position to a new value.</description>
              <params>
                <param name="min" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setValues" returns="void">
              <description>Sets the min and max thumbs to new values.</description>
              <params>
                <param name="min" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="max" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateValue" returns="void">
              <description>Private property
Executed when one of the sliders is moved</description>
              <params>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DualSlider" returns="YAHOO.widget.DualSlider">
              <description>Class YAHOO.widget.DualSlider constructor
A slider with two thumbs, one that represents the min value and
the other the max.  Actually a composition of two sliders, both with
the same background.  The constraints for each slider are adjusted
dynamically so that the min value of the max slider is equal or greater
to the current value of the min slider, and the max value of the min
slider is the current value of the max slider.
Constructor assumes both thumbs are positioned absolutely at the 0 mark on
the background.</description>
              <params>
                <param name="minSlider" type="Slider" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxSlider" type="Slider" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="initVals" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Editor" extends="YAHOO.widget.SimpleEditor" private="True">
          <description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
          <attributes>
            <attribute name="_alwaysDisabled" type="Object" readonly="False">
              <description>Private property
The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.</description>
            </attribute>
            <attribute name="_alwaysEnabled" type="Object" readonly="False">
              <description>Private property
The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.</description>
            </attribute>
            <attribute name="_disabled" type="Array" readonly="False">
              <description>Private property
The Toolbar items that should be disabled if there is no selection present in the editor.</description>
            </attribute>
            <attribute name="_undoCache" type="Array" readonly="False">
              <description>Private property
An Array hash of the Undo Levels.</description>
            </attribute>
            <attribute name="_undoLevel" type="Number" readonly="False">
              <description>Private property
The index of the current undo state.</description>
            </attribute>
            <attribute name="CLASS_HIDDEN" type="String" readonly="False">
              <description>Protected property
CSS class applied to the body when the hiddenelements button is pressed.</description>
            </attribute>
            <attribute name="CLASS_LOCAL_FILE" type="String" readonly="False">
              <description>Protected property
CSS class applied to an element when it's found to have a local url.</description>
            </attribute>
            <attribute name="EDITOR_PANEL_ID" type="String" readonly="False">
              <description>HTML id to give the properties window in the DOM.</description>
            </attribute>
            <attribute name="STR_BEFORE_EDITOR" type="String" readonly="False">
              <description>The accessibility string for the element before the iFrame</description>
            </attribute>
            <attribute name="STR_CLOSE_WINDOW" type="String" readonly="False">
              <description>The Title of the close button in the Editor Window</description>
            </attribute>
            <attribute name="STR_CLOSE_WINDOW_NOTE" type="String" readonly="False">
              <description>A note appearing in the Editor Window to tell the user that the Escape key will close the window</description>
            </attribute>
            <attribute name="STR_IMAGE_BORDER" type="String" readonly="False">
              <description>The label string for the image border.</description>
            </attribute>
            <attribute name="STR_IMAGE_BORDER_SIZE" type="String" readonly="False">
              <description>The label string for the image border size.</description>
            </attribute>
            <attribute name="STR_IMAGE_BORDER_TYPE" type="String" readonly="False">
              <description>The label string for the image border type.</description>
            </attribute>
            <attribute name="STR_IMAGE_COPY" type="String" readonly="False">
              <description>The label string for the image copy and paste message for Opera and Safari</description>
            </attribute>
            <attribute name="STR_IMAGE_ORIG_SIZE" type="String" readonly="False">
              <description>The label string for Original Image Size</description>
            </attribute>
            <attribute name="STR_IMAGE_PADDING" type="String" readonly="False">
              <description>The label string for the image padding.</description>
            </attribute>
            <attribute name="STR_IMAGE_PROP_TITLE" type="String" readonly="False">
              <description>The title for the Image Property Editor Window</description>
            </attribute>
            <attribute name="STR_IMAGE_SIZE" type="String" readonly="False">
              <description>The label string for Image Size</description>
            </attribute>
            <attribute name="STR_IMAGE_TEXTFLOW" type="String" readonly="False">
              <description>The label string for the image text flow.</description>
            </attribute>
            <attribute name="STR_IMAGE_TITLE" type="String" readonly="False">
              <description>The label string for Image Description</description>
            </attribute>
            <attribute name="STR_LINK_NEW_WINDOW" type="String" readonly="False">
              <description>The string for the open in a new window label.</description>
            </attribute>
            <attribute name="STR_LINK_PROP_REMOVE" type="String" readonly="False">
              <description>The label string for the Remove link from text link inside the property editor.</description>
            </attribute>
            <attribute name="STR_LINK_PROP_TITLE" type="String" readonly="False">
              <description>The label string for the Link Property Editor Window.</description>
            </attribute>
            <attribute name="STR_LINK_TITLE" type="String" readonly="False">
              <description>The string for the link description.</description>
            </attribute>
            <attribute name="STR_LOCAL_FILE_WARNING" type="String" readonly="False">
              <description>The label string for the local file warning.</description>
            </attribute>
            <attribute name="STR_NONE" type="String" readonly="False">
              <description>The string for the word none.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_checkUndo" returns="void">
              <description>Private property
Prunes the undo cache when it reaches the maxUndo config</description>
            </function>
            <function name="_closeWindow" returns="void">
              <description>Private property
Close the currently open EditorWindow with the Escape key.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_defaultImageToolbar" returns="void">
              <description>Private property
A reference to the Toolbar Object inside Image Editor Window.</description>
            </function>
            <function name="_defaultImageToolbarConfig" returns="void">
              <description>Private property
Config to be used for the default Image Editor Window.</description>
            </function>
            <function name="_fixNodes" returns="void">
              <description>Private property
Fix href and imgs as well as remove invalid HTML.</description>
            </function>
            <function name="_getUndo" returns="String">
              <description>Private property
Get's a level from the undo cache.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleCreateLinkWindowClose" returns="void">
              <description>Private property
Handles the closing of the Link Properties Window.</description>
            </function>
            <function name="_handleInsertImageClick" returns="void">
              <description>Private property
Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.</description>
            </function>
            <function name="_handleInsertImageWindowClose" returns="void">
              <description>Private property
Handles the closing of the Image Properties Window.</description>
            </function>
            <function name="_handleKeyDown" returns="void">
              <description>Private property
Override method that handles some new keydown events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleWindowInputs" returns="void">
              <description>Disables/Enables all fields inside Editor windows. Used in show/hide events to keep window fields from submitting when the parent form is submitted.</description>
              <params>
                <param name="disable" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_hasUndoLevel" returns="void">
              <description>Private property
Checks to see if we have an undo level available</description>
            </function>
            <function name="_putUndo" returns="void">
              <description>Private property
Puts the content of the Editor into the _undoCache.
//TODO Convert the hash to a series of TEXTAREAS to store state in.</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_renderCreateLinkWindow" returns="void">
              <description>Private property
Pre renders the CreateLink window so we get faster window opening.</description>
            </function>
            <function name="_renderInsertImageWindow" returns="void">
              <description>Private property
Pre renders the InsertImage window so we get faster window opening.</description>
            </function>
            <function name="_renderPanel" returns="YAHOO.widget.Overlay">
              <description>Private property
Renders the panel used for Editor Windows to the document so we can start using it..</description>
            </function>
            <function name="_storeUndo" returns="void">
              <description>Private property
Method to call when you want to store an undo state. Currently called from nodeChange and _handleKeyUp</description>
            </function>
            <function name="_undoNodeChange" returns="void">
              <description>Private property
nodeChange listener for undo processing</description>
            </function>
            <function name="_windows" returns="void">
              <description>Private property
A reference to the HTML elements used for the body of Editor Windows.</description>
            </function>
            <function name="closeWindow" returns="void">
              <description>Close the currently open EditorWindow.</description>
            </function>
            <function name="cmd_heading" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_hiddenelements" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_indent" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_justify" returns="void">
              <description>This is a factory method for the justify family of commands.</description>
              <params>
                <param name="dir" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_justifycenter" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('justifycenter') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_justifyleft" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('justifyleft') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_justifyright" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('justifyright') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_outdent" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_redo" returns="void">
              <description>Pulls an item from the Undo stack and updates the Editor</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_removeformat" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_script" returns="void">
              <description>This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.</description>
              <params>
                <param name="action" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_subscript" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_superscript" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_undo" returns="void">
              <description>Pulls an item from the Undo stack and updates the Editor</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>The Editor class' initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to create
the editor.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="moveWindow" returns="void">
              <description>Realign the window with the currentElement and reposition the knob above the panel.</description>
              <params>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="openWindow" returns="void">
              <description>Opens a new "window/panel"</description>
              <params>
                <param name="win" type="YAHOO.widget.EditorWindow" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the editor.</description>
            </function>
            <function name="Editor" returns="YAHOO.widget.Editor">
              <description>Class YAHOO.widget.Editor constructor
The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.EditorInfo" extends="Object" private="True">
          <description>Singleton object used to track the open window objects and panels across the various open editors</description>
          <attributes>
            <attribute name="_instances" type="Object" readonly="False">
              <description>Private property
A reference to all editors on the page.</description>
            </attribute>
            <attribute name="blankImage" type="String" readonly="False">
              <description>Private property
A reference to the blankImage url</description>
            </attribute>
            <attribute name="panel" type="Object YAHOO.widget.Overlay" readonly="False">
              <description>Private property
A reference to the currently open panel in any editor on the page.</description>
            </attribute>
            <attribute name="window" type="Object YAHOO.widget.EditorWindow" readonly="False">
              <description>Private property
A reference to the currently open window object in any editor on the page.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getEditorById" returns="void">
              <description>Returns a reference to the Editor object associated with the given textarea</description>
              <params>
                <param name="id" type="String/HTMLElement" optional="False">
                  <description>The id or reference of the textarea to return the Editor instance of</description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the EditorInfo.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.EditorWindow" extends="Object" private="True">
          <description>Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.
This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.</description>
          <attributes>
            <attribute name="attrs" type="object" readonly="False">
              <description>Private property
The window attributes</description>
            </attribute>
            <attribute name="body" type="object" readonly="False">
              <description>Private property
Holder for the body of the window, used in Editor.openWindow</description>
            </attribute>
            <attribute name="footer" type="object" readonly="False">
              <description>Private property
Holder for the footer of the window, used in Editor.openWindow</description>
            </attribute>
            <attribute name="header" type="object" readonly="False">
              <description>Private property
Holder for the header of the window, used in Editor.openWindow</description>
            </attribute>
            <attribute name="name" type="object" readonly="False">
              <description>Private property
A unique name for the window</description>
            </attribute>
          </attributes>
          <functions>
            <function name="setBody" returns="void">
              <description>Sets the body for the window.</description>
              <params>
                <param name="str" type="String/HTMLElement" optional="False">
                  <description>The string or DOM reference to be used as the windows body.</description>
                </param>
              </params>
            </function>
            <function name="setFooter" returns="void">
              <description>Sets the footer for the window.</description>
              <params>
                <param name="str" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHeader" returns="void">
              <description>Sets the header for the window.</description>
              <params>
                <param name="str" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the EditorWindow.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.FlashAdapter" extends="Object" private="True">
          <description>Wraps Flash embedding functionality and allows communication with SWF through
attributes.</description>
          <attributes>
            <attribute name="_attributes" type="Object" readonly="False">
              <description>Private property
The initializing attributes are stored here until the SWF is ready.</description>
            </attribute>
            <attribute name="_containerID" type="String" readonly="False">
              <description>Private property
The ID of the containing DIV.</description>
            </attribute>
            <attribute name="_id" type="String" readonly="False">
              <description>Private property
The id of this instance.</description>
            </attribute>
            <attribute name="_initialized" type="Boolean" readonly="False">
              <description>Private property
Indicates whether the SWF has been initialized and is ready
to communicate with JavaScript</description>
            </attribute>
            <attribute name="_swf" type="object" readonly="False">
              <description>Private property
A reference to the embedded SWF file.</description>
            </attribute>
            <attribute name="_swfURL" type="String" readonly="False">
              <description>Private property
The URL of the SWF file.</description>
            </attribute>
            <attribute name="proxyFunctionCount" type="object" readonly="False">
              <description>Private property
The number of proxy functions that have been created.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_embedSWF" returns="void">
              <description>Private property
Embeds the SWF in the page and associates it with this instance.</description>
            </function>
            <function name="_eventHandler" returns="void">
              <description>Private property
Handles or re-dispatches events received from the SWF.</description>
            </function>
            <function name="_getAltText" returns="void">
              <description>Private property
Getter for altText attribute.</description>
            </function>
            <function name="_getSWFURL" returns="void">
              <description>Private property
Getter for swfURL attribute.</description>
            </function>
            <function name="_initAttributes" returns="void">
              <description>Private property
Initializes the attributes.</description>
            </function>
            <function name="_loadHandler" returns="void">
              <description>Private property
Called when the SWF has been initialized.</description>
            </function>
            <function name="_setAltText" returns="void">
              <description>Private property
Setter for altText attribute.</description>
            </function>
            <function name="destroy" returns="void">
              <description>Nulls out the entire FlashAdapter instance and related objects and removes attached
event listeners and clears out DOM elements inside the container. After calling
this method, the instance reference should be expliclitly nulled by implementer,
as in myChart = null. Use with caution!</description>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the FlashAdapter instance.</description>
            </function>
            <function name="createProxyFunction" returns="void">
              <description>Private property
Creates a globally accessible function that wraps a function reference.
Returns the proxy function's name as a string for use by the SWF through
ExternalInterface.</description>
            </function>
            <function name="eventHandler" returns="void">
              <description>Private property
Receives event messages from SWF and passes them to the correct instance
of FlashAdapter.</description>
            </function>
            <function name="removeProxyFunction" returns="void">
              <description>Private property
Removes a function created with createProxyFunction()</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.HTMLNode" extends="YAHOO.widget.Node" private="True">
          <description>This implementation takes either a string or object for the
oData argument.  If is it a string, it will use it for the display
of this node (and it can contain any html code).  If the parameter
is an object,it looks for a parameter called "html" that will be
used for this node's display.</description>
          <attributes>
            <attribute name="_type" type="string" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
            <attribute name="contentStyle" type="string" readonly="False">
              <description>The CSS class for the html content container.  Defaults to ygtvhtml, but
can be overridden to provide a custom presentation for a specific node.</description>
            </attribute>
            <attribute name="html" type="string" readonly="False">
              <description>The HTML content to use for this node's display</description>
            </attribute>
            <attribute name="initContent" type="object" readonly="False">
              <description>Sets up the node label</description>
            </attribute>
            <attribute name="setHtml" type="object" readonly="False">
              <description>Synchronizes the node.data, node.html, and the node's content</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getNodeDefinition" returns="Object | false">
              <description>Returns an object which could be used to build a tree out of this node and its children.
It can be passed to the tree constructor to reproduce this node as a tree.
It will return false if any node loads dynamically, regardless of whether it is loaded or not.</description>
            </function>
            <function name="HTMLNode" returns="YAHOO.widget.HTMLNode">
              <description>Class YAHOO.widget.HTMLNode constructor
This implementation takes either a string or object for the
oData argument.  If is it a string, it will use it for the display
of this node (and it can contain any html code).  If the parameter
is an object,it looks for a parameter called "html" that will be
used for this node's display.</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>this node's parent node</description>
                </param>
                <param name="oParent" type="YAHOO.widget.Node" optional="False">
                  <description>this node's parent node</description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>this node's parent node</description>
                </param>
                <param name="hasIcon" type="boolean" optional="False">
                  <description>this node's parent node</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ImageCropper" extends="YAHOO.util.Element" private="True">
          <description>Creates a Image Cropper control.</description>
          <attributes>
            <attribute name="_active" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if the crop region is active</description>
            </attribute>
            <attribute name="_image" type="String" readonly="False">
              <description>Private property
The url of the image we are cropping</description>
            </attribute>
            <attribute name="_instances" type="Object" readonly="False">
              <description>Private property
Internal hash table for all ImageCropper instances</description>
            </attribute>
            <attribute name="_mask" type="HTMLElement" readonly="False">
              <description>Private property
The HTML Element created to "mask" the image being cropped</description>
            </attribute>
            <attribute name="_resize" type="Object" readonly="False">
              <description>Private property
A reference to the Resize Utility used in this Cropper Instance</description>
            </attribute>
            <attribute name="_resizeEl" type="HTMLElement" readonly="False">
              <description>Private property
The HTML Element used to create the Resize Oject</description>
            </attribute>
            <attribute name="_resizeMaskEl" type="HTMLElement" readonly="False">
              <description>Private property
The HTML Element used to create the Resize mask</description>
            </attribute>
            <attribute name="_wrap" type="HTMLElement" readonly="False">
              <description>Private property
The HTML Element created to wrap the image</description>
            </attribute>
            <attribute name="CSS_MAIN" type="String" readonly="False">
              <description>Private property
The CSS class used to wrap the element</description>
            </attribute>
            <attribute name="CSS_MASK" type="String" readonly="False">
              <description>Private property
The CSS class for the mask element</description>
            </attribute>
            <attribute name="CSS_RESIZE_MASK" type="String" readonly="False">
              <description>Private property
The CSS class for the mask inside the resize element</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createMask" returns="void">
              <description>Private property
Creates the mask element used to mask the image</description>
            </function>
            <function name="_createResize" returns="void">
              <description>Private property
Creates the resize element and the instance of the Resize Utility</description>
            </function>
            <function name="_createWrap" returns="void">
              <description>Private property
Creates the wrapper element used to wrap the image</description>
            </function>
            <function name="_handleB4DragEvent" returns="void">
              <description>Private property
Handles the DragDrop b4DragEvent event</description>
            </function>
            <function name="_handleBeforeResizeEvent" returns="void">
              <description>Private property
Handles the Resize Utilitys beforeResize event</description>
            </function>
            <function name="_handleDragEvent" returns="void">
              <description>Private property
Handles the DragDrop DragEvent event</description>
            </function>
            <function name="_handleEndResizeEvent" returns="void">
              <description>Private property
Handles the Resize Utilitys endResize event</description>
            </function>
            <function name="_handleKeyPress" returns="void">
              <description>Private property
Handles the keypress event</description>
            </function>
            <function name="_handleMouseOut" returns="void">
              <description>Private property
Handles the mouseout event</description>
            </function>
            <function name="_handleMouseOver" returns="void">
              <description>Private property
Handles the mouseover event</description>
            </function>
            <function name="_handleResizeEvent" returns="void">
              <description>Private property
Handles the Resize Utilitys Resize event</description>
              <params>
                <param name="Event" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleResizeMaskEl" returns="void">
              <description>Private property
Resizes the inner mask element</description>
            </function>
            <function name="_handleStartResizeEvent" returns="void">
              <description>Private property
Handles the Resize Utilitys startResize event</description>
            </function>
            <function name="_moveEl" returns="void">
              <description>Private property
Moves the resize element based on the arrow keys</description>
            </function>
            <function name="_setBackgroundImage" returns="void">
              <description>Private property
Sets the background image of the resize element</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setBackgroundPosition" returns="void">
              <description>Private property
Sets the background image position to the top and left position</description>
              <params>
                <param name="Number" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="Number" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setConstraints" returns="Object">
              <description>Private property
Set the DragDrop constraints to keep the element inside the crop area.</description>
              <params>
                <param name="Boolean" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_syncBackgroundPosition" returns="void">
              <description>Private property
Syncs the packground position of the resize element with the resize elements top and left style position</description>
            </function>
            <function name="destroy" returns="void">
              <description>Destroys the ImageCropper object and all of it's elements &amp; listeners.</description>
            </function>
            <function name="getCropCoords" returns="Object">
              <description>Returns the coordinates needed to crop the image</description>
            </function>
            <function name="getCropperById" returns="Object">
              <description>Get's an ImageCropper object by the HTML id of the image associated with the ImageCropper object.</description>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Get the HTML reference for the image element.</description>
            </function>
            <function name="getMaskEl" returns="HTMLElement">
              <description>Get the HTML reference for the mask element.</description>
            </function>
            <function name="getResizeEl" returns="HTMLElement">
              <description>Get the HTML reference for the resize element.</description>
            </function>
            <function name="getResizeMaskEl" returns="HTMLElement">
              <description>Get the HTML reference for the resizable object's mask element.</description>
            </function>
            <function name="getResizeObject" returns="YAHOO.util.Resize">
              <description>Get the Resize Utility object.</description>
            </function>
            <function name="getWrapEl" returns="HTMLElement">
              <description>Get the HTML reference for the wrap element.</description>
            </function>
            <function name="init" returns="void">
              <description>Private property
The ImageCropper class's initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Initializes all of the configuration attributes used to create a croppable element.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="YAHOO.widget.ImageCropper">
              <description>Resets the crop element back to it's original position</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the ImageCropper Object.</description>
            </function>
            <function name="ImageCropper" returns="YAHOO.widget.ImageCropper">
              <description>Class YAHOO.widget.ImageCropper constructor
Creates a Image Cropper control.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Layout" extends="YAHOO.util.Element" private="True">
          <description>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</description>
          <attributes>
            <attribute name="_doc" type="HTMLElement" readonly="False">
              <description>Private property
Reference to the root element</description>
            </attribute>
            <attribute name="_instances" type="Object" readonly="False">
              <description>Private property
Internal hash table for all layout instances</description>
            </attribute>
            <attribute name="_isBody" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if we are using the body as the root element.</description>
            </attribute>
            <attribute name="_rendered" type="Boolean" readonly="False">
              <description>Private property
Set to true when the layout is rendered</description>
            </attribute>
            <attribute name="_sizes" type="Object" readonly="False">
              <description>Private property
A collection of the current sizes of all usable LayoutUnits to be used for calculations</description>
            </attribute>
            <attribute name="_units" type="Object" readonly="False">
              <description>Private property
An object literal that contains a list of units in the layout</description>
            </attribute>
            <attribute name="_zIndex" type="Number" readonly="False">
              <description>Private property
The zIndex to set all LayoutUnits to</description>
            </attribute>
            <attribute name="browser" type="Object" readonly="False">
              <description>A modified version of the YAHOO.env.ua object</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createUnits" returns="void">
              <description>Private property
Private method to create units from the config that was passed in.</description>
            </function>
            <function name="_setBodySize" returns="void">
              <description>Private property
Used to set the body size of the layout, sets the height and width of the parent container</description>
              <params>
                <param name="set" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setCenter" returns="void">
              <description>Private property
Used to set the size and position of the center unit</description>
              <params>
                <param name="set" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setSides" returns="void">
              <description>Private property
Used to set the size and position of the left, right, top and bottom units</description>
              <params>
                <param name="set" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setupBodyElements" returns="void">
              <description>Private property
Sets up the main doc element when using the body as the main element.</description>
            </function>
            <function name="_setupElements" returns="void">
              <description>Private property
Sets up the main doc element when not using the body as the main element.</description>
            </function>
            <function name="_stamp" returns="void">
              <description>Private property
Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable.</description>
            </function>
            <function name="addUnit" returns="YAHOO.widget.LayoutUnit">
              <description>Add a unit to this layout and if the layout is rendered, resize the layout.</description>
              <params>
                <param name="cfg" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes this layout from the page and destroys all units that it contains. This will destroy all data inside the layout and it's children.</description>
            </function>
            <function name="getLayoutById" returns="Object">
              <description>Get's a layout object by the HTML id of the element associated with the Layout object.</description>
            </function>
            <function name="getSizes" returns="Object">
              <description>Get a reference to the internal Layout Unit sizes object used to build the layout wireframe</description>
            </function>
            <function name="getUnitById" returns="YAHOO.widget.LayoutUnit">
              <description>Get the LayoutUnit by it's HTML id</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getUnitByPosition" returns="YAHOO.widget.LayoutUnit">
              <description>Get the LayoutUnit by it's position in this layout</description>
              <params>
                <param name="pos" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>Private property
The Layout class' initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Processes the config</description>
            </function>
            <function name="removeUnit" returns="void">
              <description>Remove the unit from this layout and resize the layout.</description>
              <params>
                <param name="unit" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="YAHOO.widget.Layout">
              <description>This method starts the render process, applying classnames and creating elements</description>
            </function>
            <function name="resize" returns="YAHOO.widget.Layout">
              <description>Starts the chain of resize routines that will resize all the units.</description>
              <params>
                <param name="set" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the Layout.</description>
            </function>
            <function name="Layout" returns="YAHOO.widget.Layout">
              <description>Class YAHOO.widget.Layout constructor
Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.LayoutUnit" extends="YAHOO.util.Element" private="True">
          <description>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</description>
          <attributes>
            <attribute name="_anim" type="YAHOO.util.Anim" readonly="False">
              <description>Private property
A reference to the Animation instance used by this LayouUnit</description>
            </attribute>
            <attribute name="_clip" type="HTMLElement" readonly="False">
              <description>Private property
A reference to the clip element used when collapsing the unit</description>
            </attribute>
            <attribute name="_collapsed" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if the unit is collapsed or not.</description>
            </attribute>
            <attribute name="_collapsing" type="Boolean" readonly="False">
              <description>Private property
A flag set while the unit is being collapsed, used so we don't fire events while animating the size</description>
            </attribute>
            <attribute name="_gutter" type="Object" readonly="False">
              <description>Private property
A simple hash table used to store the gutter to apply to the Unit</description>
            </attribute>
            <attribute name="_instances" type="Object" readonly="False">
              <description>Private property
Internal hash table for all layout unit instances</description>
            </attribute>
            <attribute name="_lastCenetrScroll" type="Boolean" readonly="False">
              <description>Private property
A holder for the last known scroll state of the center unit</description>
            </attribute>
            <attribute name="_lastHeight" type="Number" readonly="False">
              <description>Private property
A holder for the last known height of the unit</description>
            </attribute>
            <attribute name="_lastLeft" type="Number" readonly="False">
              <description>Private property
A holder for the last known left of the unit</description>
            </attribute>
            <attribute name="_lastScroll" type="Boolean" readonly="False">
              <description>Private property
A holder for the last known scroll state of the unit</description>
            </attribute>
            <attribute name="_lastScrollTop" type="Number" readonly="False">
              <description>Private property
A holder for the last known scrollTop state of the unit</description>
            </attribute>
            <attribute name="_lastTop" type="Number" readonly="False">
              <description>Private property
A holder for the last known top of the unit</description>
            </attribute>
            <attribute name="_lastWidth" type="Number" readonly="False">
              <description>Private property
A holder for the last known width of the unit</description>
            </attribute>
            <attribute name="_loading" type="Number" readonly="False">
              <description>Private property
During the loading process this variable will be true</description>
            </attribute>
            <attribute name="_resize" type="YAHOO.util.Resize" readonly="False">
              <description>Private property
A reference to the Resize instance used by this LayoutUnit</description>
            </attribute>
            <attribute name="_sizes" type="Object" readonly="False">
              <description>Private property
A collection of the current sizes of the contents of this Layout Unit</description>
            </attribute>
            <attribute name="body" type="HTMLElement" readonly="False">
              <description>A reference to the HTML element used for the body</description>
            </attribute>
            <attribute name="browser" type="Object" readonly="False">
              <description>A modified version of the YAHOO.env.ua object</description>
            </attribute>
            <attribute name="dataConnection" type="Object" readonly="False">
              <description>YUI Connection Manager handler</description>
            </attribute>
            <attribute name="footer" type="HTMLElement" readonly="False">
              <description>A reference to the HTML element used for the footer</description>
            </attribute>
            <attribute name="header" type="HTMLELement" readonly="False">
              <description>A reference to the HTML element used for the Header</description>
            </attribute>
            <attribute name="loadHandler" type="Object" readonly="False">
              <description>Callback method for the YUI Connection Manager used for load the body using AJAX</description>
            </attribute>
            <attribute name="LOADING_CLASSNAME" type="String" readonly="False">
              <description>The class name applied to dynamic tabs while loading.</description>
            </attribute>
            <attribute name="STR_CLOSE" type="{String}" readonly="False">
              <description>String used for close button title</description>
            </attribute>
            <attribute name="STR_COLLAPSE" type="{String}" readonly="False">
              <description>String used for collapse button title</description>
            </attribute>
            <attribute name="STR_EXPAND" type="{String}" readonly="False">
              <description>String used for expand button title</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_cleanGrids" returns="void">
              <description>Private property
This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation.</description>
            </function>
            <function name="_createClip" returns="void">
              <description>Private property
Create the clip element used when the Unit is collapsed</description>
            </function>
            <function name="_createHeader" returns="HTMLElement">
              <description>Private property
Creates the HTMLElement for the header</description>
            </function>
            <function name="_fixQuirks" returns="Number">
              <description>Private property
Fixes the box calculations for IE in QuirksMode</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dim" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="side" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getBorderSizes" returns="Array">
              <description>Private property
Get the CSS border size of the element passed.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getBoxSize" returns="Array">
              <description>Private property
Get's the elements clientHeight and clientWidth plus the size of the borders</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setHeight" returns="Number">
              <description>Private property
Sets the height of the element based on the border size of the element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="h" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setWidth" returns="Number">
              <description>Private property
Sets the width of the element based on the border size of the element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="w" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toggleClip" returns="void">
              <description>Private property
Toggle th current state of the Clip element and set it's height, width and position</description>
            </function>
            <function name="close" returns="YAHOO.widget.Layout">
              <description>Close the unit, removing it from the parent Layout.</description>
            </function>
            <function name="collapse" returns="YAHOO.widget.LayoutUnit">
              <description>Collapse the Unit if it is not collapsed.</description>
            </function>
            <function name="destroy" returns="YAHOO.widget.Layout">
              <description>Removes this unit from the parent and cleans up after itself.</description>
              <params>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="expand" returns="YAHOO.widget.LayoutUnit">
              <description>Expand the Unit if it is collapsed.</description>
            </function>
            <function name="getLayoutUnitById" returns="Object">
              <description>Get's a layout unit object by the HTML id of the element associated with the Layout Unit object.</description>
            </function>
            <function name="getSizes" returns="Object">
              <description>Get a reference to the internal sizes object for this unit</description>
            </function>
            <function name="init" returns="void">
              <description>Private property
The initalization method inherited from Element.</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Processes the config</description>
            </function>
            <function name="loadContent" returns="object">
              <description>Loading the content of the unit using the connection manager</description>
            </function>
            <function name="resize" returns="YAHOO.widget.LayoutUnit">
              <description>Resize either the unit or it's clipped state, also updating the box inside</description>
              <params>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toggle" returns="YAHOO.widget.LayoutUnit">
              <description>Toggles the Unit, replacing it with a clipped version.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the LayoutUnit.</description>
            </function>
            <function name="LayoutUnit" returns="YAHOO.widget.LayoutUnit">
              <description>Class YAHOO.widget.LayoutUnit constructor
Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.LineChart" extends="Object" private="True">
          <description>LineChart class for the YUI Charts widget.</description>
          <functions>
            <function name="LineChart" returns="YAHOO.widget.LineChart">
              <description>Class YAHOO.widget.LineChart constructor
LineChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.LineSeries" extends="Object" private="True">
          <description>LineSeries class for the YUI Charts widget.</description>
          <functions>
            <function name="LineSeries" returns="YAHOO.widget.LineSeries">
              <description>Class YAHOO.widget.LineSeries constructor
LineSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Logger" extends="Object" private="True">
          <description>The singleton Logger class provides core log management functionality. Saves
logs written through the global YAHOO.log function or written by a LogWriter
instance. Provides access to logs for reading by a LogReader instance or
native browser console such as the Firebug extension to Firefox or Safari's
JavaScript console through integration with the console.log() method.</description>
          <attributes>
            <attribute name="_browserConsoleEnabled" type="Boolean" readonly="False">
              <description>Private property
Internal property to track whether output to browser console is enabled.</description>
            </attribute>
            <attribute name="_lastTime" type="Date" readonly="False">
              <description>Private property
Timestamp of last logged message.</description>
            </attribute>
            <attribute name="_stack" type="Array" readonly="False">
              <description>Private property
Array to hold all log messages.</description>
            </attribute>
            <attribute name="_startTime" type="Date" readonly="False">
              <description>Private property
Static timestamp of Logger initialization.</description>
            </attribute>
            <attribute name="categories" type="String[]" readonly="False">
              <description>Array of categories.</description>
            </attribute>
            <attribute name="loggerEnabled" type="Boolean" readonly="False">
              <description>True if Logger is enabled, false otherwise.</description>
            </attribute>
            <attribute name="maxStackEntries" type="Number" readonly="False">
              <description>Upper limit on size of internal stack.</description>
            </attribute>
            <attribute name="sources" type="String[]" readonly="False">
              <description>Array of sources.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createNewCategory" returns="void">
              <description>Private property
Creates a new category of log messages and fires categoryCreateEvent.</description>
              <params>
                <param name="sCategory" type="String" optional="False">
                  <description>Category name.</description>
                </param>
              </params>
            </function>
            <function name="_createNewSource" returns="void">
              <description>Private property
Creates a new source of log messages and fires sourceCreateEvent.</description>
              <params>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_isNewCategory" returns="Boolean">
              <description>Private property
Checks to see if a category has already been created.</description>
              <params>
                <param name="sCategory" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_isNewSource" returns="Boolean">
              <description>Private property
Checks to see if a source already exists.</description>
              <params>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onWindowError" returns="void">
              <description>Private property
Handles logging of messages due to window error events.</description>
              <params>
                <param name="sMsg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sUrl" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sLine" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_printToBrowserConsole" returns="void">
              <description>Private property
Outputs a log message to global console.log() function.</description>
              <params>
                <param name="oEntry" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="disableBrowserConsole" returns="void">
              <description>Disables output to the browser's global console.log() function, which is used
by the Firebug extension to Firefox as well as Safari.</description>
            </function>
            <function name="enableBrowserConsole" returns="void">
              <description>Enables output to the browser's global console.log() function, which is used
by the Firebug extension to Firefox as well as Safari.</description>
            </function>
            <function name="getStack" returns="Object[]">
              <description>Public accessor to internal stack of log message objects.</description>
            </function>
            <function name="getStartTime" returns="Date">
              <description>Public accessor to internal start time.</description>
            </function>
            <function name="handleWindowErrors" returns="void">
              <description>Surpresses native JavaScript errors and outputs to console. By default,
Logger does not handle JavaScript window error events.
NB: Not all browsers support the window.onerror event.</description>
            </function>
            <function name="log" returns="void">
              <description>Saves a log message to the stack and fires newLogEvent. If the log message is
assigned to an unknown category, creates a new category. If the log message is
from an unknown source, creates a new source.  If browser console is enabled,
outputs the log message to browser console.</description>
              <params>
                <param name="sMsg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sCategory" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sSource" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="void">
              <description>Resets internal stack and startTime, enables Logger, and fires logResetEvent.</description>
            </function>
            <function name="unhandleWindowErrors" returns="void">
              <description>Unsurpresses native JavaScript errors. By default,
Logger does not handle JavaScript window error events.
NB: Not all browsers support the window.onerror event.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Menu" extends="YAHOO.widget.Overlay" private="True">
          <description>The Menu class creates a container that holds a vertical list representing
a set of options or commands.  Menu is the base class for all
menu containers.</description>
          <attributes>
            <attribute name="_aGroupTitleElements" type="Array" readonly="False">
              <description>Private property
Array of HTML element used to title groups of menu items.</description>
            </attribute>
            <attribute name="_aItemGroups" type="Array" readonly="False">
              <description>Private property
Multi-dimensional Array representing the menu items as they
are grouped in the menu.</description>
            </attribute>
            <attribute name="_aListElements" type="Array" readonly="False">
              <description>Private property
Array of &lt;ul&gt; elements, each of which is
the parent node for each item's &lt;li&gt; element.</description>
            </attribute>
            <attribute name="_bHandledMouseOutEvent" type="Boolean" readonly="False">
              <description>Private property
Boolean indicating the current state of the menu's
"mouseout" event.</description>
            </attribute>
            <attribute name="_bHandledMouseOverEvent" type="Boolean" readonly="False">
              <description>Private property
Boolean indicating the current state of the menu's
"mouseover" event.</description>
            </attribute>
            <attribute name="_bStopMouseEventHandlers" type="Boolean" readonly="False">
              <description>Private property
Stops "mouseover," "mouseout," and "mousemove" event handlers
from executing.</description>
            </attribute>
            <attribute name="_nCurrentMouseX" type="Number" readonly="False">
              <description>Private property
The current x coordinate of the mouse inside the area of
the menu.</description>
            </attribute>
            <attribute name="_sClassName" type="String" readonly="False">
              <description>Private property
The current value of the "classname" configuration attribute.</description>
            </attribute>
            <attribute name="_useHideDelay" type="Boolean" readonly="False">
              <description>Private property
Boolean indicating if the "mouseover" and "mouseout" event
handlers used for hiding the menu via a call to "YAHOO.lang.later" have
already been assigned.</description>
            </attribute>
            <attribute name="activeItem" type="YAHOO.widget.MenuItem" readonly="False">
              <description>Object reference to the item in the menu that has is selected.</description>
            </attribute>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the
menu's &lt;div&gt; element.</description>
            </attribute>
            <attribute name="GROUP_TITLE_TAG_NAME" type="String" readonly="False">
              <description>String representing the tagname of the HTML element used to
title the menu's item groups.</description>
            </attribute>
            <attribute name="ITEM_TYPE" type="YAHOO.widget.MenuItem" readonly="False">
              <description>Object representing the type of menu item to instantiate and
add when parsing the child nodes (either &lt;li&gt; element,
&lt;optgroup&gt; element or &lt;option&gt;)
of the menu's source HTML element.</description>
            </attribute>
            <attribute name="itemData" type="Array" readonly="False">
              <description>Array of items to be added to the menu.  The array can contain
strings representing the text for each item to be created, object literals
representing the menu item configuration properties, or MenuItem instances.
This property should be set via the constructor using the configuration
object literal.</description>
            </attribute>
            <attribute name="lazyLoad" type="Boolean" readonly="False">
              <description>Boolean indicating if the menu's "lazy load" feature is
enabled.  If set to "true," initialization and rendering of the menu's
items will be deferred until the first time it is made visible.  This
property should be set via the constructor using the configuration
object literal.</description>
            </attribute>
            <attribute name="OFF_SCREEN_POSITION" type="String" readonly="False">
              <description>Array representing the default x and y position that a menu
should have when it is positioned outside the viewport by the
"poistionOffScreen" method.</description>
            </attribute>
            <attribute name="parent" type="YAHOO.widget.MenuItem" readonly="False">
              <description>Object reference to the menu's parent menu or menu item.
This property can be set via the constructor using the configuration
object literal.</description>
            </attribute>
            <attribute name="srcElement" type="HTMLSelectElement|HTMLDivElement" readonly="False">
              <description>Object reference to the HTML element (either
&lt;select&gt; or &lt;div&gt;) used to
create the menu.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addItemToGroup" returns="YAHOO.widget.MenuItem">
              <description>Private property
Adds a menu item to a group.</description>
              <params>
                <param name="p_nGroupIndex" type="Number" optional="False">
                  <description>Number indicating the group to which the
item belongs.</description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>Number indicating the group to which the
item belongs.</description>
                </param>
                <param name="p_oItem" type="String" optional="False">
                  <description>Number indicating the group to which the
item belongs.</description>
                </param>
                <param name="p_oItem" type="Object" optional="False">
                  <description>Number indicating the group to which the
item belongs.</description>
                </param>
                <param name="p_nItemIndex" type="Number" optional="True">
                  <description>Number indicating the group to which the
item belongs.</description>
                </param>
              </params>
            </function>
            <function name="_cancelHideDelay" returns="void">
              <description>Private property
Cancels the call to "hideMenu."</description>
            </function>
            <function name="_cancelShowDelay" returns="void">
              <description>Private property
Cancels the call to the "showMenu."</description>
            </function>
            <function name="_clearSetWidthFlag" returns="void">
              <description>Private property
Change event listener for the "width" configuration property.  This listener is
added when a Menu's "width" configuration property is set by the "_setScrollHeight" method, and
is used to set the "_widthSetForScroll" property to "false" if the "width" configuration property
is changed after it was set by the "_setScrollHeight" method.  If the "_widthSetForScroll"
property is set to "false", and the "_setScrollHeight" method is in the process of tearing down
scrolling functionality, it will maintain the Menu's new width rather than reseting it.</description>
            </function>
            <function name="_configureSubmenu" returns="void">
              <description>Private property
Subscribes the menu item's submenu to its parent menu's events.</description>
              <params>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_createItemGroup" returns="Array">
              <description>Private property
Creates a new menu item group (array) and its associated
&lt;ul&gt; element. Returns an aray of menu item groups.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_disableScrollFooter" returns="void">
              <description>Protected property
Disables the footer used for scrolling the body of the menu.</description>
            </function>
            <function name="_disableScrollHeader" returns="void">
              <description>Protected property
Disables the header used for scrolling the body of the menu.</description>
            </function>
            <function name="_enableScrollFooter" returns="void">
              <description>Protected property
Enables the footer used for scrolling the body of the menu.</description>
            </function>
            <function name="_enableScrollHeader" returns="void">
              <description>Protected property
Enables the header used for scrolling the body of the menu.</description>
            </function>
            <function name="_execHideDelay" returns="void">
              <description>Private property
Hides the menu after the number of milliseconds specified by
the "hidedelay" configuration property.</description>
            </function>
            <function name="_execSubmenuHideDelay" returns="void">
              <description>Private property
Hides a submenu after the number of milliseconds specified by
the "submenuhidedelay" configuration property have ellapsed.</description>
              <params>
                <param name="p_oSubmenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nMouseX" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nHideDelay" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getFirstEnabledItem" returns="YAHOO.widget.MenuItem">
              <description>Private property
Returns the first enabled item in the menu.</description>
            </function>
            <function name="_getItemGroup" returns="Array">
              <description>Private property
Returns the menu item group at the specified index.</description>
              <params>
                <param name="p_nIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initSubTree" returns="void">
              <description>Private property
Iterates the childNodes of the source element to find nodes
used to instantiate menu and menu items.</description>
            </function>
            <function name="_onBeforeHide" returns="void">
              <description>Private property
"beforehide" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onBeforeRender" returns="void">
              <description>Private property
"beforerender" event handler for the menu.  Appends all of the
&lt;ul&gt;, &lt;li&gt; and their accompanying
title elements to the body element of the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onBeforeShow" returns="void">
              <description>Private property
"beforeshow" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onBlur" returns="void">
              <description>Protected property
"blur" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClick" returns="void">
              <description>Protected property
"click" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onHide" returns="void">
              <description>Private property
"hide" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onInit" returns="void">
              <description>Private property
"init" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onItemAdded" returns="void">
              <description>Private property
"itemadded" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onKeyDown" returns="void">
              <description>Protected property
"keydown" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onKeyPress" returns="void">
              <description>Protected property
"keypress" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuItemConfigChange" returns="void">
              <description>Private property
"configchange" event handler for the menu's items.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMenuItemDestroy" returns="void">
              <description>Private property
"destroy" event handler for the menu's items.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseMove" returns="void">
              <description>Protected property
"click" event handler for the menu.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseOut" returns="void">
              <description>Protected property
"mouseout" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onMouseOver" returns="void">
              <description>Protected property
"mouseover" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onParentMenuConfigChange" returns="void">
              <description>Private property
"configchange" event handler for a submenu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oSubmenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onParentMenuRender" returns="void">
              <description>Private property
"render" event handler for a submenu.  Renders a
submenu in response to the firing of its parent's "render" event.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oSubmenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onRender" returns="void">
              <description>Private property
"render" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onScrollTargetMouseOut" returns="void">
              <description>Protected property
"mouseout" event handler for the menu's "header" and "footer"
elements.  Used to stop scrolling the body of the menu up and down when the
menu's "maxheight" configuration property is set to a value greater than 0.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onScrollTargetMouseOver" returns="void">
              <description>Protected property
"mouseover" event handler for the menu's "header" and "footer"
elements.  Used to scroll the body of the menu up and down when the
menu's "maxheight" configuration property is set to a value greater than 0.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onShow" returns="void">
              <description>Private property
"show" event handler for the menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onVisibleChange" returns="void">
              <description>Private property
Change event handler for the the menu's "visible" configuration
property.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onYChange" returns="void">
              <description>Protected property
"y" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_removeItemFromGroupByIndex" returns="YAHOO.widget.MenuItem">
              <description>Private property
Removes a menu item from a group by index.  Returns the menu
item that was removed.</description>
              <params>
                <param name="p_nGroupIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nItemIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_removeItemFromGroupByValue" returns="YAHOO.widget.MenuItem">
              <description>Private property
Removes a menu item from a group by reference.  Returns the
menu item that was removed.</description>
              <params>
                <param name="p_nGroupIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setMaxHeight" returns="void">
              <description>Private property
"renderEvent" handler used to defer the setting of the
"maxheight" configuration property until the menu is rendered in lazy
load scenarios.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nMaxHeight" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setScrollHeight" returns="void">
              <description>Private property</description>
              <params>
                <param name="p_nScrollHeight" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_subscribeToItemEvents" returns="void">
              <description>Private property
Subscribes a menu to a menu item's event.</description>
              <params>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_updateItemProperties" returns="void">
              <description>Private property
Updates the "index," "groupindex," and "className" properties
of the menu items in the specified group.</description>
              <params>
                <param name="p_nGroupIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addItem" returns="YAHOO.widget.MenuItem">
              <description>Appends an item to the menu.</description>
              <params>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addItems" returns="Array">
              <description>Adds an array of items to the menu.</description>
              <params>
                <param name="p_aItems" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blur" returns="void">
              <description>Causes the menu to lose focus and fires the "blur" event.</description>
            </function>
            <function name="checkPosition" returns="Boolean">
              <description>Private property
Checks to make sure that the value of the "position" property
is one of the supported strings. Returns true if the position is supported.</description>
              <params>
                <param name="p_sPosition" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearActiveItem" returns="void">
              <description>Sets the "selected" configuration property of the menu's active
item to "false" and hides the item's submenu.</description>
              <params>
                <param name="p_bBlur" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearContent" returns="void">
              <description>Removes all of the content from the menu, including the menu
items, group titles, header and footer.</description>
            </function>
            <function name="configClassName" returns="void">
              <description>Event handler for when the "classname" configuration property of
a menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configContainer" returns="void">
              <description>Event handler for when the "container" configuration property
of the menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configDisabled" returns="void">
              <description>Event handler for when the "disabled" configuration property of
a menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configHideDelay" returns="void">
              <description>Event handler for when the "hidedelay" configuration property
of the menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configIframe" returns="void">
              <description>Event handler for when the "iframe" configuration property of
the menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configMaxHeight" returns="void">
              <description>Event handler for when the "maxheight" configuration property of
a Menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configPosition" returns="void">
              <description>Event handler for when the "position" configuration property
of the menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configShadow" returns="void">
              <description>Event handler for when the "shadow" configuration property of
a menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configVisible" returns="void">
              <description>Event handler for when the "visible" configuration property
the menu changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the menu's &lt;div&gt; element
(and accompanying child nodes) from the document.</description>
            </function>
            <function name="focus" returns="void">
              <description>Causes the menu to receive focus and fires the "focus" event.</description>
            </function>
            <function name="getItem" returns="YAHOO.widget.MenuItem">
              <description>Returns the item at the specified index.</description>
              <params>
                <param name="p_nItemIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getItemGroups" returns="Array">
              <description>Multi-dimensional Array representing the menu items as they
are grouped in the menu.</description>
            </function>
            <function name="getItems" returns="Array">
              <description>Returns an array of all of the items in the menu.</description>
            </function>
            <function name="getRoot" returns="void">
              <description>Finds the menu's root menu.</description>
            </function>
            <function name="getSubmenus" returns="Array">
              <description>Returns an array of all of the submenus that are immediate
children of the menu.</description>
            </function>
            <function name="hasFocus" returns="Boolean">
              <description>Returns a boolean indicating whether or not the menu has focus.</description>
            </function>
            <function name="init" returns="void">
              <description>The Menu class's initialization method. This method is
automatically called by the constructor, and sets up all DOM references
for pre-existing markup, and creates required markup if it is not
already present.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be
changed using the menu's Config object ("cfg").</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for the menu.</description>
            </function>
            <function name="insertItem" returns="YAHOO.widget.MenuItem">
              <description>Inserts an item into the menu at the specified index.</description>
              <params>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nItemIndex" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="positionOffScreen" returns="void">
              <description>Positions the menu outside of the boundaries of the browser's
viewport.  Called automatically when a menu is hidden to ensure that
it doesn't force the browser to render uncessary scrollbars.</description>
            </function>
            <function name="removeItem" returns="YAHOO.widget.MenuItem">
              <description>Removes the specified item from the menu.</description>
              <params>
                <param name="p_oObject" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setInitialFocus" returns="void">
              <description>Sets focus to the menu's first enabled item.</description>
            </function>
            <function name="setInitialSelection" returns="void">
              <description>Sets the "selected" configuration property of the menu's first
enabled item to "true."</description>
            </function>
            <function name="setItemGroupTitle" returns="void">
              <description>Sets the title of a group of menu items.</description>
              <params>
                <param name="p_sGroupTitle" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_nGroupIndex" type="Number" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="subscribe" returns="void">
              <description>Adds the specified CustomEvent subscriber to the menu and each of
its submenus.</description>
              <params>
                <param name="p_type" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_fn" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_override" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the menu.</description>
            </function>
            <function name="Menu" returns="YAHOO.widget.Menu">
              <description>Class YAHOO.widget.Menu constructor
The Menu class creates a container that holds a vertical list representing
a set of options or commands.  Menu is the base class for all
menu containers.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.MenuBar" extends="YAHOO.widget.Menu" private="True">
          <description>Horizontal collection of items, each of which can contain a submenu.</description>
          <attributes>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the menu
bar's &lt;div&gt; element.</description>
            </attribute>
            <attribute name="SUBMENU_TOGGLE_REGION_WIDTH" type="Number" readonly="False">
              <description>Width (in pixels) of the area of a MenuBarItem that, when pressed, will toggle the
display of the MenuBarItem's submenu.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_onClick" returns="void">
              <description>Protected property
"click" event handler for the menu bar.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
                <param name="p_oMenuBar" type="YAHOO.widget.MenuBar" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
              </params>
            </function>
            <function name="_onKeyDown" returns="void">
              <description>Private property
"keydown" Custom Event handler for the menu bar.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>Array of arguments sent when the event was fired.</description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>Array of arguments sent when the event was fired.</description>
                </param>
                <param name="p_oMenuBar" type="YAHOO.widget.MenuBar" optional="False">
                  <description>Array of arguments sent when the event was fired.</description>
                </param>
              </params>
            </function>
            <function name="checkPosition" returns="Boolean">
              <description>Private property
Checks to make sure that the value of the "position" property
is one of the supported strings. Returns true if the position is supported.</description>
              <params>
                <param name="p_sPosition" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configSubmenuToggle" returns="void">
              <description>Event handler for when the "submenutoggleregion" configuration property of
a MenuBar changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>The MenuBar class's initialization method. This method is
automatically called by the constructor, and sets up all DOM references for
pre-existing markup, and creates required markup if it is not already present.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>Optional. Object literal specifying the
configuration for the menu bar. See configuration class documentation for
more details.</description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>Optional. Object literal specifying the
configuration for the menu bar. See configuration class documentation for
more details.</description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>Optional. Object literal specifying the
configuration for the menu bar. See configuration class documentation for
more details.</description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>Optional. Object literal specifying the
configuration for the menu bar. See configuration class documentation for
more details.</description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>Optional. Object literal specifying the
configuration for the menu bar. See configuration class documentation for
more details.</description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be
changed using the menu bar's Config object ("cfg").</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the menu bar.</description>
            </function>
            <function name="MenuBar" returns="YAHOO.widget.MenuBar">
              <description>Class YAHOO.widget.MenuBar constructor
Horizontal collection of items, each of which can contain a submenu.</description>
              <params>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLDivElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oElement" type="HTMLSelectElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.MenuBarItem" extends="YAHOO.widget.MenuItem" private="True">
          <description>Creates an item for a menu bar.</description>
          <attributes>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the
&lt;li&gt; element of the menu bar item.</description>
            </attribute>
            <attribute name="CSS_LABEL_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the
menu bar item's &lt;a&gt; element.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="init" returns="void">
              <description>The MenuBarItem class's initialization method. This method is
automatically called by the constructor, and sets up all DOM references for
pre-existing markup, and creates required markup if it is not already present.</description>
              <params>
                <param name="p_oObject" type="String" optional="False">
                  <description>String specifying the text of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLLIElement" optional="False">
                  <description>String specifying the text of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptGroupElement" optional="False">
                  <description>String specifying the text of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptionElement" optional="False">
                  <description>String specifying the text of the menu bar item.</description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>String specifying the text of the menu bar item.</description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the menu bar item.</description>
            </function>
            <function name="MenuBarItem" returns="YAHOO.widget.MenuBarItem">
              <description>Class YAHOO.widget.MenuBarItem constructor
Creates an item for a menu bar.</description>
              <params>
                <param name="p_oObject" type="String" optional="False">
                  <description>Object
specifying the &lt;optgroup&gt; element of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLLIElement" optional="False">
                  <description>Object
specifying the &lt;optgroup&gt; element of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptGroupElement" optional="False">
                  <description>Object
specifying the &lt;optgroup&gt; element of the menu bar item.</description>
                </param>
                <param name="p_oObject" type="HTMLOptionElement" optional="False">
                  <description>Object
specifying the &lt;optgroup&gt; element of the menu bar item.</description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>Object
specifying the &lt;optgroup&gt; element of the menu bar item.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.MenuItem" extends="Object" private="True">
          <description>Creates an item for a menu.</description>
          <attributes>
            <attribute name="_oAnchor" type="HTMLAnchorElement" readonly="False">
              <description>Private property
Object reference to the menu item's
&lt;a&gt; element.</description>
            </attribute>
            <attribute name="_oHelpTextEM" type="HTMLElement" readonly="False">
              <description>Private property
Object reference to the menu item's help text
&lt;em&gt; element.</description>
            </attribute>
            <attribute name="_oOnclickAttributeValue" type="Object" readonly="False">
              <description>Private property
Object reference to the menu item's current value for the
"onclick" configuration attribute.</description>
            </attribute>
            <attribute name="_oSubmenu" type="YAHOO.widget.Menu" readonly="False">
              <description>Private property
Object reference to the menu item's submenu.</description>
            </attribute>
            <attribute name="_sClassName" type="String" readonly="False">
              <description>Private property
The current value of the "classname" configuration attribute.</description>
            </attribute>
            <attribute name="browser" type="String" readonly="False">
              <description>String representing the browser.</description>
            </attribute>
            <attribute name="constructor" type="YAHOO.widget.MenuItem" readonly="False">
              <description>Object reference to the menu item's constructor function.</description>
            </attribute>
            <attribute name="CSS_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the
&lt;li&gt; element of the menu item.</description>
            </attribute>
            <attribute name="CSS_LABEL_CLASS_NAME" type="String" readonly="False">
              <description>String representing the CSS class(es) to be applied to the
menu item's &lt;a&gt; element.</description>
            </attribute>
            <attribute name="element" type="HTMLLIElement" readonly="False">
              <description>Object reference to the menu item's
&lt;li&gt; element.</description>
            </attribute>
            <attribute name="groupIndex" type="Number" readonly="False">
              <description>Number indicating the index of the group to which the menu
item belongs.</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>Id of the menu item's root &lt;li&gt;
element.  This property should be set via the constructor using the
configuration object literal.  If an id is not specified, then one will
be created using the "generateId" method of the Dom utility.</description>
            </attribute>
            <attribute name="index" type="Number" readonly="False">
              <description>Number indicating the ordinal position of the menu item in
its group.</description>
            </attribute>
            <attribute name="parent" type="YAHOO.widget.Menu" readonly="False">
              <description>Object reference to the menu item's parent menu.</description>
            </attribute>
            <attribute name="srcElement" type="HTMLLIElement|&#xA;HTMLOptGroupElement|HTMLOptionElement" readonly="False">
              <description>Object reference to the HTML element (either
&lt;li&gt;, &lt;optgroup&gt; or
&lt;option&gt;) used create the menu item.</description>
            </attribute>
            <attribute name="SUBMENU_TYPE" type="YAHOO.widget.Menu" readonly="False">
              <description>Object representing the type of menu to instantiate and
add when parsing the child nodes of the menu item's source HTML element.</description>
            </attribute>
            <attribute name="value" type="Object" readonly="False">
              <description>Object reference to the menu item's value.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_createKeyListener" returns="void">
              <description>Private property
"show" event handler for a Menu instance - responsible for
setting up the KeyListener instance for a MenuItem.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
                <param name="args" type="Array" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
                <param name="keyData" type="Array" optional="False">
                  <description>String representing the name of the event that
was fired.</description>
                </param>
              </params>
            </function>
            <function name="_createRootNodeStructure" returns="void">
              <description>Private property
Creates the core DOM structure for the menu item.</description>
            </function>
            <function name="_dispatchClickEvent" returns="void">
              <description>Private property
Dispatches a DOM "click" event to the anchor element of a
MenuItem instance.</description>
            </function>
            <function name="_initSubTree" returns="void">
              <description>Private property
Iterates the source element's childNodes collection and uses
the child nodes to instantiate other menus.</description>
            </function>
            <function name="_onSubmenuBeforeHide" returns="void">
              <description>Private property
"beforehide" Custom Event handler for a submenu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addClassNameForState" returns="void">
              <description>Private property
Applies a class name to a MenuItem instance's &lt;LI&gt; and &lt;A&gt; elements
that represents a MenuItem's state - "disabled," "checked," etc.</description>
              <params>
                <param name="state" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blur" returns="void">
              <description>Causes the menu item to lose focus and fires the
blur event.</description>
            </function>
            <function name="configChecked" returns="void">
              <description>Event handler for when the "checked" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configClassName" returns="void">
              <description>Event handler for when the "classname" configuration
property of a menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configDisabled" returns="void">
              <description>Event handler for when the "disabled" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configEmphasis" returns="void">
              <description>Event handler for when the "emphasis" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configHelpText" returns="void">
              <description>Event handler for when the "helptext" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configKeyListener" returns="void">
              <description>Event handler for when the "keylistener" configuration
property of a menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configOnClick" returns="void">
              <description>Event handler for when the "onclick" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configSelected" returns="void">
              <description>Event handler for when the "selected" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configStrongEmphasis" returns="void">
              <description>Event handler for when the "strongemphasis" configuration
property of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configSubmenu" returns="void">
              <description>Event handler for when the "submenu" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configTarget" returns="void">
              <description>Event handler for when the "target" configuration property
of the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configText" returns="void">
              <description>Event handler for when the "text" configuration property of
the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configURL" returns="void">
              <description>Event handler for when the "url" configuration property of
the menu item changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oItem" type="YAHOO.widget.MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the menu item's &lt;li&gt; element
from its parent &lt;ul&gt; element.</description>
            </function>
            <function name="focus" returns="void">
              <description>Causes the menu item to receive the focus and fires the
focus event.</description>
            </function>
            <function name="getClassNameForState" returns="void">
              <description>Private property
Returns a class name for the specified prefix and state.  If the class name does not
yet exist, it is created and stored in the CLASS_NAMES object to increase performance.</description>
              <params>
                <param name="prefix" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="state" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNextEnabledSibling" returns="void">
              <description>Finds the menu item's next enabled sibling.</description>
            </function>
            <function name="getPreviousEnabledSibling" returns="YAHOO.widget.MenuItem">
              <description>Finds the menu item's previous enabled sibling.</description>
            </function>
            <function name="hasFocus" returns="Boolean">
              <description>Returns a boolean indicating whether or not the menu item
has focus.</description>
            </function>
            <function name="init" returns="void">
              <description>The MenuItem class's initialization method. This method is
automatically called by the constructor, and sets up all DOM references
for pre-existing markup, and creates required markup if it is not
already present.</description>
              <params>
                <param name="p_oObject" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLLIElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLOptGroupElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLOptionElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes an item's configurable properties.</description>
            </function>
            <function name="removeClassNameForState" returns="void">
              <description>Private property
Removes a class name from a MenuItem instance's &lt;LI&gt; and &lt;A&gt; elements
that represents a MenuItem's state - "disabled," "checked," etc.</description>
              <params>
                <param name="state" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the menu item.</description>
            </function>
            <function name="MenuItem" returns="YAHOO.widget.MenuItem">
              <description>Class YAHOO.widget.MenuItem constructor
Creates an item for a menu.</description>
              <params>
                <param name="p_oObject" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLLIElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLOptGroupElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oObject" type="HTMLOptionElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oConfig" type="Object" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.MenuManager" extends="Object" private="True">
          <description>Singleton that manages a collection of all menus and menu items.  Listens
for DOM events at the document level and dispatches the events to the
corresponding menu or menu item.</description>
          <functions>
            <function name="addMenu" returns="void">
              <description>Adds a menu to the collection of known menus.</description>
              <params>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>Object specifying the Menu
instance to be added.</description>
                </param>
              </params>
            </function>
            <function name="getFocusedMenu" returns="YAHOO.widget.Menu">
              <description>Returns a reference to the menu that currently
has focus.</description>
            </function>
            <function name="getFocusedMenuItem" returns="YAHOO.widget.MenuItem">
              <description>Returns a reference to the menu item that currently
has focus.</description>
            </function>
            <function name="getMenu" returns="YAHOO.widget.Menu">
              <description>Returns a menu with the specified id.</description>
              <params>
                <param name="p_sId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMenuItem" returns="YAHOO.widget.MenuItem">
              <description>Returns a menu item with the specified id.</description>
              <params>
                <param name="p_sId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMenuItemGroup" returns="Array">
              <description>Returns an array of menu item instances whose
corresponding &lt;li&gt; elements are child
nodes of the &lt;ul&gt; element with the
specified id.</description>
              <params>
                <param name="p_sId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMenuRootElement" returns="void">
              <description>Private property
Finds the root DIV node of a menu or the root LI node of
a menu item.</description>
              <params>
                <param name="p_oElement" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getMenus" returns="Object">
              <description>Returns a collection of all menus registered with the
menu manger.</description>
            </function>
            <function name="getVisible" returns="Object">
              <description>Returns a collection of all visible menus registered
with the menu manger.</description>
            </function>
            <function name="hideVisible" returns="void">
              <description>Hides all visible, dynamically positioned menus
(excluding instances of YAHOO.widget.MenuBar).</description>
            </function>
            <function name="onDOMEvent" returns="void">
              <description>Private property
Generic, global event handler for all of a menu's
DOM-based events.  This listens for events against the document
object.  If the target of a given event is a member of a menu or
menu item's DOM, the instance's corresponding Custom Event is fired.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onItemAdded" returns="void">
              <description>Private property
"itemadded" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onItemDestroy" returns="void">
              <description>Private property
"destroy" event handler for a MenuItem instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuBlur" returns="void">
              <description>Private property
"blur" event handler for a MenuItem instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuDestroy" returns="void">
              <description>Private property
"destroy" event handler for a menu.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuFocus" returns="void">
              <description>Private property
"focus" event handler for a MenuItem instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuHide" returns="void">
              <description>Private property
"hide" event handler for a Menu instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuShow" returns="void">
              <description>Private property
"show" event handler for a MenuItem instance.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onMenuVisibleConfigChange" returns="void">
              <description>Private property
Event handler for when the "visible" configuration
property of a Menu instance changes.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeItem" returns="void">
              <description>Private property
Removes a MenuItem instance from the MenuManager's collection of MenuItems.</description>
              <params>
                <param name="p_oMenuItem" type="MenuItem" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeMenu" returns="void">
              <description>Removes a menu from the collection of known menus.</description>
              <params>
                <param name="p_oMenu" type="YAHOO.widget.Menu" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the menu manager.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.MenuNode" extends="YAHOO.widget.TextNode" private="True">
          <description>A menu-specific implementation that differs from TextNode in that only
one sibling can be expanded at a time.</description>
          <attributes>
            <attribute name="_type" type="object" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
          </attributes>
          <functions>
            <function name="MenuNode" returns="YAHOO.widget.MenuNode">
              <description>Class YAHOO.widget.MenuNode constructor
A menu-specific implementation that differs from TextNode in that only
one sibling can be expanded at a time.</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
                </param>
                <param name="oParent" type="YAHOO.widget.Node" optional="False">
                  <description>a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Module" extends="Object" private="True">
          <description>Module is a JavaScript representation of the Standard Module Format.
Standard Module Format is a simple standard for markup containers where
child nodes representing the header, body, and footer of the content are
denoted using the CSS classes "hd", "bd", and "ft" respectively.
Module is the base class for all other classes in the YUI
Container package.</description>
          <attributes>
            <attribute name="body" type="HTMLElement" readonly="False">
              <description>The body element, denoted with CSS class "bd"</description>
            </attribute>
            <attribute name="browser" type="String" readonly="False">
              <description>String representing the user-agent of the browser</description>
            </attribute>
            <attribute name="cfg" type="YAHOO.util.Config" readonly="False">
              <description>The Module's Config object used for monitoring
configuration properties.</description>
            </attribute>
            <attribute name="contructor" type="Function" readonly="False">
              <description>The class's constructor function</description>
            </attribute>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the Module's configuration properties</description>
            </attribute>
            <attribute name="element" type="HTMLElement" readonly="False">
              <description>The main module element that contains the header, body, and footer</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the Module's events</description>
            </attribute>
            <attribute name="footer" type="HTMLElement" readonly="False">
              <description>The footer element, denoted with CSS class "ft"</description>
            </attribute>
            <attribute name="header" type="HTMLElement" readonly="False">
              <description>The header element, denoted with CSS class "hd"</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The id of the element</description>
            </attribute>
            <attribute name="imageRoot" type="String" readonly="False">
              <description>A string representing the root path for all images created by
a Module instance.</description>
            </attribute>
            <attribute name="isSecure" type="Boolean" readonly="False">
              <description>Boolean representing whether or not the current browsing context is
secure (https)</description>
            </attribute>
            <attribute name="platform" type="String" readonly="False">
              <description>String representing the current user-agent platform</description>
            </attribute>
            <attribute name="CSS_BODY" type="String" readonly="False">
              <description>Constant representing the module body</description>
            </attribute>
            <attribute name="CSS_FOOTER" type="String" readonly="False">
              <description>Constant representing the module footer</description>
            </attribute>
            <attribute name="CSS_HEADER" type="String" readonly="False">
              <description>Constant representing the module header</description>
            </attribute>
            <attribute name="CSS_MODULE" type="String" readonly="False">
              <description>Constant for the default CSS class name that represents a Module</description>
            </attribute>
            <attribute name="IMG_ROOT" type="String" readonly="False">
              <description>Constant representing the prefix path to use for non-secure images</description>
            </attribute>
            <attribute name="IMG_ROOT_SSL" type="String" readonly="False">
              <description>Constant representing the prefix path to use for securely served images</description>
            </attribute>
            <attribute name="RESIZE_MONITOR_BUFFER" type="Number" readonly="False">
              <description>Constant representing the buffer amount (in pixels) to use when positioning
the text resize monitor offscreen. The resize monitor is positioned
offscreen by an amount eqaul to its offsetHeight + the buffer value.</description>
            </attribute>
            <attribute name="RESIZE_MONITOR_SECURE_URL" type="String" readonly="False">
              <description>Constant representing the url for the "src" attribute of the iframe
used to monitor changes to the browser's base font size</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addToParent" returns="void">
              <description>Protected property
This method is a protected helper, used when constructing the DOM structure for the module
to account for situations which may cause Operation Aborted errors in IE. It should not
be used for general DOM construction.

If the parentNode is not document.body, the element is appended as the last element.


If the parentNode is document.body the element is added as the first child to help
prevent Operation Aborted errors in IE.</description>
              <params>
                <param name="The" type="parentNode" optional="False">
                  <description>HTML element to which the element will be added</description>
                </param>
                <param name="The" type="element" optional="False">
                  <description>HTML element to which the element will be added</description>
                </param>
              </params>
            </function>
            <function name="_initResizeMonitor" returns="void">
              <description>Protected property
Create and initialize the text resize monitoring iframe.</description>
            </function>
            <function name="_supportsCWResize" returns="void">
              <description>Private property
Text resize monitor helper method.
Determines if the browser supports resize events on iframe content windows.</description>
            </function>
            <function name="appendToBody" returns="void">
              <description>Appends the passed element to the body. If no body is present, one
will be automatically created.</description>
              <params>
                <param name="element" type="HTMLElement | DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendToFooter" returns="void">
              <description>Appends the passed element to the footer. If no footer is present,
one will be automatically created.</description>
              <params>
                <param name="element" type="HTMLElement | DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendToHeader" returns="void">
              <description>Appends the passed element to the header. If no header is present,
one will be automatically created.</description>
              <params>
                <param name="element" type="HTMLElement | DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configMonitorResize" returns="void">
              <description>Default event handler for the "monitorresize" configuration property</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configVisible" returns="void">
              <description>Default event handler for changing the visibility property of a
Module. By default, this is achieved by switching the "display" style
between "block" and "none".
This method is responsible for firing showEvent and hideEvent.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the Module element from the DOM and sets all child elements
to null.</description>
            </function>
            <function name="hide" returns="void">
              <description>Hides the Module element by setting the visible configuration
property to false. Also fires two events: beforeHideEvent prior to
the visibility change, and hideEvent after.</description>
            </function>
            <function name="init" returns="void">
              <description>The Module class's initialization method, which is executed for
Module and all of its subclasses. This method is automatically
called by the constructor, and  sets up all DOM references for
pre-existing markup, and creates required markup if it is not
already present.

If the element passed in does not have an id, one will be generated
for it.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the custom events for Module which are fired
automatically at appropriate times by the Module class.</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for Module which are fired
automatically at appropriate times by the Module class.</description>
            </function>
            <function name="initResizeMonitor" returns="void">
              <description>Initialize an empty IFRAME that is placed out of the visible area
that can be used to detect text resize.</description>
            </function>
            <function name="onDomResize" returns="void">
              <description>Event handler fired when the resize monitor element is resized.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="Boolean">
              <description>Renders the Module by inserting the elements that are not already
in the main Module into their correct places. Optionally appends
the Module to the specified node prior to the render's execution.

For Modules without existing markup, the appendToNode argument
is REQUIRED. If this argument is ommitted and the current element is
not present in the document, the function will return false,
indicating that the render was a failure.


NOTE: As of 2.3.1, if the appendToNode is the document's body element
then the module is rendered as the first child of the body element,
and not appended to it, to avoid Operation Aborted errors in IE when
rendering the module before window's load event is fired. You can
use the appendtodocumentbody configuration property to change this
to append to document.body if required.</description>
              <params>
                <param name="appendToNode" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="appendToNode" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="moduleElement" type="HTMLElement" optional="True">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setBody" returns="void">
              <description>Sets the Module's body content to the HTML specified.
If no body is present, one will be automatically created.
An empty string can be passed to the method to clear the contents of the body.</description>
              <params>
                <param name="bodyContent" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bodyContent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bodyContent" type="DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFooter" returns="void">
              <description>Sets the Module's footer content to the HTML specified, or appends
the passed element to the footer. If no footer is present, one will
be automatically created. An empty string can be passed to the method
to clear the contents of the footer.</description>
              <params>
                <param name="footerContent" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="footerContent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="footerContent" type="DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setHeader" returns="void">
              <description>Sets the Module's header content to the string specified, or appends
the passed element to the header. If no header is present, one will
be automatically created. An empty string can be passed to the method
to clear the contents of the header.</description>
              <params>
                <param name="headerContent" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="headerContent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="headerContent" type="DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>Shows the Module element by setting the visible configuration
property to true. Also fires two events: beforeShowEvent prior to
the visibility change, and showEvent after.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a String representation of the Object.</description>
            </function>
            <function name="forceDocumentRedraw" returns="void">
              <description>Helper utility method, which forces a document level
redraw for Opera, which can help remove repaint
irregularities after applying DOM changes.</description>
            </function>
            <function name="Module" returns="YAHOO.widget.Module">
              <description>Class YAHOO.widget.Module constructor
Module is a JavaScript representation of the Standard Module Format.
Standard Module Format is a simple standard for markup containers where
child nodes representing the header, body, and footer of the content are
denoted using the CSS classes "hd", "bd", and "ft" respectively.
Module is the base class for all other classes in the YUI
Container package.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Node" extends="Object" private="True">
          <description>The base class for all tree nodes.  The node's presentation and behavior in
response to mouse events is handled in Node subclasses.</description>
          <attributes>
            <attribute name="_dynLoad" type="boolean" readonly="False">
              <description>Private property
We can set the node up to call an external method to get the child
data dynamically.</description>
            </attribute>
            <attribute name="_focusedItem" type="DOM element" readonly="False">
              <description>Private property
DOM element that actually got the browser focus</description>
            </attribute>
            <attribute name="_focusHighlightedItems" type="Array of DOM elements" readonly="False">
              <description>Private property
array of items that had the focus set on them
so that they can be cleaned when focus is lost</description>
            </attribute>
            <attribute name="_type" type="string" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
            <attribute name="children" type="Node[]" readonly="False">
              <description>This node's child node collection.</description>
            </attribute>
            <attribute name="childrenRendered" type="boolean" readonly="False">
              <description>This flag is set to true when the html is generated for this node's
children, and set to false when new children are added.</description>
            </attribute>
            <attribute name="className" type="string" readonly="False">
              <description>User-defined className to be added to the Node</description>
            </attribute>
            <attribute name="contentElId" type="string" readonly="False">
              <description>The generated id that will contain the data passed in by the implementer.</description>
            </attribute>
            <attribute name="contentStyle" type="string" readonly="False">
              <description>The CSS class for the html content container.  Defaults to ygtvhtml, but
can be overridden to provide a custom presentation for a specific node.</description>
            </attribute>
            <attribute name="data" type="object" readonly="False">
              <description>The data linked to this node.  This can be any object or primitive
value, and the data can be used in getNodeHtml().</description>
            </attribute>
            <attribute name="dataLoader" type="function" readonly="False">
              <description>Function to execute when we need to get this node's child data.</description>
            </attribute>
            <attribute name="depth" type="int" readonly="False">
              <description>The depth of this node.  We start at -1 for the root node.</description>
            </attribute>
            <attribute name="dynamicLoadComplete" type="boolean" readonly="False">
              <description>Dynamically loaded nodes only fetch the data the first time they are
expanded.  This flag is set to true once the data has been fetched.</description>
            </attribute>
            <attribute name="editable" type="boolean" readonly="False">
              <description>Signals if the label is editable.  (Ignored on TextNodes with href set.)</description>
            </attribute>
            <attribute name="enableHighlight" type="boolean" readonly="False">
              <description>Enables node highlighting.  If true, the node can be highlighted and/or propagate highlighting</description>
            </attribute>
            <attribute name="expanded" type="boolean" readonly="False">
              <description>The node's expanded/collapsed state</description>
            </attribute>
            <attribute name="hasIcon" type="boolean" readonly="False">
              <description>The toggle/branch icon will not show if this is set to false.  This
could be useful if the implementer wants to have the child contain
extra info about the parent, rather than an actual node.</description>
            </attribute>
            <attribute name="highlightState" type="integer" readonly="False">
              <description>Stores the highlight state.  Can be any of:

0 - not highlighted
1 - highlighted
2 - some children highlighted</description>
            </attribute>
            <attribute name="iconMode" type="int" readonly="False">
              <description>Used to configure what happens when a dynamic load node is expanded
and we discover that it does not have children.  By default, it is
treated as if it still could have children (plus/minus icon).  Set
iconMode to have it display like a leaf node instead.</description>
            </attribute>
            <attribute name="index" type="int" readonly="False">
              <description>The index for this instance obtained from global counter in YAHOO.widget.TreeView.</description>
            </attribute>
            <attribute name="isLeaf" type="boolean" readonly="False">
              <description>If true, the node will alway be rendered as a leaf node.  This can be
used to override the presentation when dynamically loading the entire
tree.  Setting this to true also disables the dynamic load call for the
node.</description>
            </attribute>
            <attribute name="isLoading" type="boolean" readonly="False">
              <description>This is true for dynamically loading nodes while waiting for the
callback to return.</description>
            </attribute>
            <attribute name="multiExpand" type="boolean" readonly="False">
              <description>Can multiple children be expanded at once?</description>
            </attribute>
            <attribute name="nextSibling" type="Node" readonly="False">
              <description>This node's next sibling</description>
            </attribute>
            <attribute name="nowrap" type="boolean" readonly="False">
              <description>Specifies whether or not the content area of the node should be allowed
to wrap.</description>
            </attribute>
            <attribute name="parent" type="Node" readonly="False">
              <description>Parent node</description>
            </attribute>
            <attribute name="previousSibling" type="Node" readonly="False">
              <description>This node's previous sibling</description>
            </attribute>
            <attribute name="propagateHighlightDown" type="boolean" readonly="False">
              <description>Tells whether highlighting will be propagated down to the children of the clicked node</description>
            </attribute>
            <attribute name="propagateHighlightUp" type="boolean" readonly="False">
              <description>Tells whether highlighting will be propagated up to the parents of the clicked node</description>
            </attribute>
            <attribute name="renderHidden" type="boolean" readonly="False">
              <description>Should we render children for a collapsed node?  It is possible that the
implementer will want to render the hidden data...  @todo verify that we
need this, and implement it if we do.</description>
            </attribute>
            <attribute name="tree" type="TreeView" readonly="False">
              <description>Tree instance this node is part of</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_canHaveFocus" returns="boolean">
              <description>Private property
Returns true if there are any elements in the node that can
accept the real actual browser focus</description>
            </function>
            <function name="_childrenHighlighted" returns="void">
              <description>Private property
Checks whether all or part of the children of a node are highlighted and
sets the node highlight to full, none or partial highlight.
If set to propagate it will further call the parent</description>
            </function>
            <function name="_removeFocus" returns="void">
              <description>Private property
Removes the focus of previously selected Node</description>
            </function>
            <function name="_setHighlightClassName" returns="void">
              <description>Private property
Changes the classNames on the toggle and content containers to reflect the current highlighting</description>
            </function>
            <function name="appendChild" returns="Node">
              <description>Private property
Appends a node to the child collection.</description>
              <params>
                <param name="childNode" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="appendTo" returns="Node">
              <description>Appends this node to the supplied node's child collection</description>
              <params>
                <param name="parentNode" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="applyParent" returns="boolean">
              <description>Certain properties for the node cannot be set until the parent
is known. This is called after the node is inserted into a tree.
the parent is also applied to this node's children in order to
make it possible to move a branch from one tree to another.</description>
              <params>
                <param name="parentNode" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapse" returns="void">
              <description>Hides this nodes children (creating them if necessary), changes the toggle style.</description>
            </function>
            <function name="collapseAll" returns="void">
              <description>Recursively collapses all of this node's children.</description>
            </function>
            <function name="completeRender" returns="string">
              <description>Called when we know we have all the child data.</description>
            </function>
            <function name="destroyEditorContents" returns="void">
              <description>Node-specific destroy function to empty the contents of the inline editor panel
This function is the worst case alternative that will purge all possible events and remove the editor contents
Method Event.purgeElement is somewhat costly so if it can be replaced by specifc Event.removeListeners, it is better to do so.</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="editNode" returns="void">
              <description>pops up the contents editor, if there is one and the node is declared editable</description>
            </function>
            <function name="expand" returns="void">
              <description>Shows this nodes children (creating them if necessary), changes the
toggle style, and collapses its siblings if multiExpand is not set.</description>
            </function>
            <function name="expandAll" returns="void">
              <description>Recursively expands all of this node's children.</description>
            </function>
            <function name="fillEditorContainer" returns="void">
              <description>Placeholder for a function that should provide the inline node label editor.
Leaving it set to null will indicate that this node type is not editable.
It should be overridden by nodes that provide inline editing.
The Node-specific editing element (input box, textarea or whatever) should be inserted into editorData.inputContainer.</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="boolean">
              <description>Sets the focus on the node element.
It will only be able to set the focus on nodes that have anchor elements in it.
Toggle or branch icons have anchors and can be focused on.
If will fail in nodes that have no anchor</description>
            </function>
            <function name="getAncestor" returns="Node">
              <description>Returns this node's ancestor at the specified depth.</description>
              <params>
                <param name="depth" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getChildrenEl" returns="HTMLElement">
              <description>Returns the div that was generated for this node's children</description>
            </function>
            <function name="getChildrenElId" returns="string">
              <description>Returns the id for this node's children div</description>
            </function>
            <function name="getChildrenHtml" returns="string">
              <description>Private property
Called when first rendering the tree.  We always build the div that will
contain this nodes children, but we don't render the children themselves
unless this node is expanded.</description>
            </function>
            <function name="getContentEl" returns="HTMLElement">
              <description>Returns the outer html element for this node's content</description>
            </function>
            <function name="getContentHtml" returns="string">
              <description>Get the markup for the contents of the node.  This is designed to be overrided so that we can
support different types of nodes.</description>
            </function>
            <function name="getDepthStyle" returns="string">
              <description>Returns the css class for the spacer at the specified depth for
this node.  If this node's ancestor at the specified depth
has a next sibling the presentation is different than if it
does not have a next sibling</description>
              <params>
                <param name="depth" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Returns this node's container html element</description>
            </function>
            <function name="getElId" returns="string">
              <description>Returns the id for this node's container div</description>
            </function>
            <function name="getHoverStyle" returns="string">
              <description>Returns the hover style for the icon</description>
            </function>
            <function name="getHtml" returns="string">
              <description>Returns the markup for this node and its children.</description>
            </function>
            <function name="getIconMode" returns="int">
              <description>Returns the current icon mode.  This refers to the way childless dynamic
load nodes appear (this comes into play only after the initial dynamic
load request produced no children).</description>
            </function>
            <function name="getNodeCount" returns="int">
              <description>Count of nodes in a branch</description>
            </function>
            <function name="getNodeDefinition" returns="Object | false">
              <description>Returns an object which could be used to build a tree out of this node and its children.
It can be passed to the tree constructor to reproduce this node as a tree.
It will return false if the node or any children loads dynamically, regardless of whether it is loaded or not.</description>
            </function>
            <function name="getNodeHtml" returns="string">
              <description>Get the markup for the node.  This may be overrided so that we can
support different types of nodes.</description>
            </function>
            <function name="getSiblings" returns="void">
              <description>Returns a node array of this node's siblings, null if none.</description>
            </function>
            <function name="getStyle" returns="string">
              <description>Returns the css style name for the toggle</description>
            </function>
            <function name="getToggleEl" returns="HTMLElement">
              <description>Returns the element that is being used for this node's toggle.</description>
            </function>
            <function name="getToggleElId" returns="string">
              <description>Returns the id for this node's toggle element</description>
            </function>
            <function name="getToggleLink" returns="string">
              <description>Generates the link that will invoke this node's toggle method</description>
            </function>
            <function name="hasChildren" returns="boolean">
              <description>Checks if this node has children.  If this node is lazy-loading and the
children have not been rendered, we do not know whether or not there
are actual children.  In most cases, we need to assume that there are
children (for instance, the toggle needs to show the expandable
presentation state).  In other times we want to know if there are rendered
children.  For the latter, "checkForLazyLoad" should be false.</description>
              <params>
                <param name="checkForLazyLoad" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideChildren" returns="void">
              <description>Hides this node's children</description>
            </function>
            <function name="highlight" returns="void">
              <description>Turns highlighting on node.</description>
              <params>
                <param name="_silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>Initializes this node, gets some of the properties from the parent</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParent" type="Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertAfter" returns="Node">
              <description>Inserts this node after the supplied node</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertBefore" returns="Node">
              <description>Inserts this node before this supplied node</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isChildOf" returns="boolean">
              <description>Private property
Returns true if the Node is a child of supplied Node</description>
              <params>
                <param name="parentNode" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isDynamic" returns="boolean">
              <description>Evaluates if this node's children should be loaded dynamically.  Looks for
the property both in this instance and the root node.  If the tree is
defined to load all children dynamically, the data callback function is
defined in the root node</description>
            </function>
            <function name="isRoot" returns="boolean">
              <description>Evaluates if this node is the root node of the tree</description>
            </function>
            <function name="loadComplete" returns="void">
              <description>Load complete is the callback function we pass to the data provider
in dynamic load situations.</description>
            </function>
            <function name="refresh" returns="void">
              <description>Regenerates the html for this node and its children.  To be used when the
node is expanded and new children have been added.</description>
            </function>
            <function name="renderChildren" returns="string">
              <description>Private property
Generates the markup for the child nodes.  This is not done until the node
is expanded.</description>
            </function>
            <function name="saveEditorValue" returns="void">
              <description>Saves the value entered into the editor.
Should be overridden by each node type</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDynamicLoad" returns="void">
              <description>Configures this node for dynamically obtaining the child data
when the node is first expanded.  Calling it without the callback
will turn off dynamic load for the node.</description>
              <params>
                <param name="fmDataLoader" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iconMode" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setNodesProperty" returns="void">
              <description>Sets the value of property for this node and all loaded descendants.
Only public and defined properties can be set, not methods.
Values for unknown properties will be assigned to the refNode.data object</description>
              <params>
                <param name="name" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="refresh" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showChildren" returns="void">
              <description>Shows this node's children</description>
            </function>
            <function name="toggle" returns="void">
              <description>Expands if node is collapsed, collapses otherwise.</description>
            </function>
            <function name="toggleHighlight" returns="void">
              <description>Toggles the highlighted state of a Node</description>
            </function>
            <function name="toString" returns="string">
              <description>Node toString</description>
            </function>
            <function name="unhighlight" returns="void">
              <description>Turns highlighting off a node.</description>
              <params>
                <param name="_silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Node" returns="YAHOO.widget.Node">
              <description>Class YAHOO.widget.Node constructor
The base class for all tree nodes.  The node's presentation and behavior in
response to mouse events is handled in Node subclasses.</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParent" type="Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.NumericAxis" extends="YAHOO.widget.Axis" private="True">
          <description>A type of axis whose units are measured in numeric values.</description>
          <attributes>
            <attribute name="alwaysShowZero" type="Boolean" readonly="False">
              <description>If true, and the bounds are calculated automatically, either the minimum or
maximum will be set to zero.</description>
            </attribute>
            <attribute name="majorUnit" type="Number" readonly="False">
              <description>The spacing between major intervals on this axis.</description>
            </attribute>
            <attribute name="maximum" type="Number" readonly="False">
              <description>The maximum value drawn by the axis. If not set explicitly, the axis maximum
will be calculated automatically.</description>
            </attribute>
            <attribute name="minimum" type="Number" readonly="False">
              <description>The minimum value drawn by the axis. If not set explicitly, the axis minimum
will be calculated automatically.</description>
            </attribute>
            <attribute name="minorUnit" type="Number" readonly="False">
              <description>The spacing between minor intervals on this axis.</description>
            </attribute>
            <attribute name="roundMajorUnit" type="Boolean" readonly="False">
              <description>Indicates whether to round the major unit.</description>
            </attribute>
            <attribute name="scale" type="String" readonly="False">
              <description>The scaling algorithm to use on this axis. May be "linear" or "logarithmic".</description>
            </attribute>
            <attribute name="snapToUnits" type="Boolean" readonly="False">
              <description>If true, the labels, ticks, gridlines, and other objects will snap to
the nearest major or minor unit. If false, their position will be based
on the minimum value.</description>
            </attribute>
            <attribute name="stackingEnabled" type="Boolean" readonly="False">
              <description>Series that are stackable will only stack when this value is set to true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="NumericAxis" returns="YAHOO.widget.NumericAxis">
              <description>Class YAHOO.widget.NumericAxis constructor
A type of axis whose units are measured in numeric values.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Overlay" extends="YAHOO.widget.Module" private="True">
          <description>Overlay is a Module that is absolutely positioned above the page flow. It
has convenience methods for positioning and sizing, as well as options for
controlling zIndex and constraining the Overlay's position to the current
visible viewport. Overlay also contains a dynamicly generated IFRAME which
is placed beneath it for Internet Explorer 6 and 5.x so that it will be
properly rendered above SELECT elements.</description>
          <attributes>
            <attribute name="CONTEXT_TRIGGERS" type="Array" readonly="False">
              <description>Array of default event types which will trigger
context alignment for the Overlay class.

The array is empty by default for Overlay,
but maybe populated in future releases, so classes extending
Overlay which need to define their own set of CONTEXT_TRIGGERS
should concatenate their super class's prototype.CONTEXT_TRIGGERS
value with their own array of values.


E.g.:
CustomOverlay.prototype.CONTEXT_TRIGGERS = YAHOO.widget.Overlay.prototype.CONTEXT_TRIGGERS.concat(["windowScroll"]);</description>
            </attribute>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the Overlay's configuration properties</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the Overlay's events</description>
            </attribute>
            <attribute name="_initialized" type="Boolean" readonly="False">
              <description>Private property
A boolean that indicated whether the window resize and scroll events have
already been subscribed to.</description>
            </attribute>
            <attribute name="_TRIGGER_MAP" type="Object" readonly="False">
              <description>Private property
Internal map of special event types, which are provided
by the instance. It maps the event type to the custom event
instance. Contains entries for the "windowScroll", "windowResize" and
"textResize" static container events.</description>
            </attribute>
            <attribute name="BOTTOM_LEFT" type="String" readonly="False">
              <description>Constant representing the top bottom left corner of an element, used for
configuring the context element alignment</description>
            </attribute>
            <attribute name="BOTTOM_RIGHT" type="String" readonly="False">
              <description>Constant representing the bottom right corner of an element, used for
configuring the context element alignment</description>
            </attribute>
            <attribute name="CSS_OVERLAY" type="String" readonly="False">
              <description>Constant representing the default CSS class used for an Overlay</description>
            </attribute>
            <attribute name="IFRAME_SRC" type="String" readonly="False">
              <description>The URL that will be placed in the iframe</description>
            </attribute>
            <attribute name="STD_MOD_RE" type="RegExp" readonly="False">
              <description>Constant representing the names of the standard module elements
used in the overlay.</description>
            </attribute>
            <attribute name="TOP_LEFT" type="String" readonly="False">
              <description>Constant representing the top left corner of an element, used for
configuring the context element alignment</description>
            </attribute>
            <attribute name="TOP_RIGHT" type="String" readonly="False">
              <description>Constant representing the top right corner of an element, used for
configuring the context element alignment</description>
            </attribute>
            <attribute name="VIEWPORT_OFFSET" type="Number" readonly="False">
              <description>Number representing the minimum distance an Overlay instance should be
positioned relative to the boundaries of the browser's viewport, in pixels.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_alignOnTrigger" returns="void">
              <description>Protected property
Custom Event handler for context alignment triggers. Invokes the align method</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The event type (not used by the default implementation)</description>
                </param>
                <param name="args" type="Any[]" optional="False">
                  <description>The event type (not used by the default implementation)</description>
                </param>
              </params>
            </function>
            <function name="_autoFillOnHeightChange" returns="void">
              <description>Protected property
The default custom event handler executed when the overlay's height is changed,
if the autofillheight property has been set.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
                <param name="args" type="Array" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
              </params>
            </function>
            <function name="_findTriggerCE" returns="void">
              <description>Private property
Helper method to locate the custom event instance for the event name string
passed in. As a convenience measure, any custom events passed in are returned.</description>
              <params>
                <param name="t" type="String|CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getComputedHeight" returns="Number">
              <description>Private property
Determines the content box height of the given element (height of the element, without padding or borders) in pixels.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getPreciseHeight" returns="Float">
              <description>Private property
Returns the sub-pixel height of the el, using getBoundingClientRect, if available,
otherwise returns the offsetHeight</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_primeXYFromDOM" returns="void">
              <description>Protected property
Set's the container's XY value from DOM if not already set.
Differs from syncPosition, in that the XY value is only sync'd with DOM if
not already set. The method also refire's the XY config property event, so any
beforeMove, Move event listeners are invoked.</description>
            </function>
            <function name="_processTriggers" returns="void">
              <description>Protected property
Utility method that subscribes or unsubscribes the given
function from the list of trigger events provided.</description>
              <params>
                <param name="triggers" type="Array[String|CustomEvent]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="mode" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fn" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setDomVisibility" returns="void">
              <description>Protected property
Internal implementation to set the visibility of the overlay in the DOM.</description>
              <params>
                <param name="visible" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_validateAutoFillHeight" returns="void">
              <description>Protected property
autofillheight validator. Verifies that the autofill value is either null
or one of the strings : "body", "header" or "footer".</description>
              <params>
                <param name="val" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="align" returns="void">
              <description>Aligns the Overlay to its context element using the specified corner
points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT,
and BOTTOM_RIGHT.</description>
              <params>
                <param name="elementAlign" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="contextAlign" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="bringToTop" returns="void">
              <description>Places the Overlay on top of all other instances of
YAHOO.widget.Overlay.</description>
            </function>
            <function name="center" returns="void">
              <description>Centers the container in the viewport.</description>
            </function>
            <function name="configAutoFillHeight" returns="void">
              <description>The default event handler fired when the "autofillheight" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configConstrainToViewport" returns="void">
              <description>The default event handler fired when the "constraintoviewport"
property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configContext" returns="void">
              <description>The default event handler fired when the "context" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configFixedCenter" returns="void">
              <description>The default event handler fired when the "fixedcenter" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configHeight" returns="void">
              <description>The default event handler fired when the "height" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configIframe" returns="void">
              <description>The default event handler fired when the "iframe" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configVisible" returns="void">
              <description>The default event handler fired when the "visible" property is
changed.  This method is responsible for firing showEvent
and hideEvent.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configWidth" returns="void">
              <description>The default event handler fired when the "width" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configX" returns="void">
              <description>The default event handler fired when the "x" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configXY" returns="void">
              <description>The default event handler fired when the "xy" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configY" returns="void">
              <description>The default event handler fired when the "y" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configzIndex" returns="void">
              <description>The default event handler fired when the "zIndex" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the Overlay element from the DOM and sets all child
elements to null.</description>
            </function>
            <function name="doCenterOnDOMEvent" returns="void">
              <description>Fixed center event handler used for centering on scroll/resize, but only if
the overlay is visible and, if "fixedcenter" is set to "contained", only if
the overlay fits within the viewport.</description>
            </function>
            <function name="enforceConstraints" returns="void">
              <description>The default event handler executed when the moveEvent is fired, if the
"constraintoviewport" is set to true.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fillHeight" returns="void">
              <description>Sets the height on the provided header, body or footer element to
fill out the height of the container. It determines the height of the
containers content box, based on it's configured height value, and
sets the height of the autofillheight element to fill out any
space remaining after the other standard module element heights
have been accounted for.

NOTE: This method is not designed to work if an explicit
height has not been set on the container, since for an "auto" height container,
the heights of the header/body/footer will drive the height of the container.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="fitsInViewport" returns="void">
              <description>Determines if the Overlay (including the offset value defined by Overlay.VIEWPORT_OFFSET)
will fit entirely inside the viewport, in both dimensions - width and height.</description>
            </function>
            <function name="forceContainerRedraw" returns="void">
              <description>Can be used to force the container to repaint/redraw it's contents.

By default applies and then removes a 1px bottom margin through the
application/removal of a "yui-force-redraw" class.


It is currently used by Overlay to force a repaint for webkit
browsers, when centering.</description>
            </function>
            <function name="getConstrainedX" returns="Number">
              <description>Given x coordinate value, returns the calculated x coordinate required to
position the Overlay if it is to be constrained to the viewport, based on the
current element size, viewport dimensions and scroll values.</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getConstrainedXY" returns="Array">
              <description>Given x, y coordinate values, returns the calculated coordinates required to
position the Overlay if it is to be constrained to the viewport, based on the
current element size, viewport dimensions and scroll values.</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getConstrainedY" returns="Number">
              <description>Given y coordinate value, returns the calculated y coordinate required to
position the Overlay if it is to be constrained to the viewport, based on the
current element size, viewport dimensions and scroll values.</description>
              <params>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideIframe" returns="void">
              <description>Hides the iframe shim, if it has been enabled.</description>
            </function>
            <function name="hideMacGeckoScrollbars" returns="void">
              <description>Adds a CSS class ("hide-scrollbars") and removes a CSS class
("show-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)</description>
            </function>
            <function name="init" returns="void">
              <description>The Overlay initialization method, which is executed for Overlay and
all of its subclasses. This method is automatically called by the
constructor, and  sets up all DOM references for pre-existing markup,
and creates required markup if it is not already present.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be changed
using the Overlay's Config object (cfg).</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for Overlay which are fired
automatically at appropriate times by the Overlay class.</description>
            </function>
            <function name="moveTo" returns="void">
              <description>Moves the Overlay to the specified position. This function is
identical to calling this.cfg.setProperty("xy", [x,y]);</description>
              <params>
                <param name="x" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDomResize" returns="void">
              <description>Event handler fired when the resize monitor element is resized.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showIframe" returns="void">
              <description>Shows the iframe shim, if it has been enabled.</description>
            </function>
            <function name="showMacGeckoScrollbars" returns="void">
              <description>Adds a CSS class ("show-scrollbars") and removes a CSS class
("hide-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)</description>
            </function>
            <function name="stackIframe" returns="void">
              <description>Sets the zindex of the iframe shim, if it exists, based on the zindex of
the Overlay element. The zindex of the iframe is set to be one less
than the Overlay element's zindex.
NOTE: This method will not bump up the zindex of the Overlay element
to ensure that the iframe shim has a non-negative zindex.
If you require the iframe zindex to be 0 or higher, the zindex of
the Overlay element should be set to a value greater than 0, before
this method is called.</description>
            </function>
            <function name="syncIframe" returns="void">
              <description>Syncronizes the size and position of iframe shim to that of its
corresponding Overlay instance.</description>
            </function>
            <function name="syncPosition" returns="void">
              <description>Synchronizes the Panel's "xy", "x", and "y" properties with the
Panel's position in the DOM. This is primarily used to update
position information during drag &amp; drop.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a String representation of the object.</description>
            </function>
            <function name="windowResizeHandler" returns="void">
              <description>The DOM event handler used to fire the CustomEvent for window resize</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="windowScrollHandler" returns="void">
              <description>The DOM event handler used to fire the CustomEvent for window scroll</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Overlay" returns="YAHOO.widget.Overlay">
              <description>Class YAHOO.widget.Overlay constructor
Overlay is a Module that is absolutely positioned above the page flow. It
has convenience methods for positioning and sizing, as well as options for
controlling zIndex and constraining the Overlay's position to the current
visible viewport. Overlay also contains a dynamicly generated IFRAME which
is placed beneath it for Internet Explorer 6 and 5.x so that it will be
properly rendered above SELECT elements.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.OverlayManager" extends="Object" private="True">
          <description>OverlayManager is used for maintaining the focus status of
multiple Overlays.</description>
          <attributes>
            <attribute name="activeOverlay" type="YAHOO.widget.Overlay" readonly="False">
              <description>Private property
The currently activated Overlay</description>
            </attribute>
            <attribute name="cfg" type="Config" readonly="False">
              <description>The OverlayManager's Config object used for monitoring
configuration properties.</description>
            </attribute>
            <attribute name="contructor" type="Function" readonly="False">
              <description>The class's constructor function</description>
            </attribute>
            <attribute name="CSS_FOCUSED" type="String" readonly="False">
              <description>The CSS class representing a focused Overlay</description>
            </attribute>
            <attribute name="overlays" type="YAHOO.widget.Overlay[]" readonly="False">
              <description>The array of Overlays that are currently registered</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_bindBlur" returns="void">
              <description>Protected property
Subscribes to the Overlay based instance's blurEvent to allow the OverlayManager to
monitor blur state.
If the instance already has a blurEvent (e.g. Menu), OverlayManager will subscribe
to the existing blurEvent, however if a blurEvent or blur method does not exist
on the instance, the _bindBlur method will add them, and the blur method
update the OverlayManager's state directly.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>The overlay for which blur needs to be managed</description>
                </param>
              </params>
            </function>
            <function name="_bindDestroy" returns="void">
              <description>Protected property
Subscribes to the Overlay based instance's destroyEvent, to allow the Overlay
to be removed for the OverlayManager when destroyed.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_bindFocus" returns="void">
              <description>Protected property
Subscribes to the Overlay based instance focusEvent, to allow the OverlayManager to
monitor focus state.
If the instance already has a focusEvent (e.g. Menu), OverlayManager will subscribe
to the existing focusEvent, however if a focusEvent or focus method does not exist
on the instance, the _bindFocus method will add them, and the focus method will
update the OverlayManager's state directly.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_manageBlur" returns="void">
              <description>Protected property
Updates the state of the OverlayManager and overlay, as a result of the overlay
being blurred.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_manageFocus" returns="void">
              <description>Protected property
Updates the state of the OverlayManager and overlay, as a result of the overlay
receiving focus.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onOverlayBlurHandler&#xA;blurEvent Handler, used to delegate to _manageBlur with the &#xA;correct arguments." returns="void">
              <description>Private property</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oOverlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onOverlayDestroy" returns="void">
              <description>Private property
"destroy" event handler for the Overlay.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oOverlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onOverlayElementFocus" returns="void">
              <description>Private property
Event handler for the DOM event that is used to focus
the Overlay instance as specified by the "focusevent"
configuration property.</description>
              <params>
                <param name="p_oEvent" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onOverlayFocusHandler&#xA;focusEvent Handler, used to delegate to _manageFocus with the &#xA;correct arguments." returns="void">
              <description>Private property</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oOverlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_syncZIndex" returns="void">
              <description>Protected property
Ensures the zIndex configuration property on the managed overlay based instance
is set to the computed zIndex value from the DOM (with "auto" translating to 0).</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="blurAll" returns="void">
              <description>Removes focus from all registered Overlays in the manager</description>
            </function>
            <function name="bringToTop" returns="void">
              <description>Places the specified Overlay instance on top of all other
Overlay instances.</description>
              <params>
                <param name="p_oOverlay" type="YAHOO.widget.Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_oOverlay" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="compareZIndexDesc" returns="Number">
              <description>Private property
Used for sorting the manager's Overlays by z-index.</description>
            </function>
            <function name="find" returns="Overlay">
              <description>Attempts to locate an Overlay by instance or ID.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overlay" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Focuses the specified Overlay</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overlay" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getActive" returns="Overlay">
              <description>Returns the currently focused Overlay</description>
            </function>
            <function name="hideAll" returns="void">
              <description>Hides all Overlays in the manager.</description>
            </function>
            <function name="init" returns="void">
              <description>Initializes the OverlayManager</description>
              <params>
                <param name="overlays" type="Overlay[]" optional="True">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the default configuration of the OverlayManager</description>
            </function>
            <function name="register" returns="boolean">
              <description>Registers an Overlay or an array of Overlays with the manager. Upon
registration, the Overlay receives functions for focus and blur,
along with CustomEvents for each.</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overlay" type="Overlay[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="remove" returns="void">
              <description>Removes the specified Overlay from the manager</description>
              <params>
                <param name="overlay" type="Overlay" optional="False">
                  <description>
                  </description>
                </param>
                <param name="overlay" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showAll" returns="void">
              <description>Shows all Overlays in the manager.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="OverlayManager" returns="YAHOO.widget.OverlayManager">
              <description>Class YAHOO.widget.OverlayManager constructor
OverlayManager is used for maintaining the focus status of
multiple Overlays.</description>
              <params>
                <param name="overlays" type="Array" optional="True">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator" extends="Object" private="True">
          <description>Instantiate a Paginator, passing a configuration object to the contructor.
The configuration object should contain the following properties:

rowsPerPage : n (int)
totalRecords : n (int or Paginator.VALUE_UNLIMITED)
containers : id | el | arr (HTMLElement reference, its id, or an array of either)</description>
          <attributes>
            <attribute name="_batch" type="boolean" readonly="False">
              <description>Protected property
Flag used to indicate multiple attributes are being updated via setState</description>
            </attribute>
            <attribute name="_containers" type="Array(HTMLElement)" readonly="False">
              <description>Private property
Array of nodes in which to render pagination controls.  This is set via
the "containers" attribute.</description>
            </attribute>
            <attribute name="_pageChanged" type="boolean" readonly="False">
              <description>Protected property
Used by setState to indicate when a page change has occurred</description>
            </attribute>
            <attribute name="_state" type="Object" readonly="False">
              <description>Protected property
Temporary state cache used by setState to keep track of the previous
state for eventual pageChange event firing</description>
            </attribute>
            <attribute name="id" type="number" readonly="False">
              <description>Private property
Incrementing index used to give instances unique ids.</description>
            </attribute>
            <attribute name="ID_BASE" type="string" readonly="False">
              <description>Private property
Base of id strings used for ui components.</description>
            </attribute>
            <attribute name="TEMPLATE_DEFAULT" type="string" readonly="False">
              <description>Default template used by Paginator instances.  Update this if you want
all new Paginators to use a different default template.</description>
            </attribute>
            <attribute name="TEMPLATE_ROWS_PER_PAGE" type="string" readonly="False">
              <description>Common alternate pagination format, including page links, links for
previous, next, first and last pages as well as a rows-per-page
dropdown.  Offered as a convenience.</description>
            </attribute>
            <attribute name="ui" type="YAHOO.widget.Paginator.ui" readonly="False">
              <description>Storage object for UI Components</description>
            </attribute>
            <attribute name="VALUE_UNLIMITED" type="number" readonly="False">
              <description>Used to identify unset, optional configurations, or used explicitly in
the case of totalRecords to indicate unlimited pagination.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_firePageChange" returns="void">
              <description>Protected property
Fires a pageChange event in the form of a standard attribute change
event with additional properties prevState and newState.</description>
              <params>
                <param name="state" type="Object" optional="False">
                  <description>the result of getState(oldState)</description>
                </param>
              </params>
            </function>
            <function name="_handleStateChange" returns="void">
              <description>Protected property
Fires the pageChange event when the state attributes have changed in
such a way as to locate the current recordOffset on a new page.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_selfSubscribe" returns="void">
              <description>Protected property
Subscribes to instance attribute change events to automate certain
behaviors.</description>
            </function>
            <function name="_syncRecordOffset" returns="void">
              <description>Protected property
Sets recordOffset to the starting index of the previous page when
totalRecords is reduced below the current recordOffset.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes controls from the page and unhooks events.</description>
            </function>
            <function name="getContainerNodes" returns="Array">
              <description>Get the configured container nodes</description>
            </function>
            <function name="getCurrentPage" returns="number">
              <description>Get the page number corresponding to the current record offset.</description>
            </function>
            <function name="getNextPage" returns="number">
              <description>Get the page number of the next page, or null if the current page is the
last page.</description>
            </function>
            <function name="getPageRecords" returns="Array">
              <description>Get the start and end record indexes of the specified page.</description>
              <params>
                <param name="page" type="number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getPreviousPage" returns="number">
              <description>Get the page number of the previous page, or null if the current page
is the first page.</description>
            </function>
            <function name="getRowsPerPage" returns="number">
              <description>Get the number of rows per page.</description>
            </function>
            <function name="getStartIndex" returns="number">
              <description>Get the index of the first record on the current page</description>
            </function>
            <function name="getState" returns="object">
              <description>Get an object literal describing the current state of the paginator.  If
an object literal of proposed values is passed, the proposed state will
be returned as an object literal with the following keys:

paginator - instance of the Paginator
page - number
totalRecords - number
recordOffset - number
rowsPerPage - number
records - [ start_index, end_index ]
before - (OPTIONAL) { state object literal for current state }</description>
              <params>
                <param name="changes" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTotalPages" returns="number">
              <description>Get the total number of pages in the data set according to the current
rowsPerPage and totalRecords values.  If totalRecords is not set, or
set to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns
YAHOO.widget.Paginator.VALUE_UNLIMITED.</description>
            </function>
            <function name="getTotalRecords" returns="number">
              <description>Get the total number of records.</description>
            </function>
            <function name="hasNextPage" returns="boolean">
              <description>Are there records on the next page?</description>
            </function>
            <function name="hasPage" returns="boolean">
              <description>Does the requested page have any records?</description>
              <params>
                <param name="page" type="number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasPreviousPage" returns="boolean">
              <description>Is there a page before the current page?</description>
            </function>
            <function name="initConfig" returns="void">
              <description>Private property
Initialize the Paginator's attributes (see YAHOO.util.Element class
AttributeProvider).</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Private property
Initialize this instance's CustomEvents.</description>
            </function>
            <function name="initUIComponents" returns="void">
              <description>Private property
Initialize registered ui components onto this instance.</description>
            </function>
            <function name="isNumeric" returns="void">
              <description>Similar to YAHOO.lang.isNumber, but allows numeric strings.  This is
is used for attribute validation in conjunction with getters that return
numbers.</description>
              <params>
                <param name="v" type="Number|String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="void">
              <description>Render the pagination controls per the format attribute into the
specified container nodes.</description>
            </function>
            <function name="setPage" returns="void">
              <description>Set the current page to the provided page number if possible.</description>
              <params>
                <param name="newPage" type="number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRowsPerPage" returns="void">
              <description>Set the number of rows per page.</description>
              <params>
                <param name="rpp" type="number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStartIndex" returns="void">
              <description>Move the record offset to a new starting index.  This will likely cause
the calculated current page to change.  You should probably use setPage.</description>
              <params>
                <param name="offset" type="number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setState" returns="void">
              <description>Convenience method to facilitate setting state attributes rowsPerPage,
totalRecords, recordOffset in batch.  Also supports calculating
recordOffset from state.page if state.recordOffset is not provided.
Fires only a single pageChange event, if appropriate.
This will not fire a changeRequest event.</description>
              <params>
                <param name="state" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setTotalRecords" returns="void">
              <description>Set the total number of records.</description>
              <params>
                <param name="total" type="number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toNumber" returns="void">
              <description>Return a number or null from input</description>
              <params>
                <param name="n" type="Number|String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateVisibility" returns="void">
              <description>Hides the containers if there is only one page of data and attribute
alwaysVisible is false.  Conversely, it displays the containers if either
there is more than one page worth of data or alwaysVisible is turned on.</description>
            </function>
            <function name="Paginator" returns="YAHOO.widget.Paginator">
              <description>Class YAHOO.widget.Paginator constructor
Instantiate a Paginator, passing a configuration object to the contructor.
The configuration object should contain the following properties:

rowsPerPage : n (int)
totalRecords : n (int or Paginator.VALUE_UNLIMITED)
containers : id | el | arr (HTMLElement reference, its id, or an array of either)</description>
              <params>
                <param name="config" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui" extends="Object" private="True">
          <description>
          </description>
          <attributes>
            <attribute name="CurrentPageReport" type="YAHOO.widget.Paginator.ui.CurrentPageReport" readonly="False">
              <description>ui Component to generate the textual report of current pagination status.
E.g. "Now viewing page 1 of 13".</description>
            </attribute>
            <attribute name="FirstPageLink" type="YAHOO.widget.Paginator.ui.FirstPageLink" readonly="False">
              <description>ui Component to generate the link to jump to the first page.</description>
            </attribute>
            <attribute name="LastPageLink" type="YAHOO.widget.Paginator.ui.LastPageLink" readonly="False">
              <description>ui Component to generate the link to jump to the last page.</description>
            </attribute>
            <attribute name="NextPageLink" type="YAHOO.widget.Paginator.ui.NextPageLink" readonly="False">
              <description>ui Component to generate the link to jump to the next page.</description>
            </attribute>
            <attribute name="PageLinks" type="YAHOO.widget.Paginator.ui.PageLinks" readonly="False">
              <description>ui Component to generate the page links</description>
            </attribute>
            <attribute name="PreviousPageLink" type="YAHOO.widget.Paginator.ui.PreviousPageLink" readonly="False">
              <description>ui Component to generate the link to jump to the previous page.</description>
            </attribute>
            <attribute name="RowsPerPageDropdown" type="YAHOO.widget.Paginator.ui.RowsPerPageDropdown" readonly="False">
              <description>ui Component to generate the rows-per-page dropdown</description>
            </attribute>
            <attribute name="YourComponent" type="YAHOO.widget.Paginator.ui.YourComponent" readonly="False">
              <description>Describe the ui Component</description>
            </attribute>
          </attributes>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.CurrentPageReport" extends="Object" private="True">
          <description>ui Component to generate the textual report of current pagination status.
E.g. "Now viewing page 1 of 13".</description>
          <attributes>
            <attribute name="span" type="HTMLElement" readonly="False">
              <description>Private property
Span node containing the formatted info</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroy" returns="void">
              <description>Private property
Removes the link/span node and clears event listeners
removal.</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the span containing info formatted per the pageReportTemplate
attribute.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sprintf" returns="string">
              <description>Replace place holders in a string with the named values found in an
object literal.</description>
              <params>
                <param name="template" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="values" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Regenerate the content of the span if appropriate. Calls
CurrentPageReport.sprintf with the value of the pageReportTemplate
attribute and the value map returned from pageReportValueGenerator
function.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="CurrentPageReport" returns="YAHOO.widget.Paginator.ui.CurrentPageReport">
              <description>Class YAHOO.widget.Paginator.ui.CurrentPageReport constructor
ui Component to generate the textual report of current pagination status.
E.g. "Now viewing page 1 of 13".</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.FirstPageLink" extends="Object" private="True">
          <description>ui Component to generate the link to jump to the first page.</description>
          <attributes>
            <attribute name="current" type="HTMLElement" readonly="False">
              <description>Private property
The currently placed HTMLElement node</description>
            </attribute>
            <attribute name="link" type="HTMLElement" readonly="False">
              <description>Private property
Link node</description>
            </attribute>
            <attribute name="span" type="HTMLElement" readonly="False">
              <description>Private property
Span node (inactive link)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroy" returns="void">
              <description>Private property
Removes the link/span node and clears event listeners
removal.</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for the link's onclick event.  Pass new value to setPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the appropriate node given the current
pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Swap the link and span nodes if appropriate.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="FirstPageLink" returns="YAHOO.widget.Paginator.ui.FirstPageLink">
              <description>Class YAHOO.widget.Paginator.ui.FirstPageLink constructor
ui Component to generate the link to jump to the first page.</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.LastPageLink" extends="Object" private="True">
          <description>ui Component to generate the link to jump to the last page.</description>
          <attributes>
            <attribute name="current" type="HTMLElement" readonly="False">
              <description>Private property
Currently placed HTMLElement node</description>
            </attribute>
            <attribute name="link" type="HTMLElement" readonly="False">
              <description>Private property
Link HTMLElement node</description>
            </attribute>
            <attribute name="na" type="HTMLElement" readonly="False">
              <description>Private property
Empty place holder node for when the last page link is inappropriate to
display in any form (unlimited paging).</description>
            </attribute>
            <attribute name="span" type="HTMLElement" readonly="False">
              <description>Private property
Span node (inactive link)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroy" returns="void">
              <description>Private property
Removes the link/span node and clears event listeners</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="paginator" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for the link's onclick event.  Passes to setPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the appropriate node given the current
pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Swap the link, span, and na nodes if appropriate.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="LastPageLink" returns="YAHOO.widget.Paginator.ui.LastPageLink">
              <description>Class YAHOO.widget.Paginator.ui.LastPageLink constructor
ui Component to generate the link to jump to the last page.</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.NextPageLink" extends="Object" private="True">
          <description>ui Component to generate the link to jump to the next page.</description>
          <attributes>
            <attribute name="current" type="HTMLElement" readonly="False">
              <description>Private property
Currently placed HTMLElement node</description>
            </attribute>
            <attribute name="link" type="HTMLElement" readonly="False">
              <description>Private property
Link node</description>
            </attribute>
            <attribute name="span" type="HTMLElement" readonly="False">
              <description>Private property
Span node (inactive link)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroy" returns="void">
              <description>Private property
Removes the link/span node and clears event listeners</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for the link's onclick event.  Passes to setPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the appropriate node given the current
pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Swap the link and span nodes if appropriate.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="NextPageLink" returns="YAHOO.widget.Paginator.ui.NextPageLink">
              <description>Class YAHOO.widget.Paginator.ui.NextPageLink constructor
ui Component to generate the link to jump to the next page.</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.PageLinks" extends="Object" private="True">
          <description>ui Component to generate the page links</description>
          <attributes>
            <attribute name="container" type="HTMLElement" readonly="False">
              <description>Private property
Span node containing the page links</description>
            </attribute>
            <attribute name="current" type="number" readonly="False">
              <description>Private property
Current page</description>
            </attribute>
          </attributes>
          <functions>
            <function name="calculateRange" returns="Array">
              <description>Calculates start and end page numbers given a current page, attempting
to keep the current page in the middle</description>
              <params>
                <param name="currentPage" type="int" optional="False">
                  <description>The current page</description>
                </param>
                <param name="totalPages" type="int" optional="False">
                  <description>The current page</description>
                </param>
                <param name="numPages" type="int" optional="False">
                  <description>The current page</description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Private property
Removes the page links container node and clears event listeners</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for the container's onclick event.  Looks for qualifying link
clicks, and pulls the page number from the link's page attribute.
Sends link's page attribute to the Paginator's setPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rebuild" returns="void">
              <description>Force a rebuild of the page links.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the container node containing page links
appropriate to the current pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Update the links if appropriate</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="PageLinks" returns="YAHOO.widget.Paginator.ui.PageLinks">
              <description>Class YAHOO.widget.Paginator.ui.PageLinks constructor
ui Component to generate the page links</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.PreviousPageLink" extends="Object" private="True">
          <description>ui Component to generate the link to jump to the previous page.</description>
          <attributes>
            <attribute name="current" type="HTMLElement" readonly="False">
              <description>Private property
Currently placed HTMLElement node</description>
            </attribute>
            <attribute name="link" type="HTMLElement" readonly="False">
              <description>Private property
Link node</description>
            </attribute>
            <attribute name="span" type="HTMLElement" readonly="False">
              <description>Private property
Span node (inactive link)</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroy" returns="void">
              <description>Private property
Removes the link/span node and clears event listeners</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for the link's onclick event.  Passes to setPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the appropriate node given the current
pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Swap the link and span nodes if appropriate.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="PreviousPageLink" returns="YAHOO.widget.Paginator.ui.PreviousPageLink">
              <description>Class YAHOO.widget.Paginator.ui.PreviousPageLink constructor
ui Component to generate the link to jump to the previous page.</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.RowsPerPageDropdown" extends="Object" private="True">
          <description>ui Component to generate the rows-per-page dropdown</description>
          <attributes>
            <attribute name="all" type="HTMLElement" readonly="False">
              <description>Protected property
option node for the optional All value</description>
            </attribute>
            <attribute name="select" type="HTMLElement" readonly="False">
              <description>Private property
select node</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_handleTotalRecordsChange" returns="void">
              <description>Protected property
Updates the all option value (and Paginator's rowsPerPage attribute if
necessary) in response to a change in the Paginator's totalRecords.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>attribute change event</description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Private property
Removes the select node and clears event listeners</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onChange" returns="void">
              <description>Listener for the select's onchange event.  Sent to setRowsPerPage method.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rebuild" returns="void">
              <description>(Re)generate the select options.</description>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the select and option nodes and returns the select node.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Select the appropriate option if changed.</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="RowsPerPageDropdown" returns="YAHOO.widget.Paginator.ui.RowsPerPageDropdown">
              <description>Class YAHOO.widget.Paginator.ui.RowsPerPageDropdown constructor
ui Component to generate the rows-per-page dropdown</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Paginator.ui.YourComponent" extends="Object" private="True">
          <description>Describe the ui Component</description>
          <attributes>
            <attribute name="button" type="HTMLElement" readonly="False">
              <description>Private property
Describe the node that will be stored in this property</description>
            </attribute>
          </attributes>
          <functions>
            <function name="bindUI" returns="void">
              <description>Private property
Attach DOM event listeners to the nodes managed by this component</description>
            </function>
            <function name="destroy" returns="void">
              <description>Private property
Remove the generated DOM structure</description>
            </function>
            <function name="init" returns="void">
              <description>Decorates Paginator instances with new attributes. Called during
Paginator instantiation.</description>
              <params>
                <param name="p" type="Paginator" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initListeners" returns="void">
              <description>Subscribe to the Paginator's events that will affect this component's ui</description>
            </function>
            <function name="initUI" returns="void">
              <description>Private property
Initialize the DOM nodes managed by this component</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onClick" returns="void">
              <description>Listener for a DOM event from a managed element.  Pass new value to
Paginator.setStartIndex(..), .setPage(..) etc to fire off changeRequest
events.  DO NOT modify the managed element's state here.  That should
happen in response to the Paginator's recordOffsetChange event (et al)</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="rebuild" returns="void">
              <description>Make more substantial changes in a separate method if necessary</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="HTMLElement">
              <description>Generate the nodes and return the appropriate node given the current
pagination state.</description>
              <params>
                <param name="id_base" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="update" returns="void">
              <description>Make any necessary changes to the component nodes</description>
              <params>
                <param name="e" type="CustomEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="YourComponent" returns="YAHOO.widget.Paginator.ui.YourComponent">
              <description>Class YAHOO.widget.Paginator.ui.YourComponent constructor
Describe the ui Component</description>
              <params>
                <param name="p" type="Pagintor" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Panel" extends="YAHOO.widget.Overlay" private="True">
          <description>Panel is an implementation of Overlay that behaves like an OS window,
with a draggable header and an optional close icon at the top right.</description>
          <attributes>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the Panel's configuration properties</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the Panel's events</description>
            </attribute>
            <attribute name="CSS_PANEL" type="String" readonly="False">
              <description>Constant representing the default CSS class used for a Panel</description>
            </attribute>
            <attribute name="CSS_PANEL_CONTAINER" type="String" readonly="False">
              <description>Constant representing the default CSS class used for a Panel's
wrapping container</description>
            </attribute>
            <attribute name="FOCUSABLE" type="Array" readonly="False">
              <description>Constant representing the default set of focusable elements
on the pagewhich Modal Panels will prevent access to, when
the modal mask is displayed</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addFocusHandlers" returns="void">
              <description>Protected property
"showMask" event handler that adds a "focus" event handler to all
focusable elements in the document to enforce a Panel instance's
modality from being compromised.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>Custom event type</description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>Custom event type</description>
                </param>
              </params>
            </function>
            <function name="_autoFillOnHeightChange" returns="void">
              <description>Protected property
The default custom event handler executed when the Panel's height is changed,
if the autofillheight property has been set.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
                <param name="args" type="Array" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>The array of arguments passed to event subscribers</description>
                </param>
              </params>
            </function>
            <function name="_createHiddenFocusElement" returns="void">
              <description>Private property
Creates a hidden focusable element, used to focus on,
to enforce modality for browsers in which focus cannot
be applied to the container box.</description>
            </function>
            <function name="_doClose" returns="void">
              <description>Protected property
Event handler for the close icon</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onElementFocus" returns="void">
              <description>Private property
"focus" event handler for a focuable element. Used to automatically
blur the element when it receives focus to ensure that a Panel
instance's modality is not compromised.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_removeFocusHandlers" returns="void">
              <description>Protected property
"hideMask" event handler that removes all "focus" event handlers added
by the "addFocusEventHandlers" method.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="buildMask" returns="void">
              <description>Builds the mask that is laid over the document when the Panel is
configured to be modal.</description>
            </function>
            <function name="buildWrapper" returns="void">
              <description>Builds the wrapping container around the Panel that is used for
positioning the shadow and matte underlays. The container element is
assigned to a  local instance variable called container, and the
element is reinserted inside of it.</description>
            </function>
            <function name="configClose" returns="void">
              <description>The default event handler fired when the "close" property is changed.
The method controls the appending or hiding of the close icon at the
top right of the Panel.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configDraggable" returns="void">
              <description>The default event handler fired when the "draggable" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configHeight" returns="void">
              <description>The default event handler fired when the "height" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configKeyListeners" returns="void">
              <description>The default event handler fired when the "keylisteners" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configModal" returns="void">
              <description>The default event handler fired when the "modal" property is
changed. This handler subscribes or unsubscribes to the show and hide
events to handle the display or hide of the modality mask.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configStrings" returns="void">
              <description>The default handler for the "strings" property</description>
            </function>
            <function name="configUnderlay" returns="void">
              <description>The default event handler fired when the "underlay" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configWidth" returns="void">
              <description>The default event handler fired when the "width" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="configzIndex" returns="void">
              <description>The default event handler fired when the "zIndex" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the Panel element from the DOM and sets all child elements
to null.</description>
            </function>
            <function name="focusFirst" returns="void">
              <description>Sets focus to the first element in the Panel.</description>
            </function>
            <function name="focusLast" returns="void">
              <description>Sets focus to the last element in the Panel.</description>
            </function>
            <function name="forceUnderlayRedraw" returns="void">
              <description>Forces the underlay element to be repainted through the application/removal
of a yui-force-redraw class to the underlay element.</description>
            </function>
            <function name="getFocusableElements" returns="void">
              <description>Returns an array of the currently focusable items which reside within
Panel. The set of focusable elements the method looks for are defined
in the Panel.FOCUSABLE static property</description>
              <params>
                <param name="root" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hideMask" returns="void">
              <description>Hides the modality mask.</description>
            </function>
            <function name="init" returns="void">
              <description>The Overlay initialization method, which is executed for Overlay and
all of its subclasses. This method is automatically called by the
constructor, and  sets up all DOM references for pre-existing markup,
and creates required markup if it is not already present.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be changed
using the Panel's Config object (cfg).</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for Module which are fired
automatically at appropriate times by the Module class.</description>
            </function>
            <function name="registerDragDrop" returns="void">
              <description>Registers the Panel's header for drag &amp; drop capability.</description>
            </function>
            <function name="removeMask" returns="void">
              <description>Removes the modality mask.</description>
            </function>
            <function name="render" returns="boolean">
              <description>Renders the Panel by inserting the elements that are not already in
the main Panel into their correct places. Optionally appends the
Panel to the specified node prior to the render's execution. NOTE:
For Panels without existing markup, the appendToNode argument is
REQUIRED. If this argument is ommitted and the current element is
not present in the document, the function will return false,
indicating that the render was a failure.</description>
              <params>
                <param name="appendToNode" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="appendToNode" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFirstLastFocusable" returns="void">
              <description>Sets the firstElement and lastElement instance properties
to the first and last focusable elements in the Panel.</description>
            </function>
            <function name="setTabLoop" returns="void">
              <description>Sets up a tab, shift-tab loop between the first and last elements
provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener
instance properties, which are reset everytime this method is invoked.</description>
              <params>
                <param name="firstElement" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="lastElement" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showMask" returns="void">
              <description>Shows the modality mask.</description>
            </function>
            <function name="sizeMask" returns="void">
              <description>Sets the size of the modality mask to cover the entire scrollable
area of the document</description>
            </function>
            <function name="sizeUnderlay" returns="void">
              <description>Adjusts the size of the shadow based on the size of the element.</description>
            </function>
            <function name="stackMask" returns="void">
              <description>Sets the zindex of the mask, if it exists, based on the zindex of
the Panel element. The zindex of the mask is set to be one less
than the Panel element's zindex.
NOTE: This method will not bump up the zindex of the Panel
to ensure that the mask has a non-negative zindex. If you require the
mask zindex to be 0 or higher, the zindex of the Panel
should be set to a value higher than 0, before this method is called.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a String representation of the object.</description>
            </function>
            <function name="Panel" returns="YAHOO.widget.Panel">
              <description>Class YAHOO.widget.Panel constructor
Panel is an implementation of Overlay that behaves like an OS window,
with a draggable header and an optional close icon at the top right.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.PieChart" extends="Object" private="True">
          <description>PieChart class for the YUI Charts widget.</description>
          <functions>
            <function name="_getCategoryField" returns="void">
              <description>Private property
Getter for the categoryField attribute.</description>
            </function>
            <function name="_getDataField" returns="void">
              <description>Private property
Getter for the dataField attribute.</description>
            </function>
            <function name="_initAttributes" returns="void">
              <description>Private property
Initializes the attributes.</description>
            </function>
            <function name="_setCategoryField" returns="void">
              <description>Private property
Setter for the categoryField attribute.</description>
            </function>
            <function name="_setDataField" returns="void">
              <description>Private property
Setter for the dataField attribute.</description>
            </function>
            <function name="PieChart" returns="YAHOO.widget.PieChart">
              <description>Class YAHOO.widget.PieChart constructor
PieChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.PieSeries" extends="Object" private="True">
          <description>PieSeries class for the YUI Charts widget.</description>
          <attributes>
            <attribute name="categoryField" type="String" readonly="False">
              <description>The field used to access the category value from the items from the data source.</description>
            </attribute>
            <attribute name="dataField" type="String" readonly="False">
              <description>The field used to access the data value from the items from the data source.</description>
            </attribute>
            <attribute name="labelFunction" type="String" readonly="False">
              <description>A string reference to the globally-accessible function that may be called to
determine each of the label values for this series. Also accepts function references.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="PieSeries" returns="YAHOO.widget.PieSeries">
              <description>Class YAHOO.widget.PieSeries constructor
PieSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ProfilerViewer" extends="YAHOO.util.Element" private="True">
          <description>A widget to view YUI Profiler output.</description>
          <attributes>
            <attribute name="CLASS" type="string" readonly="False">
              <description>Classname for ProfilerViewer containing element.</description>
            </attribute>
            <attribute name="CLASS_BUSY" type="string" readonly="False">
              <description>Classname for busy indicator in the dashboard.</description>
            </attribute>
            <attribute name="CLASS_CHART" type="string" readonly="False">
              <description>Classname for element containing the chart.</description>
            </attribute>
            <attribute name="CLASS_CHART_CONTAINER" type="string" readonly="False">
              <description>Classname for element containing the chart and chart
legend elements.</description>
            </attribute>
            <attribute name="CLASS_CHART_LEGEND" type="string" readonly="False">
              <description>Classname for element containing the chart's legend.</description>
            </attribute>
            <attribute name="CLASS_DASHBOARD" type="string" readonly="False">
              <description>Classname for ProfilerViewer button dashboard.</description>
            </attribute>
            <attribute name="CLASS_REFRESH" type="string" readonly="False">
              <description>Classname for the "refresh data" button.</description>
            </attribute>
            <attribute name="CLASS_TABLE" type="string" readonly="False">
              <description>Classname for element containing the datatable.</description>
            </attribute>
            <attribute name="percentAxisLabelFunction" type="function" readonly="False">
              <description>Private property
Function used to format percent numbers for chart; must
be publicly accessible, per Charts spec.</description>
            </attribute>
            <attribute name="STRINGS" type="object" readonly="False">
              <description>Strings used in the UI.</description>
            </attribute>
            <attribute name="timeAxisLabelFunction" type="function" readonly="False">
              <description>Private property
Function used to format numbers in milliseconds
for chart; must be publicly accessible, per Charts spec.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_arraySum" returns="void">
              <description>Private property
Utility function for array sums.</description>
            </function>
            <function name="_createButton" returns="void">
              <description>Private property
Create anchor elements for use as buttons. Args: label
is text to appear on the face of the button, parentEl
is the el to which the anchor will be attached, position
is true for inserting as the first node and false for
inserting as the last node of the parentEl.</description>
            </function>
            <function name="_createProfilerViewerElement" returns="void">
              <description>Private property
If no element is passed in, create it as the first element
in the document.</description>
            </function>
            <function name="_dataTableRenderHandler" returns="void">
              <description>Private property
Proxy the render event in DataTable into the ProfilerViewer
attribute.</description>
            </function>
            <function name="_drawChartLegend" returns="void">
              <description>Private property
Set up the Chart's legend</description>
            </function>
            <function name="_getChartData" returns="void">
              <description>Private property
Get data for the Chart from DataTable recordset</description>
            </function>
            <function name="_getProfilerData" returns="void">
              <description>Private property
Retrieves data from Profiler, filtering and sorting as needed
based on current widget state.  Adds calculated percentage
column and function name to data returned by Profiler.</description>
            </function>
            <function name="_getSeriesDef" returns="void">
              <description>Private property
Build series definition based on current configuration attributes.</description>
            </function>
            <function name="_initChart" returns="void">
              <description>Private property
Set up the Chart.</description>
            </function>
            <function name="_initChartDOM" returns="void">
              <description>Private property
Set up the DOM structure for the ProfilerViewer canvas.</description>
            </function>
            <function name="_initDataTable" returns="void">
              <description>Private property
Set up the DataTable.</description>
            </function>
            <function name="_initLauncherDOM" returns="void">
              <description>Private property
Set up the DOM structure for the ProfilerViewer launcher.</description>
            </function>
            <function name="_initViewerDOM" returns="void">
              <description>Private property
Set up the DOM structure for the ProfilerViewer canvas,
including the holder for the DataTable.</description>
            </function>
            <function name="_refreshChart" returns="void">
              <description>Private property
Refresh chart, getting new data from table.</description>
            </function>
            <function name="_refreshDataTable" returns="void">
              <description>Private property
Refresh DataTable, getting new data from Profiler.</description>
            </function>
            <function name="_render" returns="void">
              <description>Private property
Render the viewer canvas</description>
            </function>
            <function name="_setBusyState" returns="void">
              <description>Private property
Set's console busy state.</description>
            </function>
            <function name="_sizeChartCanvas" returns="void">
              <description>Private property
Resize the chart's canvas if based on number of records
returned from the chart's datasource.</description>
            </function>
            <function name="_sortedByChange" returns="void">
              <description>Private property
Proxy the sort event in DataTable into the ProfilerViewer
attribute.</description>
            </function>
            <function name="_thClickHandler" returns="void">
              <description>Private property
Event handler for clicks on the DataTable's sortable column
heads.</description>
            </function>
            <function name="_toggleVisible" returns="void">
              <description>Private property
Toggles visibility of the viewer canvas.</description>
            </function>
            <function name="getBodyEl" returns="void">
              <description>Returns the element containing the console's body, including
the chart and the datatable..</description>
            </function>
            <function name="getChart" returns="void">
              <description>Returns the element containing the console's Chart instance.</description>
            </function>
            <function name="getChartEl" returns="void">
              <description>Returns the element containing the console's chart.</description>
            </function>
            <function name="getDataTable" returns="void">
              <description>Returns the element containing the console's DataTable
instance.</description>
            </function>
            <function name="getHeadEl" returns="void">
              <description>Returns the element containing the console's header.</description>
            </function>
            <function name="getTableEl" returns="void">
              <description>Returns the element containing the console's dataTable.</description>
            </function>
            <function name="hide" returns="void">
              <description>Private property
Hides the viewer canvas.</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
setAttributeConfigs TabView specific properties.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="refreshData" returns="void">
              <description>Refreshes the data displayed in the ProfilerViewer. When called,
this will invoke a refresh of the DataTable and (if displayed)
the Chart.</description>
            </function>
            <function name="show" returns="void">
              <description>Private property
Shows the viewer canvas.</description>
            </function>
            <function name="toString" returns="void">
              <description>Private property
Provides a readable name for the ProfilerViewer instance.</description>
            </function>
            <function name="ProfilerViewer" returns="YAHOO.widget.ProfilerViewer">
              <description>Class YAHOO.widget.ProfilerViewer constructor
A widget to view YUI Profiler output.</description>
              <params>
                <param name="el(optional)" type="HTMLElement | String | Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.RadioCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The RadioCellEditor class provides functionality for inline editing
DataTable cell data with radio buttons.</description>
          <attributes>
            <attribute name="radioOptions" type="String[] | Object[]" readonly="False">
              <description>Array of radio values. Can either be a simple array (e.g., ["yes","no","maybe"])
or a an array of objects (e.g., [{label:"yes", value:1}, {label:"no", value:-1},
{label:"maybe", value:0}]).</description>
            </attribute>
            <attribute name="radios" type="HTMLElement[]" readonly="False">
              <description>Reference to radio elements.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in RadioCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from RadioCellEditor.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a form with input(s) type=radio.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets RadioCellEditor UI to initial state.</description>
            </function>
            <function name="RadioCellEditor" returns="YAHOO.widget.RadioCellEditor">
              <description>Class YAHOO.widget.RadioCellEditor constructor
The RadioCellEditor class provides functionality for inline editing
DataTable cell data with radio buttons.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Record" extends="Object" private="True">
          <description>The Record class defines a DataTable record.</description>
          <attributes>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Immutable unique count assigned at instantiation. Remains constant while a
Record's position index can change from sorting.</description>
            </attribute>
            <attribute name="_oData" type="Object" readonly="False">
              <description>Private property
Holds data for the Record in an object literal.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Immutable unique ID assigned at instantiation. Remains constant while a
Record's position index can change from sorting.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Internal class variable to give unique IDs to Record instances.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getCount" returns="void">
              <description>Returns unique count assigned at instantiation.</description>
            </function>
            <function name="getData" returns="void">
              <description>Returns data for the Record for a field if given, or the entire object
literal otherwise.</description>
              <params>
                <param name="sField" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getId" returns="void">
              <description>Returns unique ID assigned at instantiation.</description>
            </function>
            <function name="setData" returns="void">
              <description>Sets given data at the given key. Use the RecordSet method setValue to trigger
events.</description>
              <params>
                <param name="sKey" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="MIXED" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Record" returns="YAHOO.widget.Record">
              <description>Class YAHOO.widget.Record constructor
The Record class defines a DataTable record.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.RecordSet" extends="Object" private="True">
          <description>A RecordSet defines and manages a set of Records.</description>
          <attributes>
            <attribute name="_length" type="Number" readonly="False">
              <description>Internal counter of how many Records are in the RecordSet.</description>
            </attribute>
            <attribute name="_sId" type="String" readonly="False">
              <description>Private property
Unique String identifier assigned at instantiation.</description>
            </attribute>
            <attribute name="_nCount" type="Number" readonly="False">
              <description>Private property
Internal class variable to name multiple Recordset instances.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addRecord" returns="YAHOO.widget.Record">
              <description>Private property
Adds one Record to the RecordSet at the given index. If index is null,
then adds the Record to the end of the RecordSet.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>An object literal of data.</description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>An object literal of data.</description>
                </param>
              </params>
            </function>
            <function name="_deleteRecord" returns="void">
              <description>Private property
Deletes Records from the RecordSet at the given index. If range is null,
then only one Record is deleted.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>(optional) How many Records to delete</description>
                </param>
                <param name="range" type="Number" optional="False">
                  <description>(optional) How many Records to delete</description>
                </param>
              </params>
            </function>
            <function name="_setRecord" returns="YAHOO.widget.Record">
              <description>Private property
Sets/replaces one Record to the RecordSet at the given index.  Existing
Records with higher indexes are not shifted.  If no index specified, the
Record is added to the end of the RecordSet.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRecord" returns="YAHOO.widget.Record">
              <description>Adds one Record to the RecordSet at the given index. If index is null,
then adds the Record to the end of the RecordSet.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addRecords" returns="YAHOO.widget.Record[]">
              <description>Adds multiple Records at once to the RecordSet at the given index with the
given object literal data. If index is null, then the new Records are
added to the end of the RecordSet.</description>
              <params>
                <param name="aData" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deleteRecord" returns="Object">
              <description>Removes the Record at the given position index from the RecordSet. If a range
is also provided, removes that many Records, starting from the index. Length
of RecordSet is correspondingly shortened.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deleteRecords" returns="Object[]">
              <description>Removes the Record at the given position index from the RecordSet. If a range
is also provided, removes that many Records, starting from the index. Length
of RecordSet is correspondingly shortened.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getId" returns="String">
              <description>Returns unique name of the RecordSet instance.</description>
            </function>
            <function name="getLength" returns="Number">
              <description>Returns the number of Records held in the RecordSet.</description>
            </function>
            <function name="getRecord" returns="YAHOO.widget.Record">
              <description>Returns Record by ID or RecordSet position index.</description>
              <params>
                <param name="record" type="YAHOO.widget.Record | Number | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecordIndex" returns="Number">
              <description>Returns current position index for the given Record.</description>
              <params>
                <param name="oRecord" type="YAHOO.widget.Record" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRecords" returns="YAHOO.widget.Record[]">
              <description>Returns an array of Records from the RecordSet.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="hasRecords" returns="Boolean">
              <description>Returns a boolean indicating whether Records exist in the RecordSet at the
specified index range.  Returns true if and only if a Record exists at each
index in the range.</description>
              <params>
                <param name="index" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="replaceRecords" returns="YAHOO.widget.Record || YAHOO.widget.Record[]">
              <description>Replaces all Records in RecordSet with new object literal data.</description>
              <params>
                <param name="data" type="Object || Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reset" returns="void">
              <description>Deletes all Records from the RecordSet.</description>
            </function>
            <function name="reverseRecords" returns="YAHOO.widget.Record[]">
              <description>Reverses all Records, so ["one", "two", "three"] becomes ["three", "two", "one"].</description>
            </function>
            <function name="setRecord" returns="YAHOO.widget.Record">
              <description>Sets or replaces one Record to the RecordSet at the given index. Unlike
addRecord, an existing Record at that index is not shifted to preserve it.
If no index is specified, it adds the Record to the end of the RecordSet.</description>
              <params>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setRecords" returns="YAHOO.widget.Record[]">
              <description>Sets or replaces multiple Records at once to the RecordSet with the given
data, starting at the given index. If index is not specified, then the new
Records are added to the end of the RecordSet.</description>
              <params>
                <param name="aData" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="sortRecords" returns="YAHOO.widget.Record[]">
              <description>Sorts all Records by given function. Records keep their unique IDs but will
have new RecordSet position indexes.</description>
              <params>
                <param name="fnSort" type="Function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="desc" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Public accessor to the unique name of the RecordSet instance.</description>
            </function>
            <function name="updateKey" returns="void">
              <description>
              </description>
            </function>
            <function name="updateRecord" returns="YAHOO.widget.Record">
              <description>Updates given Record with given data.</description>
              <params>
                <param name="record" type="YAHOO.widget.Record | Number | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="updateRecordValue" returns="void">
              <description>Sets given Record at given key to given data.</description>
              <params>
                <param name="record" type="YAHOO.widget.Record | Number | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sKey" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oData" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="RecordSet" returns="YAHOO.widget.RecordSet">
              <description>Class YAHOO.widget.RecordSet constructor
A RecordSet defines and manages a set of Records.</description>
              <params>
                <param name="data" type="Object || Object[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.RootNode" extends="YAHOO.widget.Node" private="True">
          <description>A custom YAHOO.widget.Node that handles the unique nature of
the virtual, presentationless root node.</description>
          <attributes>
            <attribute name="_type" type="string" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getNodeCount" returns="int">
              <description>Count of nodes in tree.
It overrides Nodes.getNodeCount because the root node should not be counted.</description>
            </function>
            <function name="getNodeDefinition" returns="Object | false">
              <description>Returns an object which could be used to build a tree out of this node and its children.
It can be passed to the tree constructor to reproduce this node as a tree.
Since the RootNode is automatically created by treeView,
its own definition is excluded from the returned node definition
which only contains its children.</description>
            </function>
            <function name="RootNode" returns="YAHOO.widget.RootNode">
              <description>Class YAHOO.widget.RootNode constructor
A custom YAHOO.widget.Node that handles the unique nature of
the virtual, presentationless root node.</description>
              <params>
                <param name="oTree" type="YAHOO.widget.TreeView" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ScrollingDataTable" extends="YAHOO.widget.DataTable" private="True">
          <description>The ScrollingDataTable class extends the DataTable class to provide
functionality for x-scrolling, y-scrolling, and xy-scrolling.</description>
          <attributes>
            <attribute name="_bScrollbarX" type="Boolean" readonly="False">
              <description>Private property
True if x-scrollbar is currently visible.</description>
            </attribute>
            <attribute name="_elBdContainer" type="HTMLElement" readonly="False">
              <description>Private property
Container for scrolling body TABLE element.</description>
            </attribute>
            <attribute name="_elBdThead" type="HTMLElement" readonly="False">
              <description>Private property
Body THEAD element.</description>
            </attribute>
            <attribute name="_elHdContainer" type="HTMLElement" readonly="False">
              <description>Private property
Container for fixed header TABLE element.</description>
            </attribute>
            <attribute name="_elHdTable" type="HTMLElement" readonly="False">
              <description>Private property
Fixed header TABLE element.</description>
            </attribute>
            <attribute name="_elTmpContainer" type="HTMLElement" readonly="False">
              <description>Private property
Offscreen container to temporarily clone SDT for auto-width calculation.</description>
            </attribute>
            <attribute name="_elTmpTable" type="HTMLElement" readonly="False">
              <description>Private property
Offscreen TABLE element for auto-width calculation.</description>
            </attribute>
            <attribute name="CLASS_BODY" type="String" readonly="False">
              <description>Class name assigned to inner DataTable body container.</description>
            </attribute>
            <attribute name="CLASS_HEADER" type="String" readonly="False">
              <description>Class name assigned to inner DataTable header container.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_destroyBdTheadEl" returns="void">
              <description>Private property
Destroy's the DataTable body THEAD element, if available.</description>
            </function>
            <function name="_destroyContainerEl" returns="void">
              <description>Private property
Destroy's the DataTable outer and inner container elements, if available.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_destroyHdTableEl" returns="void">
              <description>Private property
Destroy's the DataTable head TABLE element, if available.</description>
            </function>
            <function name="_focusEl" returns="void">
              <description>Private property
Sets focus on the given element.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initBdTheadEl" returns="HTMLElement">
              <description>Private property
Initializes body THEAD element.</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initBdThEl" returns="void">
              <description>Private property
Populates TH element for the body THEAD element.</description>
              <params>
                <param name="elTh" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initCaptionEl" returns="void">
              <description>Private property
Creates HTML markup CAPTION element.</description>
              <params>
                <param name="sCaption" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initContainerEl" returns="void">
              <description>Private property
Initializes the DataTable outer container element and creates inner header
and body container elements.</description>
              <params>
                <param name="elContainer" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initDomElements" returns="void">
              <description>Private property
Initializes DOM elements for a ScrollingDataTable, including creation of
two separate TABLE elements.</description>
              <params>
                <param name="elContainer" type="HTMLElement | String} HTML DIV element by reference or ID. &#xA;return {Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initTableEl" returns="void">
              <description>Private property
Initializes ScrollingDataTable TABLE elements into the two inner containers.</description>
            </function>
            <function name="_initTbodyEl" returns="void">
              <description>Private property
Initializes ScrollingDataTable TBODY element for data</description>
              <params>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initTheadEl" returns="void">
              <description>Private property
Initializes ScrollingDataTable THEAD elements into the two inner containers.</description>
              <params>
                <param name="elHdTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elTable" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_initThEl" returns="void">
              <description>Private property
SDT changes ID so as not to duplicate the accessibility TH IDs.</description>
              <params>
                <param name="elTh" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onScroll" returns="void">
              <description>Private property
Syncs scrolltop and scrollleft of all TABLEs.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.ScrollingDataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onTheadKeydown" returns="void">
              <description>Private property
Handles keydown events on the THEAD element.</description>
              <params>
                <param name="e" type="HTMLEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oSelf" type="YAHOO.widget.ScrollingDataTable" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_retoreScrollPositions" returns="void">
              <description>Private property
Restores scroll positions to stored value.</description>
            </function>
            <function name="_runRenderChain" returns="void">
              <description>Private property
Internal wrapper calls run() on render Chain instance.</description>
            </function>
            <function name="_setOverhangValue" returns="void">
              <description>Private property
Sets Column header overhang to given width.</description>
              <params>
                <param name="nBorderWidth" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_storeScrollPositions" returns="void">
              <description>Private property
Stores scroll positions so they can be restored after a render.</description>
            </function>
            <function name="_syncScroll" returns="void">
              <description>Private property
Syncs padding around scrollable tables, including Column header right-padding
and container width and height.</description>
            </function>
            <function name="_syncScrollOverhang" returns="void">
              <description>Private property
Adds/removes Column header overhang as necesary.</description>
            </function>
            <function name="_syncScrollX" returns="void">
              <description>Private property
Snaps container height for x-scrolling tables in IE. Syncs message TBODY width.</description>
            </function>
            <function name="_syncScrollY" returns="void">
              <description>Private property
Snaps container width for y-scrolling tables.</description>
            </function>
            <function name="_validateColumnWidth" returns="void">
              <description>Private property
Helper function calculates and sets a validated width for a Column in a ScrollingDataTable.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="elTd" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="disable" returns="void">
              <description>Disables ScrollingDataTable UI.</description>
            </function>
            <function name="getBdContainerEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's scrolling body container element.</description>
            </function>
            <function name="getBdTableEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's scrolling body TABLE element.</description>
            </function>
            <function name="getHdContainerEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's fixed header container element.</description>
            </function>
            <function name="getHdTableEl" returns="HTMLElement">
              <description>Returns DOM reference to the DataTable's fixed header TABLE element.</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Private property
Implementation of Element's abstract method. Sets up config values.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="insertColumn" returns="YAHOO.widget.Column">
              <description>Inserts given Column at the index if given, otherwise at the end. NOTE: You
can only add non-nested Columns and top-level parent Columns. You cannot add
a nested Column to an existing parent.</description>
              <params>
                <param name="oColumn" type="Object | YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onColumnChange" returns="void">
              <description>Handles Column mutations</description>
              <params>
                <param name="oArgs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeColumn" returns="YAHOO.widget.Column">
              <description>Removes given Column. NOTE: You cannot remove nested Columns. You can only remove
non-nested Columns, and top-level parent Columns (which will remove all
children Columns).</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="reorderColumn" returns="void">
              <description>Removes given Column and inserts into given tree index. NOTE: You
can only reorder non-nested Columns and top-level parent Columns. You cannot
reorder a nested Column to an existing parent.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setColumnWidth" returns="void">
              <description>Sets given Column to given pixel width. If new width is less than minWidth
width, sets to minWidth. Updates oColumn.width value.</description>
              <params>
                <param name="oColumn" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
                <param name="nWidth" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="showTableMessage" returns="void">
              <description>Displays message within secondary TBODY.</description>
              <params>
                <param name="sHTML" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sClassName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="validateColumnWidths" returns="void">
              <description>For one or all Columns of a ScrollingDataTable, when Column is not hidden,
and width is not set, syncs widths of header and body cells and
validates that width against minWidth and/or maxAutoWidth as necessary.</description>
              <params>
                <param name="column" type="YAHOO.widget.Column" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="ScrollingDataTable" returns="YAHOO.widget.ScrollingDataTable">
              <description>Class YAHOO.widget.ScrollingDataTable constructor
The ScrollingDataTable class extends the DataTable class to provide
functionality for x-scrolling, y-scrolling, and xy-scrolling.</description>
              <params>
                <param name="elContainer" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="aColumnDefs" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oDataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfigs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Series" extends="Object" private="True">
          <description>Functionality common to most series. Generally, a Series
object shouldn't be instantiated directly. Instead, a subclass with a
concrete implementation should be used.</description>
          <attributes>
            <attribute name="displayName" type="String" readonly="False">
              <description>The human-readable name of the series.</description>
            </attribute>
            <attribute name="type" type="String" readonly="False">
              <description>The type of series.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="Series" returns="YAHOO.widget.Series">
              <description>Class YAHOO.widget.Series constructor
Functionality common to most series. Generally, a Series
object shouldn't be instantiated directly. Instead, a subclass with a
concrete implementation should be used.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.SimpleDialog" extends="YAHOO.widget.Dialog" private="True">
          <description>SimpleDialog is a simple implementation of Dialog that can be used to
submit a single value. Forms can be processed in 3 ways -- via an
asynchronous Connection utility call, a simple form POST or GET,
or manually.</description>
          <attributes>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the SimpleDialog's configuration properties</description>
            </attribute>
            <attribute name="CSS_SIMPLEDIALOG" type="String" readonly="False">
              <description>Constant representing the default CSS class used for a SimpleDialog</description>
            </attribute>
            <attribute name="ICON_ALARM" type="String" readonly="False">
              <description>Constant for the standard network icon for alarm</description>
            </attribute>
            <attribute name="ICON_BLOCK" type="String" readonly="False">
              <description>Constant for the standard network icon for a blocking action</description>
            </attribute>
            <attribute name="ICON_CSS_CLASSNAME" type="String" readonly="False">
              <description>Constant representing the name of the CSS class applied to the element
created by the "icon" configuration property.</description>
            </attribute>
            <attribute name="ICON_HELP" type="String" readonly="False">
              <description>Constant for the standard network icon for help</description>
            </attribute>
            <attribute name="ICON_INFO" type="String" readonly="False">
              <description>Constant for the standard network icon for info</description>
            </attribute>
            <attribute name="ICON_TIP" type="String" readonly="False">
              <description>Constant for the standard network icon for a tip</description>
            </attribute>
            <attribute name="ICON_WARN" type="String" readonly="False">
              <description>Constant for the standard network icon for warn</description>
            </attribute>
          </attributes>
          <functions>
            <function name="configIcon" returns="void">
              <description>Fired when the "icon" property is set.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The CustomEvent type (usually the property name)</description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>The CustomEvent type (usually the property name)</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>The CustomEvent type (usually the property name)</description>
                </param>
              </params>
            </function>
            <function name="configText" returns="void">
              <description>Fired when the "text" property is set.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The CustomEvent arguments. For configuration
handlers, args[0] will equal the newly applied value for the property.</description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>The CustomEvent arguments. For configuration
handlers, args[0] will equal the newly applied value for the property.</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>The CustomEvent arguments. For configuration
handlers, args[0] will equal the newly applied value for the property.</description>
                </param>
              </params>
            </function>
            <function name="init" returns="void">
              <description>The SimpleDialog initialization method, which is executed for
SimpleDialog and all of its subclasses. This method is automatically
called by the constructor, and  sets up all DOM references for
pre-existing markup, and creates required markup if it is not
already present.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>The configuration object literal
containing the configuration that should be set for this
SimpleDialog. See configuration documentation for more details.</description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>The configuration object literal
containing the configuration that should be set for this
SimpleDialog. See configuration documentation for more details.</description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>The configuration object literal
containing the configuration that should be set for this
SimpleDialog. See configuration documentation for more details.</description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be changed
using the SimpleDialog's Config object (cfg).</description>
            </function>
            <function name="registerForm" returns="void">
              <description>Prepares the SimpleDialog's internal FORM object, creating one if one
is not currently present, and adding the value hidden field.</description>
            </function>
            <function name="setBody" returns="void">
              <description>Sets the SimpleDialog's body content to the HTML specified.
If no body is present, one will be automatically created.
An empty string can be passed to the method to clear the contents of the body.

NOTE: SimpleDialog provides the text
and icon configuration properties to set the contents
of it's body element in accordance with the UI design for a SimpleDialog (an
icon and message text). Calling setBody on the SimpleDialog will not enforce this
UI design constraint and will replace the entire contents of the SimpleDialog body.
It should only be used if you wish the replace the default icon/text body structure
of a SimpleDialog with your own custom markup.</description>
              <params>
                <param name="bodyContent" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bodyContent" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="bodyContent" type="DocumentFragment" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="SimpleDialog" returns="YAHOO.widget.SimpleDialog">
              <description>Class YAHOO.widget.SimpleDialog constructor
SimpleDialog is a simple implementation of Dialog that can be used to
submit a single value. Forms can be processed in 3 ways -- via an
asynchronous Connection utility call, a simple form POST or GET,
or manually.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.SimpleEditor" extends="YAHOO.util.Element" private="True">
          <description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
          <attributes>
            <attribute name="_alwaysDisabled" type="Object" readonly="False">
              <description>Private property
The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.</description>
            </attribute>
            <attribute name="_alwaysEnabled" type="Object" readonly="False">
              <description>Private property
The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.</description>
            </attribute>
            <attribute name="_baseHREF" type="String" readonly="False">
              <description>Private property
The base location of the editable page (this page) so that relative paths for image work.</description>
            </attribute>
            <attribute name="_blankImageLoaded" type="Boolean" readonly="False">
              <description>Private property
Don't load the blank image more than once..</description>
            </attribute>
            <attribute name="_contentTimer" type="object" readonly="False">
              <description>Private property
setTimeout holder for documentReady check</description>
            </attribute>
            <attribute name="_contentTimerCounter" type="Number" readonly="False">
              <description>Private property
Counter to check the number of times the body is polled for before giving up</description>
            </attribute>
            <attribute name="_defaultCSS" type="String" readonly="False">
              <description>The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }</description>
            </attribute>
            <attribute name="_defaultToolbar" type="Object" readonly="False">
              <description>Private property
Default toolbar config.</description>
            </attribute>
            <attribute name="_disabled" type="Array" readonly="False">
              <description>Private property
The Toolbar items that should be disabled if there is no selection present in the editor.</description>
            </attribute>
            <attribute name="_docType" type="String" readonly="False">
              <description>The DOCTYPE to use in the editable container.</description>
            </attribute>
            <attribute name="_fixNodesTimer" type="Date" readonly="False">
              <description>Private property
Holder for the fixNodes timer</description>
            </attribute>
            <attribute name="_focused" type="Boolean" readonly="False">
              <description>Private property
Holder for trapping focus/blur state and prevent double events</description>
            </attribute>
            <attribute name="_formButtonClicked" type="HTMLElement" readonly="False">
              <description>Private property
The form button that was clicked to submit the form.</description>
            </attribute>
            <attribute name="_formButtons" type="Array" readonly="False">
              <description>Private property
Array of buttons that are in the Editor's parent form (for handleSubmit)</description>
            </attribute>
            <attribute name="_keyMap" type="{Object/Mixed}" readonly="False">
              <description>Private property
Named key maps for various actions in the Editor. Example: CLOSE_WINDOW: { key: 87, mods: ['shift', 'ctrl'] }.
This entry shows that when key 87 (W) is found with the modifiers of shift and control, the window will close. You can customize this object to tweak keyboard shortcuts.</description>
            </attribute>
            <attribute name="_lastButton" type="Object" readonly="False">
              <description>Private property
The last button pressed, so we don't disable it.</description>
            </attribute>
            <attribute name="_lastCommand" type="String" readonly="False">
              <description>Private property
A cache of the last execCommand (used for Undo/Redo so they don't mark an undo level)</description>
            </attribute>
            <attribute name="_lastImage" type="HTMLElement" readonly="False">
              <description>Private property
Safari reference for the last image selected (for styling as selected).</description>
            </attribute>
            <attribute name="_lastNodeChange" type="Date" readonly="False">
              <description>Private property
Flag to determine when the last node change was fired</description>
            </attribute>
            <attribute name="_lastNodeChangeEvent" type="Event" readonly="False">
              <description>Private property
Flag to determine the last event that fired a node change</description>
            </attribute>
            <attribute name="_mask" type="Object" readonly="False">
              <description>Private property
DOM Element holder for the editor Mask when disabled</description>
            </attribute>
            <attribute name="_nodeChangeTimer" type="Number" readonly="False">
              <description>Private property
Holds a reference to the nodeChange setTimeout call</description>
            </attribute>
            <attribute name="_rendered" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if editor has been rendered or not</description>
            </attribute>
            <attribute name="_resizeConfig" type="object" readonly="False">
              <description>Private property
The default config for the Resize Utility</description>
            </attribute>
            <attribute name="_selection" type="Object" readonly="False">
              <description>Private property
Holder for caching iframe selections</description>
            </attribute>
            <attribute name="_semantic" type="Object" readonly="False">
              <description>Private property
The Toolbar commands that we should attempt to make tags out of instead of using styles.</description>
            </attribute>
            <attribute name="_showingHiddenElements" type="Boolean" readonly="False">
              <description>Private property
Status of the hidden elements button</description>
            </attribute>
            <attribute name="_tag2cmd" type="Object" readonly="False">
              <description>Private property
A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.</description>
            </attribute>
            <attribute name="_textarea" type="Boolean" readonly="False">
              <description>Flag to determine if we are using a textarea or an HTML Node.</description>
            </attribute>
            <attribute name="afterElement" type="HTMLElement" readonly="False">
              <description>A reference to the H2 placed after the editor for Accessibilty.</description>
            </attribute>
            <attribute name="beforeElement" type="HTMLElement" readonly="False">
              <description>A reference to the H2 placed before the editor for Accessibilty.</description>
            </attribute>
            <attribute name="browser" type="Object" readonly="False">
              <description>Standard browser detection</description>
            </attribute>
            <attribute name="CLASS_CONTAINER" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to the editors container element</description>
            </attribute>
            <attribute name="CLASS_EDITABLE" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to the editors iframe element</description>
            </attribute>
            <attribute name="CLASS_EDITABLE_CONT" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to the editors iframe's parent element</description>
            </attribute>
            <attribute name="CLASS_NOEDIT" type="String" readonly="False">
              <description>Protected property
CSS class applied to elements that are not editable.</description>
            </attribute>
            <attribute name="CLASS_PREFIX" type="String" readonly="False">
              <description>Protected property
Default prefix for dynamically created class names</description>
            </attribute>
            <attribute name="currentElement" type="Array" readonly="False">
              <description>A reference to the current working element in the editor</description>
            </attribute>
            <attribute name="currentEvent" type="Event" readonly="False">
              <description>A reference to the current editor event</description>
            </attribute>
            <attribute name="currentFont" type="HTMLElement" readonly="False">
              <description>A reference to the last font selected from the Toolbar</description>
            </attribute>
            <attribute name="currentWindow" type="Object" readonly="False">
              <description>A reference to the currently open EditorWindow</description>
            </attribute>
            <attribute name="dd" type="YAHOO.util.DD/YAHOO.util.DDProxy" readonly="False">
              <description>A reference to the DragDrop object.</description>
            </attribute>
            <attribute name="dompath" type="HTMLElement" readonly="False">
              <description>A reference to the dompath container for writing the current working dom path to.</description>
            </attribute>
            <attribute name="DOMReady" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if DOM is ready or not</description>
            </attribute>
            <attribute name="editorDirty" type="Boolean" readonly="False">
              <description>This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.</description>
            </attribute>
            <attribute name="invalidHTML" type="Object" readonly="False">
              <description>Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to "{ keepContents: true }", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.</description>
            </attribute>
            <attribute name="operaEvent" type="Object" readonly="False">
              <description>Private property
setTimeout holder for Opera and Image DoubleClick event..</description>
            </attribute>
            <attribute name="resize" type="YAHOO.util.Resize" readonly="False">
              <description>A reference to the Resize object</description>
            </attribute>
            <attribute name="SEP_DOMPATH" type="String" readonly="False">
              <description>The value to place in between the Dom path items</description>
            </attribute>
            <attribute name="STOP_EXEC_COMMAND" type="Boolean" readonly="False">
              <description>Protected property
Set to true when you want the default execCommand function to not process anything</description>
            </attribute>
            <attribute name="STOP_NODE_CHANGE" type="Boolean" readonly="False">
              <description>Protected property
Set to true when you want the default nodeChange function to not process anything</description>
            </attribute>
            <attribute name="STR_BEFORE_EDITOR" type="String" readonly="False">
              <description>The accessibility string for the element before the iFrame</description>
            </attribute>
            <attribute name="STR_IMAGE_HERE" type="String" readonly="False">
              <description>The text to place in the URL textbox when using the blankimage.</description>
            </attribute>
            <attribute name="STR_IMAGE_URL" type="String" readonly="False">
              <description>The label string for Image URL</description>
            </attribute>
            <attribute name="STR_LEAVE_EDITOR" type="String" readonly="False">
              <description>The accessibility string for the element after the iFrame</description>
            </attribute>
            <attribute name="STR_LINK_URL" type="String" readonly="False">
              <description>The label string for the Link URL.</description>
            </attribute>
            <attribute name="STR_TITLE" type="String" readonly="False">
              <description>The Title of the HTML document that is created in the iFrame</description>
            </attribute>
            <attribute name="toolbar" type="YAHOO.widget.Toolbar" readonly="False">
              <description>Local property containing the YAHOO.widget.Toolbar instance</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_checkKey" returns="Boolean">
              <description>Private property
Checks a keyMap entry against a key event</description>
              <params>
                <param name="k" type="Object" optional="False">
                  <description>The _keyMap object</description>
                </param>
                <param name="e" type="Event" optional="False">
                  <description>The _keyMap object</description>
                </param>
              </params>
            </function>
            <function name="_checkLoaded" returns="void">
              <description>Private property
Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.</description>
            </function>
            <function name="_cleanClassName" returns="String">
              <description>Private property
Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.</description>
              <params>
                <param name="str" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_cleanIncomingHTML" returns="String">
              <description>Process the HTML with a few regexes to clean it up and stabilize the input</description>
              <params>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_closeWindow" returns="void">
              <description>Private property
Override Method for Advanced Editor</description>
            </function>
            <function name="_createCurrentElement" returns="void">
              <description>Private property
This is a work around for the various browser issues with execCommand. This method will run execCommand('fontname', false, 'yui-tmp') on the given selection.
It will then search the document for an element with the font-family set to yui-tmp and replace that with another span that has other information in it, then assign the new span to the
this.currentElement array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.</description>
              <params>
                <param name="tagName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tagStyle" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_createIframe" returns="Object">
              <description>Private property
_createIframe</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_createInsertElement" returns="HTMLElement">
              <description>Private property
Creates a new "currentElement" then adds some text (and other things) to make it selectable and stylable. Then the user can continue typing.</description>
              <params>
                <param name="css" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_disableEditor" returns="void">
              <description>Private property
Creates a mask to place over the Editor.</description>
              <params>
                <param name="disabled" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_fixNodes" returns="void">
              <description>Private property
Fix href and imgs as well as remove invalid HTML.</description>
            </function>
            <function name="_focusWindow" returns="void">
              <description>Private property
Attempt to set the focus of the iframes window.</description>
            </function>
            <function name="_getBlankImage" returns="String">
              <description>Private property
Retrieves the full url of the image to use as the blank image.</description>
            </function>
            <function name="_getDoc" returns="Object">
              <description>Private property
Get the Document of the IFRAME</description>
            </function>
            <function name="_getDomPath" returns="Array">
              <description>Private property
This method will attempt to build the DOM path from the currently selected element.</description>
              <params>
                <param name="HTMLElement" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_getRange" returns="Object">
              <description>Private property
Handles the different range objects across the A-Grade list.</description>
            </function>
            <function name="_getSelectedElement" returns="HTMLElement">
              <description>Private property
This method will attempt to locate the element that was last interacted with, either via selection, location or event.</description>
            </function>
            <function name="_getSelection" returns="Object">
              <description>Private property
Handles the different selection objects across the A-Grade list.</description>
            </function>
            <function name="_getWindow" returns="Object">
              <description>Private property
Get the Window of the IFRAME</description>
            </function>
            <function name="_handleAfterNodeChange" returns="void">
              <description>Private property
Fires after a nodeChange happens to setup the things that where reset on the node change (button state).</description>
            </function>
            <function name="_handleAlign" returns="void">
              <description>Private property
Handles the alignment buttons in the toolbar.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleAutoHeight" returns="void">
              <description>Private property
Handles resizing the editor's height based on the content</description>
            </function>
            <function name="_handleBlur" returns="void">
              <description>Private property
Handles the blur of the iframe. Note, this is window blur event, not an Editor blur event.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleClick" returns="void">
              <description>Private property
Handles all click events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleColorPicker" returns="void">
              <description>Private property
Handles the colorpicker buttons in the toolbar.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleCreateLinkClick" returns="void">
              <description>Private property
Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.</description>
            </function>
            <function name="_handleCreateLinkWindowClose" returns="void">
              <description>Private property
Handles the closing of the Link Properties Window.</description>
            </function>
            <function name="_handleDoubleClick" returns="void">
              <description>Private property
Handles all doubleclick events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleFocus" returns="void">
              <description>Private property
Handles the focus of the iframe. Note, this is window focus event, not an Editor focus event.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleFontSize" returns="void">
              <description>Private property
Handles the font size button in the toolbar.</description>
              <params>
                <param name="o" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleFormButtonClick" returns="void">
              <description>Private property
The click listener assigned to each submit button in the Editor's parent form.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleFormSubmit" returns="void">
              <description>Private property
Handles the form submission.</description>
              <params>
                <param name="ev" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleInsertImageClick" returns="void">
              <description>Private property
Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.</description>
            </function>
            <function name="_handleInsertImageWindowClose" returns="void">
              <description>Private property
Handles the closing of the Image Properties Window.</description>
            </function>
            <function name="_handleKeyDown" returns="void">
              <description>Private property
Handles all keydown events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleKeyPress" returns="void">
              <description>Private property
Handles all keypress events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleKeyUp" returns="void">
              <description>Private property
Handles all keyup events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseDown" returns="void">
              <description>Private property
Handles all mousedown events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleMouseUp" returns="void">
              <description>Private property
Handles all mouseup events inside the iFrame document.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleToolbarClick" returns="void">
              <description>Private property
This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_hasParent" returns="void">
              <description>Private property
_hasParent</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_hasSelection" returns="Boolean">
              <description>Private property
Determines if there is a selection in the editor document.</description>
            </function>
            <function name="_initEditor" returns="void">
              <description>Private property
This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.</description>
            </function>
            <function name="_initEditorEvents" returns="void">
              <description>Private property
This method sets up the listeners on the Editors document.</description>
            </function>
            <function name="_isElement" returns="Boolean">
              <description>Private property
_isElement</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tag" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_isLocalFile" returns="void">
              <description>Private property
Checks to see if a string (href or img src) is possibly a local file reference..</description>
              <params>
                <param name="url" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_isNonEditable" returns="void">
              <description>Private property
Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.
If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also
disable and enable the Editor's toolbar based on the noedit state.</description>
              <params>
                <param name="Event" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_listFix" returns="void">
              <description>Private property
Handles the Enter key, Tab Key and Shift + Tab keys for List Items.</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_nodeChange" returns="void">
              <description>Private property
Fired from nodeChange in a setTimeout.</description>
              <params>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_removeEditorEvents" returns="void">
              <description>Private property
This method removes the listeners on the Editors document (for disabling).</description>
            </function>
            <function name="_render" returns="void">
              <description>Private property
Causes the toolbar and the editor to render and replace the textarea.</description>
            </function>
            <function name="_selectNode" returns="void">
              <description>Private property
Places the highlight around a given node</description>
              <params>
                <param name="node" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setCurrentEvent" returns="void">
              <description>Private property
Sets the current event property</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setDesignMode" returns="void">
              <description>Private property
Sets the designMode of the iFrame document.</description>
              <params>
                <param name="state" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setEditorStyle" returns="void">
              <description>Set the editor to use CSS instead of HTML</description>
              <params>
                <param name="stat" type="Booleen" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setInitialContent" returns="void">
              <description>Private property
This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.</description>
            </function>
            <function name="_setMarkupType" returns="void">
              <description>Private property
This method will turn on/off the useCSS execCommand.</description>
              <params>
                <param name="action" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_setupAfterElement" returns="void">
              <description>Private property
Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.</description>
            </function>
            <function name="_setupDD" returns="void">
              <description>Private property
Sets up the DD instance used from the 'drag' config option.</description>
            </function>
            <function name="_setupResize" returns="void">
              <description>Private property
Creates the Resize instance and binds its events.</description>
            </function>
            <function name="_swapEl" returns="void">
              <description>Private property
This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="tagName" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_toggleDesignMode" returns="String">
              <description>Private property
Toggles the designMode of the iFrame document on and off.</description>
            </function>
            <function name="_updateMenuChecked" returns="void">
              <description>Private property
Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.</description>
              <params>
                <param name="button" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="The" type="YAHOO.widget.Toolbar" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_writeDomPath" returns="void">
              <description>Private property
Write the current DOM path out to the dompath container below the editor.</description>
            </function>
            <function name="cleanHTML" returns="String">
              <description>Process the HTML with a few regexes to clean it up and stabilize the output</description>
              <params>
                <param name="html" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="clearEditorDoc" returns="void">
              <description>Clear the doc of the Editor</description>
            </function>
            <function name="closeWindow" returns="void">
              <description>Override Method for Advanced Editor</description>
            </function>
            <function name="cmd_backcolor" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_bold" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('bold') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_createlink" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_fontname" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_fontsize" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_forecolor" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_inserthtml" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_insertimage" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_insertorderedlist" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_insertunorderedlist" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_italic" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('italic') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_list" returns="void">
              <description>This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.</description>
              <params>
                <param name="tag" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_underline" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('underline') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="cmd_unlink" returns="void">
              <description>This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.</description>
              <params>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="Boolean">
              <description>Destroys the editor, all of it's elements and objects.</description>
            </function>
            <function name="execCommand" returns="void">
              <description>This method attempts to try and level the differences in the various browsers and their support for execCommand actions</description>
              <params>
                <param name="action" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_all_rgb" returns="void">
              <description>Converts all RGB color strings found in passed string to a hex color, example: style="color: rgb(0, 255, 0)" converts to style="color: #00ff00"</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_internals" returns="void">
              <description>Filters internal RTE strings and bogus attrs we don't want</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_invalid_lists" returns="void">
              <description>Filters invalid ol and ul list markup, converts this: .. to this: ..</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_msword" returns="void">
              <description>Filters out msword html attributes and other junk. Activate with filterWord: true in config</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_rgb" returns="void">
              <description>Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="filter_safari" returns="void">
              <description>Filters strings specific to Safari</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Attempt to set the focus of the iframes window.</description>
            </function>
            <function name="getEditorHTML" returns="void">
              <description>Gets the unprocessed/unfiltered HTML from the editor</description>
            </function>
            <function name="hide" returns="void">
              <description>This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.</description>
            </function>
            <function name="init" returns="void">
              <description>The Editor class' initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to create
the editor.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="moveWindow" returns="void">
              <description>Override Method for Advanced Editor</description>
            </function>
            <function name="nodeChange" returns="void">
              <description>Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.</description>
              <params>
                <param name="force" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="openWindow" returns="void">
              <description>Override Method for Advanced Editor</description>
            </function>
            <function name="post_filter_linebreaks" returns="void">
              <description>HTML Pre Filter</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="pre_filter_linebreaks" returns="void">
              <description>HTML Pre Filter</description>
              <params>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="String" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="void">
              <description>Calls the private method _render in a setTimeout to allow for other things on the page to continue to load.</description>
            </function>
            <function name="saveHTML" returns="void">
              <description>Cleans the HTML with the cleanHTML method then places that string back into the textarea.</description>
            </function>
            <function name="setEditorHTML" returns="void">
              <description>Loads HTML into the editors body</description>
              <params>
                <param name="incomingHTML" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="show" returns="void">
              <description>This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.</description>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the editor.</description>
            </function>
            <function name="SimpleEditor" returns="YAHOO.widget.SimpleEditor">
              <description>Class YAHOO.widget.SimpleEditor constructor
The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Slider" extends="YAHOO.util.DragDrop" private="True">
          <description>A DragDrop implementation that can be used as a background for a
slider.  It takes a reference to the thumb instance
so it can delegate some of the events to it.  The goal is to make the
thumb jump to the location on the background when the background is
clicked.</description>
          <attributes>
            <attribute name="_mouseDown" type="boolean" readonly="False">
              <description>Private property
Tracks the state of the mouse button to aid in when events are fired.</description>
            </attribute>
            <attribute name="_silent" type="boolean" readonly="False">
              <description>Private property
Indicates whether or not events will be supressed for the current
slide operation</description>
            </attribute>
            <attribute name="animate" type="boolean" readonly="False">
              <description>Flag that determines if the thumb will animate when moved</description>
            </attribute>
            <attribute name="animationDuration" type="int" readonly="False">
              <description>If animation is configured, specifies the length of the animation
in seconds.</description>
            </attribute>
            <attribute name="backgroundEnabled" type="boolean" readonly="False">
              <description>Set to false to disable a background click thumb move</description>
            </attribute>
            <attribute name="baselinePos" type="[int, int]" readonly="False">
              <description>The basline position of the background element, used
to determine if the background has moved since the last
operation.</description>
            </attribute>
            <attribute name="dragOnly" type="boolean" readonly="False">
              <description>Override the default setting of dragOnly to true.</description>
            </attribute>
            <attribute name="enableKeys" type="boolean" readonly="False">
              <description>Enables the arrow, home and end keys, defaults to true.</description>
            </attribute>
            <attribute name="isTarget" type="object" readonly="False">
              <description>Private property
Overrides the isTarget property in YAHOO.util.DragDrop</description>
            </attribute>
            <attribute name="keyIncrement" type="int" readonly="False">
              <description>Specifies the number of pixels the arrow keys will move the slider.
Default is 20.</description>
            </attribute>
            <attribute name="lastOffset" type="[int, int]" readonly="False">
              <description>Saved offset used to protect against NaN problems when slider is
set to display:none</description>
            </attribute>
            <attribute name="moveComplete" type="Boolean" readonly="False">
              <description>moveComplete is set to true when the slider has moved to its final
destination.  For animated slider, this value can be checked in
the onChange handler to make it possible to execute logic only
when the move is complete rather than at all points along the way.
Deprecated because this flag is only useful when the background is
clicked and the slider is animated.  If the user drags the thumb,
the flag is updated when the drag is over ... the final onDrag event
fires before the mouseup the ends the drag, so the implementer will
never see it.</description>
            </attribute>
            <attribute name="ANIM_AVAIL" type="boolean" readonly="False">
              <description>By default, animation is available if the animation utility is detected.</description>
            </attribute>
            <attribute name="SOURCE_KEY_EVENT" type="object" readonly="False">
              <description>Constant for valueChangeSource, indicating that the value was altered
by hitting any of the supported keyboard characters.</description>
            </attribute>
            <attribute name="SOURCE_SET_VALUE" type="object" readonly="False">
              <description>Constant for valueChangeSource, indicating that the value was altered
by a programmatic call to setValue/setRegionValue.</description>
            </attribute>
            <attribute name="SOURCE_UI_EVENT" type="object" readonly="False">
              <description>Constant for valueChangeSource, indicating that the user clicked or
dragged the slider to change the value.</description>
            </attribute>
            <attribute name="SOURCE_SET_VALUE" type="object" readonly="False">
              <description>Constant for valueChangeSource, indicating that the value was altered
by a programmatic call to setValue/setRegionValue.</description>
            </attribute>
            <attribute name="SOURCE_UI_EVENT" type="object" readonly="False">
              <description>Constant for valueChangeSource, indicating that the user clicked or
dragged the slider to change the value.</description>
            </attribute>
            <attribute name="thumb" type="YAHOO.widget.SliderThumb" readonly="False">
              <description>A YAHOO.widget.SliderThumb instance that we will use to
reposition the thumb when the background is clicked</description>
            </attribute>
            <attribute name="thumbCenterPoint" type="{&quot;x&quot;: int, &quot;y&quot;: int}" readonly="False">
              <description>The center of the slider element is stored so we can
place it in the correct position when the background is clicked.</description>
            </attribute>
            <attribute name="tickPause" type="int" readonly="False">
              <description>Adjustment factor for tick animation, the more ticks, the
faster the animation (by default)</description>
            </attribute>
            <attribute name="type" type="string" readonly="False">
              <description>The type of the slider (horiz, vert, region)</description>
            </attribute>
            <attribute name="valueChangeSource" type="int" readonly="False">
              <description>When the slider value changes, this property is set to identify where
the update came from.  This will be either 1, meaning the slider was
clicked or dragged, or 2, meaning that it was set via a setValue() call.
This can be used within event handlers to apply some of the logic only
when dealing with one source or another.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_bindKeyEvents" returns="void">
              <description>Protected property
Sets up the listeners for keydown and key press events.</description>
            </function>
            <function name="_getNextX" returns="void">
              <description>Private property
Returns the next X tick value based on the current coord and the target coord.</description>
            </function>
            <function name="_getNextY" returns="void">
              <description>Private property
Returns the next Y tick value based on the current coord and the target coord.</description>
            </function>
            <function name="_setRegionValue" returns="boolean">
              <description>Protected property
Worker function to execute the value set operation.  Accepts type of
set operation in addition to the usual setValue params.</description>
              <params>
                <param name="source" type="int" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
                <param name="newOffset" type="int" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
                <param name="newOffset2" type="int" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>set to true to disable the animation
for this move action (but not others).</description>
                </param>
              </params>
            </function>
            <function name="_setValue" returns="boolean">
              <description>Protected property
Worker function to execute the value set operation.  Accepts type of
set operation in addition to the usual setValue params.</description>
              <params>
                <param name="source" type="int" optional="False">
                  <description>when true, do not fire events</description>
                </param>
                <param name="newOffset" type="int" optional="False">
                  <description>when true, do not fire events</description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>when true, do not fire events</description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>when true, do not fire events</description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>when true, do not fire events</description>
                </param>
              </params>
            </function>
            <function name="b4MouseDown" returns="void">
              <description>Private property
Resets the constraints before moving the thumb.</description>
            </function>
            <function name="endMove" returns="void">
              <description>Private property
Fired when the slider movement ends</description>
            </function>
            <function name="fireEvents" returns="void">
              <description>Private property
Fires the change event if the value has been changed.  Ignored if we are in
the middle of an animation as the event will fire when the animation is
complete</description>
              <params>
                <param name="thumbEvent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="focus" returns="void">
              <description>Private property
Try to focus the element when clicked so we can add
accessibility features</description>
            </function>
            <function name="getThumb" returns="SliderThumb">
              <description>Returns a reference to this slider's thumb</description>
            </function>
            <function name="getValue" returns="int">
              <description>Returns the slider's thumb offset from the start position</description>
            </function>
            <function name="getXValue" returns="int">
              <description>Returns the slider's thumb X offset from the start position</description>
            </function>
            <function name="getYValue" returns="int">
              <description>Returns the slider's thumb Y offset from the start position</description>
            </function>
            <function name="handleKeyDown" returns="void">
              <description>Executed when a keydown event happens with the control focused.
Updates the slider value and display when the keypress is an
arrow key, home, or end as long as enableKeys is set to true.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="handleKeyPress" returns="void">
              <description>Executed when a keypress event happens with the control focused.
Prevents the default behavior for navigation keys.  The actual
logic for moving the slider thumb in response to a key event
happens in handleKeyDown.</description>
              <params>
                <param name="e" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initSlider" returns="void">
              <description>Initializes the slider.  Executed in the constructor</description>
              <params>
                <param name="sType" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initThumb" returns="void">
              <description>Initializes the slider's thumb. Executed in the constructor.</description>
              <params>
                <param name="t" type="YAHOO.widget.SliderThumb" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="lock" returns="void">
              <description>Locks the slider, overrides YAHOO.util.DragDrop</description>
            </function>
            <function name="moveOneTick" returns="void">
              <description>Private property
Move the slider one tick mark towards its final coordinate.  Used
for the animation when tick marks are defined</description>
              <params>
                <param name="the" type="int[]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="moveThumb" returns="void">
              <description>Private property
Move the associated slider moved to a timeout to try to get around the
mousedown stealing moz does when I move the slider element between the
cursor and the background during the mouseup event</description>
              <params>
                <param name="x" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="y" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="midMove" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onAvailable" returns="void">
              <description>Executed when the slider element is available</description>
            </function>
            <function name="onChange" returns="void">
              <description>Event that fires when the value of the slider has changed</description>
              <params>
                <param name="firstOffset" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="secondOffset" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onDrag" returns="void">
              <description>Private property
Handles the onDrag event for the slider background</description>
            </function>
            <function name="onMouseDown" returns="void">
              <description>Private property
Handles the mousedown event for the slider background</description>
            </function>
            <function name="onSliderEnd" returns="void">
              <description>Event that fires at the end of a slider thumb move</description>
            </function>
            <function name="onSlideStart" returns="void">
              <description>Event that fires when the at the beginning of the slider thumb move</description>
            </function>
            <function name="resetThumbConstraints" returns="void">
              <description>Protected property
Resets the X and Y contraints for the thumb.  Used in lieu of the thumb
instance's inherited resetConstraints because some logic was not
applicable.</description>
            </function>
            <function name="setRegionValue" returns="boolean">
              <description>Provides a way to set the value of the region slider in code.</description>
              <params>
                <param name="newOffset" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="newOffset2" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setStartSliderState" returns="void">
              <description>Initialization that sets up the value offsets once the elements are ready</description>
            </function>
            <function name="setThumbCenterPoint" returns="void">
              <description>When the thumb is available, we cache the centerpoint of the element so
we can position the element correctly when the background is clicked</description>
            </function>
            <function name="setValue" returns="boolean">
              <description>Provides a way to set the value of the slider in code.</description>
              <params>
                <param name="newOffset" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="skipAnim" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="force" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
                <param name="silent" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="thumbMouseUp" returns="void">
              <description>Private property
Handles mouseup event on the thumb</description>
            </function>
            <function name="toString" returns="string">
              <description>Slider toString</description>
            </function>
            <function name="unlock" returns="void">
              <description>Unlocks the slider, overrides YAHOO.util.DragDrop</description>
            </function>
            <function name="verifyOffset" returns="boolean">
              <description>Checks the background position element position.  If it has moved from the
baseline position, the constraints for the thumb are reset</description>
              <params>
                <param name="checkPos" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getHorizDualSlider" returns="DualSlider">
              <description>Factory method for creating a horizontal dual-thumb slider</description>
              <params>
                <param name="bg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="minthumb" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxthumb" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="initVals" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getHorizSlider" returns="Slider">
              <description>Factory method for creating a horizontal slider</description>
              <params>
                <param name="sBGElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getSliderRegion" returns="Slider">
              <description>Factory method for creating a slider region like the one in the color
picker example</description>
              <params>
                <param name="sBGElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getVertDualSlider" returns="DualSlider">
              <description>Factory method for creating a vertical dual-thumb slider.</description>
              <params>
                <param name="bg" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="minthumb" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="maxthumb" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="range" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="initVals" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getVertSlider" returns="Slider">
              <description>Factory method for creating a vertical slider</description>
              <params>
                <param name="sBGElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sHandleElId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Slider" returns="YAHOO.widget.Slider">
              <description>Class YAHOO.widget.Slider constructor
A DragDrop implementation that can be used as a background for a
slider.  It takes a reference to the thumb instance
so it can delegate some of the events to it.  The goal is to make the
thumb jump to the location on the background when the background is
clicked.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oThumb" type="SliderThumb" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.SliderThumb" extends="YAHOO.util.DD" private="True">
          <description>A drag and drop implementation to be used as the thumb of a slider.</description>
          <attributes>
            <attribute name="_graduated" type="boolean" readonly="False">
              <description>Private property
The slider is _graduated if there is a tick interval defined</description>
            </attribute>
            <attribute name="_isHoriz" type="boolean" readonly="False">
              <description>Private property
Flag used to figure out if this is a horizontal or vertical slider</description>
            </attribute>
            <attribute name="_prevVal" type="int" readonly="False">
              <description>Private property
Cache the last value so we can check for change</description>
            </attribute>
            <attribute name="dragOnly" type="boolean" readonly="False">
              <description>Override the default setting of dragOnly to true.</description>
            </attribute>
            <attribute name="isTarget" type="object" readonly="False">
              <description>Private property
Overrides the isTarget property in YAHOO.util.DragDrop</description>
            </attribute>
            <attribute name="maintainOffset" type="boolean" readonly="False">
              <description>Private property
Informs the drag and drop util that the offsets should remain when
resetting the constraints.  This preserves the slider value when
the constraints are reset</description>
            </attribute>
            <attribute name="parentElId" type="string" readonly="False">
              <description>The id of the thumbs parent HTML element (the slider background
element).</description>
            </attribute>
            <attribute name="scroll" type="object" readonly="False">
              <description>Private property
Turns off the autoscroll feature in drag and drop</description>
            </attribute>
            <attribute name="startOffset" type="[int, int]" readonly="False">
              <description>The (X and Y) difference between the thumb location and its parent
(the slider background) when the control is instantiated.</description>
            </attribute>
            <attribute name="tickSize" type="int" readonly="False">
              <description>Private property
The tick size for this slider</description>
            </attribute>
          </attributes>
          <functions>
            <function name="clearTicks" returns="void">
              <description>Clear's the slider's ticks</description>
            </function>
            <function name="getOffsetFromParent" returns="void">
              <description>Returns the difference between the location of the thumb and its parent.</description>
              <params>
                <param name="parentPos" type="[int, int]" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getValue" returns="int">
              <description>Gets the current offset from the element's start position in
pixels.</description>
            </function>
            <function name="getXValue" returns="int">
              <description>Gets the current X offset from the element's start position in
pixels.</description>
            </function>
            <function name="getYValue" returns="int">
              <description>Gets the current Y offset from the element's start position in
pixels.</description>
            </function>
            <function name="initSlider" returns="void">
              <description>Set up the slider, must be called in the constructor of all subclasses</description>
              <params>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onChange" returns="void">
              <description>Private property
The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider
instance it belongs to.</description>
            </function>
            <function name="toString" returns="string">
              <description>Thumb toString</description>
            </function>
            <function name="SliderThumb" returns="YAHOO.widget.SliderThumb">
              <description>Class YAHOO.widget.SliderThumb constructor
A drag and drop implementation to be used as the thumb of a slider.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="sGroup" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iLeft" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iRight" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iUp" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iDown" type="int" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iTickSize" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.StackedBarChart" extends="Object" private="True">
          <description>StackedBarChart class for the YUI Charts widget.</description>
          <functions>
            <function name="StackedBarChart" returns="YAHOO.widget.StackedBarChart">
              <description>Class YAHOO.widget.StackedBarChart constructor
StackedBarChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.StackedBarSeries" extends="Object" private="True">
          <description>StackedBarSeries class for the YUI Charts widget.</description>
          <functions>
            <function name="StackedBarSeries" returns="YAHOO.widget.StackedBarSeries">
              <description>Class YAHOO.widget.StackedBarSeries constructor
StackedBarSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.StackedColumnChart" extends="Object" private="True">
          <description>StackedColumnChart class for the YUI Charts widget.</description>
          <functions>
            <function name="StackedColumnChart" returns="YAHOO.widget.StackedColumnChart">
              <description>Class YAHOO.widget.StackedColumnChart constructor
StackedColumnChart class for the YUI Charts widget.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="dataSource" type="YAHOO.util.DataSource" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
                <param name="attributes" type="object" optional="False">
                  <description>Container element for the Flash Player instance.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.StackedColumnSeries" extends="Object" private="True">
          <description>StackedColumnSeries class for the YUI Charts widget.</description>
          <functions>
            <function name="StackedColumnSeries" returns="YAHOO.widget.StackedColumnSeries">
              <description>Class YAHOO.widget.StackedColumnSeries constructor
StackedColumnSeries class for the YUI Charts widget.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Tab" extends="YAHOO.util.Element" private="True">
          <description>A representation of a Tab's label and content.</description>
          <attributes>
            <attribute name="ACTIVE_CLASSNAME" type="String" readonly="False">
              <description>The class name applied to active tabs.</description>
            </attribute>
            <attribute name="ACTIVE_TITLE" type="String" readonly="False">
              <description>The title applied to active tabs.</description>
            </attribute>
            <attribute name="dataConnection" type="Object" readonly="False">
              <description>Provides a reference to the connection request object when data is
loaded dynamically.</description>
            </attribute>
            <attribute name="DISABLED_CLASSNAME" type="String" readonly="False">
              <description>The class name applied to disabled tabs.</description>
            </attribute>
            <attribute name="LABEL_INNER_TAGNAME" type="String" readonly="False">
              <description>The default tag name for a Tab's inner element.</description>
            </attribute>
            <attribute name="loadHandler" type="object" readonly="False">
              <description>Object containing success and failure callbacks for loading data.</description>
            </attribute>
            <attribute name="LOADING_CLASSNAME" type="String" readonly="False">
              <description>The class name applied to dynamic tabs while loading.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="initAttributes" returns="void">
              <description>setAttributeConfigs TabView specific properties.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>Hash of initial attributes</description>
                </param>
              </params>
            </function>
            <function name="toString" returns="void">
              <description>Provides a readable name for the tab.</description>
            </function>
            <function name="Tab" returns="YAHOO.widget.Tab">
              <description>Class YAHOO.widget.Tab constructor
A representation of a Tab's label and content.</description>
              <params>
                <param name="element" type="HTMLElement | String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="properties" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TabView" extends="YAHOO.util.Element" private="True">
          <description>A widget to control tabbed views.</description>
          <attributes>
            <attribute name="_contentParent" type="HTMLElement" readonly="False">
              <description>Private property
The container of the tabView's content elements.</description>
            </attribute>
            <attribute name="_tabParent" type="HTMLElement" readonly="False">
              <description>Private property
The container of the tabView's label elements.</description>
            </attribute>
            <attribute name="CLASSNAME" type="object" readonly="False">
              <description>The className to add when building from scratch.</description>
            </attribute>
            <attribute name="CONTENT_PARENT_CLASSNAME" type="object" readonly="False">
              <description>The className of the HTMLElement containing the TabView's label elements
to look for when building from existing markup, or to add when building
from scratch.
All childNodes of the content container are treated as content elements when
building from existing markup.</description>
            </attribute>
            <attribute name="TAB_PARENT_CLASSNAME" type="object" readonly="False">
              <description>The className of the HTMLElement containing the TabView's tab elements
to look for when building from existing markup, or to add when building
from scratch.
All childNodes of the tab container are treated as Tabs when building
from existing markup.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_initTabs" returns="void">
              <description>Private property
Creates Tab instances from a collection of HTMLElements.</description>
            </function>
            <function name="addTab" returns="void">
              <description>Adds a Tab to the TabView instance.
If no index is specified, the tab is added to the end of the tab list.</description>
              <params>
                <param name="tab" type="YAHOO.widget.Tab" optional="False">
                  <description>The position to add the tab.</description>
                </param>
                <param name="index" type="Integer" optional="False">
                  <description>The position to add the tab.</description>
                </param>
              </params>
            </function>
            <function name="contentTransition" returns="void">
              <description>The transiton to use when switching between tabs.</description>
            </function>
            <function name="deselectTab" returns="void">
              <description>Removes selected state from the given tab if it is the activeTab</description>
              <params>
                <param name="index" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="DOMEventHandler" returns="void">
              <description>Routes childNode events.</description>
              <params>
                <param name="e" type="event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTab" returns="void">
              <description>Returns the Tab instance at the specified index.</description>
              <params>
                <param name="index" type="Integer" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTabIndex" returns="void">
              <description>Returns the index of given tab.</description>
              <params>
                <param name="tab" type="YAHOO.widget.Tab" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initAttributes" returns="void">
              <description>setAttributeConfigs TabView specific properties.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeTab" returns="void">
              <description>Removes the specified Tab from the TabView.</description>
              <params>
                <param name="item" type="YAHOO.widget.Tab" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectTab" returns="void">
              <description>Makes the tab at the given index the active tab</description>
              <params>
                <param name="index" type="Int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="void">
              <description>Provides a readable name for the TabView instance.</description>
            </function>
            <function name="TabView" returns="YAHOO.widget.TabView">
              <description>Class YAHOO.widget.TabView constructor
A widget to control tabbed views.</description>
              <params>
                <param name="el(optional)" type="HTMLElement | String | Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TextareaCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The TextareaCellEditor class provides functionality for inline editing
DataTable cell data with a TEXTAREA element.</description>
          <attributes>
            <attribute name="textarea" type="HTMLElement" readonly="False">
              <description>Reference to textarea element.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in TextareaCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Retrieves input value from TextareaCellEditor.</description>
            </function>
            <function name="handleDisabledBtns" returns="void">
              <description>After rendering form, if disabledBtns is set to true, then sets up a mechanism
to save input without them.</description>
            </function>
            <function name="move" returns="void">
              <description>Moves TextareaCellEditor UI to a cell.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a form with textarea.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets TextareaCellEditor UI to initial state.</description>
            </function>
            <function name="TextareaCellEditor" returns="YAHOO.widget.TextareaCellEditor">
              <description>Class YAHOO.widget.TextareaCellEditor constructor
The TextareaCellEditor class provides functionality for inline editing
DataTable cell data with a TEXTAREA element.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TextboxCellEditor" extends="YAHOO.widget.BaseCellEditor" private="True">
          <description>The TextboxCellEditor class provides functionality for inline editing
DataTable cell data with an INPUT TYPE=TEXT element.</description>
          <attributes>
            <attribute name="Editors" type="Object" readonly="False">
              <description>CellEditor subclasses.</description>
            </attribute>
            <attribute name="textbox" type="object" readonly="False">
              <description>Reference to the textbox element.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="focus" returns="void">
              <description>Sets focus in TextboxCellEditor.</description>
            </function>
            <function name="getInputValue" returns="void">
              <description>Returns new value for TextboxCellEditor.</description>
            </function>
            <function name="move" returns="void">
              <description>Moves TextboxCellEditor UI to a cell.</description>
            </function>
            <function name="renderForm" returns="void">
              <description>Render a form with input type=text.</description>
            </function>
            <function name="resetForm" returns="void">
              <description>Resets TextboxCellEditor UI to initial state.</description>
            </function>
            <function name="TextboxCellEditor" returns="YAHOO.widget.TextboxCellEditor">
              <description>Class YAHOO.widget.TextboxCellEditor constructor
The TextboxCellEditor class provides functionality for inline editing
DataTable cell data with an INPUT TYPE=TEXT element.</description>
              <params>
                <param name="oConfigs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TextNode" extends="YAHOO.widget.Node" private="True">
          <description>The default node presentation.  The first parameter should be
either a string that will be used as the node's label, or an object
that has at least a string property called label.  By default,  clicking the
label will toggle the expanded/collapsed state of the node.  By
setting the href property of the instance, this behavior can be
changed so that the label will go to the specified href.</description>
          <attributes>
            <attribute name="_type" type="string" readonly="False">
              <description>Private property
The node type</description>
            </attribute>
            <attribute name="href" type="string" readonly="False">
              <description>The href for the node's label.  If one is not specified, the href will
be set so that it toggles the node.</description>
            </attribute>
            <attribute name="label" type="string" readonly="False">
              <description>The text for the label.  It is assumed that the oData parameter will
either be a string that will be used as the label, or an object that
has a property called "label" that we will use.</description>
            </attribute>
            <attribute name="labelElId" type="string" readonly="False">
              <description>The derived element id of the label for this node</description>
            </attribute>
            <attribute name="labelStyle" type="string" readonly="False">
              <description>The CSS class for the label href.  Defaults to ygtvlabel, but can be
overridden to provide a custom presentation for a specific node.</description>
            </attribute>
            <attribute name="target" type="string" readonly="False">
              <description>The label href target, defaults to current window</description>
            </attribute>
            <attribute name="title" type="string" readonly="False">
              <description>The text for the title (tooltip) for the label element</description>
            </attribute>
          </attributes>
          <functions>
            <function name="destroyEditorContents" returns="void">
              <description>Destroys the contents of the inline editor panel
Overrides Node.destroyEditorContent
Since we didn't set any event listeners on this inline editor, it is more efficient to avoid the generic method in Node</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>a shortcut to the static object holding editing information</description>
                </param>
              </params>
            </function>
            <function name="fillEditorContainer" returns="void">
              <description>Places an &lt;input&gt;  textbox in the input container and loads the label text into it</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getLabelEl" returns="object">
              <description>Returns the label element</description>
            </function>
            <function name="getNodeDefinition" returns="Object | false">
              <description>Returns an object which could be used to build a tree out of this node and its children.
It can be passed to the tree constructor to reproduce this node as a tree.
It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.</description>
            </function>
            <function name="saveEditorValue" returns="void">
              <description>Saves the value entered in the editor into the TextNode label property and displays it
Overrides Node.saveEditorValue</description>
              <params>
                <param name="editorData" type="YAHOO.widget.TreeView.editorData" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setUpLabel" returns="void">
              <description>Sets up the node label</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TextNode" returns="YAHOO.widget.TextNode">
              <description>Class YAHOO.widget.TextNode constructor
The default node presentation.  The first parameter should be
either a string that will be used as the node's label, or an object
that has at least a string property called label.  By default,  clicking the
label will toggle the expanded/collapsed state of the node.  By
setting the href property of the instance, this behavior can be
changed so that the label will go to the specified href.</description>
              <params>
                <param name="oData" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oParent" type="YAHOO.widget.Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="expanded" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TimeAxis" extends="Object" private="True">
          <description>A type of axis whose units are measured in time-based values.</description>
          <attributes>
            <attribute name="majorTimeUnit" type="String" readonly="False">
              <description>The time unit used by the majorUnit.</description>
            </attribute>
            <attribute name="majorUnit" type="Number" readonly="False">
              <description>The spacing between major intervals on this axis.</description>
            </attribute>
            <attribute name="maximum" type="Number" readonly="False">
              <description>The maximum value drawn by the axis. If not set explicitly, the axis maximum
will be calculated automatically.</description>
            </attribute>
            <attribute name="minimum" type="Date" readonly="False">
              <description>The minimum value drawn by the axis. If not set explicitly, the axis minimum
will be calculated automatically.</description>
            </attribute>
            <attribute name="snapToUnits" type="Boolean" readonly="False">
              <description>If true, the labels, ticks, gridlines, and other objects will snap to
the nearest major or minor unit. If false, their position will be based
on the minimum value.</description>
            </attribute>
            <attribute name="stackingEnabled" type="Boolean" readonly="False">
              <description>Series that are stackable will only stack when this value is set to true.</description>
            </attribute>
          </attributes>
          <functions>
            <function name="TimeAxis" returns="YAHOO.widget.TimeAxis">
              <description>Class YAHOO.widget.TimeAxis constructor
A type of axis whose units are measured in time-based values.</description>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Toolbar" extends="YAHOO.util.Element" private="True">
          <description>Provides a rich toolbar widget based on the button and menu widgets</description>
          <attributes>
            <attribute name="_buttonGroupList" type="Array" readonly="False">
              <description>Protected property
Internal property list of current button groups in the toolbar</description>
            </attribute>
            <attribute name="_buttonList" type="Array" readonly="False">
              <description>Protected property
Internal property list of current buttons in the toolbar</description>
            </attribute>
            <attribute name="_colorData" type="Object" readonly="False">
              <description>Object reference containing colors hex and text values.</description>
            </attribute>
            <attribute name="_colorPicker" type="HTMLElement" readonly="False">
              <description>The HTML Element containing the colorPicker</description>
            </attribute>
            <attribute name="_keyNav" type="Boolean" readonly="False">
              <description>Private property
Flag to determine if the arrow nav listeners have been attached</description>
            </attribute>
            <attribute name="_navCounter" type="Number" readonly="False">
              <description>Private property
Internal counter for walking the buttons in the toolbar with the arrow keys</description>
            </attribute>
            <attribute name="_sep" type="HTMLElement" readonly="False">
              <description>Protected property
Internal reference to the separator HTML Element for cloning</description>
            </attribute>
            <attribute name="_sepCount" type="Number" readonly="False">
              <description>Protected property
Internal refernce for counting separators, so we can give them a useful class name for styling</description>
            </attribute>
            <attribute name="_titlebar" type="HTMLElement" readonly="False">
              <description>Object reference to the titlebar</description>
            </attribute>
            <attribute name="_toolbarConfigs" type="Object" readonly="False">
              <description>Protected property</description>
            </attribute>
            <attribute name="browser" type="Object" readonly="False">
              <description>Standard browser detection</description>
            </attribute>
            <attribute name="buttonType" type="Object" readonly="False">
              <description>The default button to use</description>
            </attribute>
            <attribute name="CLASS_CONTAINER" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to the toolbar container element</description>
            </attribute>
            <attribute name="CLASS_DISABLED" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply when the toolbar is disabled</description>
            </attribute>
            <attribute name="CLASS_DRAGHANDLE" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to the toolbar's drag handle element</description>
            </attribute>
            <attribute name="CLASS_PREFIX" type="String" readonly="False">
              <description>Protected property
Default prefix for dynamically created class names</description>
            </attribute>
            <attribute name="CLASS_SEPARATOR" type="String" readonly="False">
              <description>Protected property
Default CSS class to apply to all separators in the toolbar</description>
            </attribute>
            <attribute name="dd" type="Object" readonly="False">
              <description>The DragDrop instance associated with the Toolbar</description>
            </attribute>
            <attribute name="draghandle" type="HTMLElement" readonly="False">
              <description>Protected property</description>
            </attribute>
            <attribute name="STR_COLLAPSE" type="String" readonly="False">
              <description>String for Toolbar Collapse Button</description>
            </attribute>
            <attribute name="STR_SPIN_DOWN" type="String" readonly="False">
              <description>String for spinbutton down</description>
            </attribute>
            <attribute name="STR_SPIN_LABEL" type="String" readonly="False">
              <description>String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute</description>
            </attribute>
            <attribute name="STR_SPIN_UP" type="String" readonly="False">
              <description>String for spinbutton up</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_addMenuClasses" returns="void">
              <description>Private property
This method is called from Menu's renderEvent to add a few more classes to the menu items</description>
              <params>
                <param name="ev" type="String" optional="False">
                  <description>The event that fired.</description>
                </param>
                <param name="na" type="Array" optional="False">
                  <description>The event that fired.</description>
                </param>
                <param name="o" type="Object" optional="False">
                  <description>The event that fired.</description>
                </param>
              </params>
            </function>
            <function name="_buttonClick" returns="void">
              <description>Protected property
Click handler for all buttons in the toolbar.</description>
              <params>
                <param name="ev" type="String" optional="False">
                  <description>Object literal of information about the button that was clicked.</description>
                </param>
                <param name="info" type="Object" optional="False">
                  <description>Object literal of information about the button that was clicked.</description>
                </param>
              </params>
            </function>
            <function name="_createColorPicker" returns="void">
              <description>Private property
Creates the core DOM reference to the color picker menu item.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_handleFocus" returns="void">
              <description>Private property
Sets up the listeners for the arrow key navigation</description>
            </function>
            <function name="_makeColorButton" returns="void">
              <description>Private property
Called to turn a "color" button into a menu button with an Overlay for the menu.</description>
              <params>
                <param name="_oButton" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_makeSpinButton" returns="void">
              <description>Private property
Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.</description>
              <params>
                <param name="_button" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oButton" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_navigateButtons" returns="void">
              <description>Private property
Handles the navigation/focus of toolbar buttons with the Arrow Keys</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_resetColorPicker" returns="void">
              <description>Private property
Clears the currently selected color or mouseover color in the color picker.</description>
            </function>
            <function name="addButton" returns="void">
              <description>Add a new button to the toolbar. Buttons supported:
push, split, menu, select, color, spin</description>
              <params>
                <param name="oButton" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="after" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addButtonGroup" returns="void">
              <description>Add a new button group to the toolbar. (uses addButton)</description>
              <params>
                <param name="oGroup" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addButtonToGroup" returns="void">
              <description>Add a new button to a toolbar group. Buttons supported:
push, split, menu, select, color, spin</description>
              <params>
                <param name="oButton" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="group" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="after" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="addSeparator" returns="void">
              <description>Add a new button separator to the toolbar.</description>
              <params>
                <param name="cont" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="after" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapse" returns="void">
              <description>Programatically collapse the toolbar.</description>
              <params>
                <param name="collapse" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="deselectAllButtons" returns="Boolean">
              <description>Deselects all buttons in the toolbar.</description>
            </function>
            <function name="deselectButton" returns="Boolean">
              <description>Deselects a button in the toolbar.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="Boolean">
              <description>Destroys the toolbar, all of it's elements and objects.</description>
            </function>
            <function name="destroyButton" returns="Boolean">
              <description>Destroy a button in the toolbar.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="disableAllButtons" returns="Boolean">
              <description>Disables all buttons in the toolbar.</description>
            </function>
            <function name="disableButton" returns="Boolean">
              <description>Disables a button in the toolbar.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="enableAllButtons" returns="Boolean">
              <description>Enables all buttons in the toolbar.</description>
            </function>
            <function name="enableButton" returns="Boolean">
              <description>Enables a button in the toolbar.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButtonById" returns="YAHOO.widget.ToolbarButton">
              <description>Gets a button instance from the toolbar by is Dom id.</description>
              <params>
                <param name="id" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButtonByIndex" returns="YAHOO.widget.ToolbarButton">
              <description>Gets a button instance from the toolbar by is index in _buttonList.</description>
              <params>
                <param name="index" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButtonByValue" returns="YAHOO.widget.ToolbarButton or YAHOO.widget.MenuItem">
              <description>Gets a button instance or a menuitem instance from the toolbar by it's value.</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getButtons" returns="Array">
              <description>Returns an array of buttons in the current toolbar</description>
            </function>
            <function name="init" returns="void">
              <description>The Toolbar class's initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to create
the toolbar.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="isSelected" returns="Boolean">
              <description>Tells if a button is selected or not.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="resetAllButtons" returns="Boolean">
              <description>Resets all buttons to their initial state.</description>
              <params>
                <param name="_ex" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="selectButton" returns="Boolean">
              <description>Selects a button in the toolbar.</description>
              <params>
                <param name="id" type="String/Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the toolbar.</description>
            </function>
            <function name="Toolbar" returns="YAHOO.widget.Toolbar">
              <description>Class YAHOO.widget.Toolbar constructor
Provides a rich toolbar widget based on the button and menu widgets</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ToolbarButton" extends="YAHOO.util.Element" private="True">
          <description>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's ToolbarProvides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</description>
          <attributes>
            <attribute name="buttonType" type="object" readonly="False">
              <description>Private property
Tells if the Button is a Rich Button or a Simple Button</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_handleMouseOut" returns="void">
              <description>Private property
Removes classes from the button elements on mouseout (hover)</description>
            </function>
            <function name="_handleMouseOver" returns="void">
              <description>Private property
Adds classes to the button elements on mouseover (hover)</description>
            </function>
            <function name="_handleSelect" returns="void">
              <description>Private property
The event fired when a change event gets fired on a select element</description>
              <params>
                <param name="ev" type="Event" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="checkValue" returns="void">
              <description>Select an option by value</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Destroy the button</description>
            </function>
            <function name="fireEvent" returns="void">
              <description>Overridden fireEvent method to prevent DOM events from firing if the button is disabled.</description>
            </function>
            <function name="getMenu" returns="void">
              <description>A stub function to mimic YAHOO.widget.Button's getMenu method</description>
            </function>
            <function name="init" returns="void">
              <description>The ToolbarButton class's initialization method</description>
            </function>
            <function name="initAttributes" returns="void">
              <description>Initializes all of the configuration attributes used to create
the toolbar.</description>
              <params>
                <param name="attr" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representing the toolbar.</description>
            </function>
            <function name="ToolbarButton" returns="YAHOO.widget.ToolbarButton">
              <description>Class YAHOO.widget.ToolbarButton constructor
Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's ToolbarProvides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.ToolbarButtonAdvanced" extends="Object" private="True">
          <description>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</description>
          <attributes>
            <attribute name="buttonType" type="object" readonly="False">
              <description>Private property
Tells if the Button is a Rich Button or a Simple Button</description>
            </attribute>
          </attributes>
          <functions>
            <function name="checkValue" returns="void">
              <description>Select an option by value</description>
              <params>
                <param name="value" type="String" optional="False">
                  <description>The value of the option that we want to mark as selected</description>
                </param>
              </params>
            </function>
            <function name="ToolbarButtonAdvanced" returns="YAHOO.widget.ToolbarButtonAdvanced">
              <description>Class YAHOO.widget.ToolbarButtonAdvanced constructor
Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</description>
              <params>
                <param name="el" type="String/HTMLElement" optional="False">
                  <description>Object liternal containing configuration parameters.</description>
                </param>
                <param name="attrs" type="Object" optional="False">
                  <description>Object liternal containing configuration parameters.</description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Tooltip" extends="YAHOO.widget.Overlay" private="True">
          <description>Tooltip is an implementation of Overlay that behaves like an OS tooltip,
displaying when the user mouses over a particular element, and
disappearing on mouse out.</description>
          <attributes>
            <attribute name="DEFAULT_CONFIG" type="Object" readonly="False">
              <description>Private property
Constant representing the Tooltip's configuration properties</description>
            </attribute>
            <attribute name="EVENT_TYPES" type="Object" readonly="False">
              <description>Private property
Constant representing the name of the Tooltip's events</description>
            </attribute>
            <attribute name="showProcId" type="int" readonly="False">
              <description>The unique process ID associated with the thread responsible
for showing the Tooltip.</description>
            </attribute>
            <attribute name="CSS_TOOLTIP" type="String" readonly="False">
              <description>Constant representing the Tooltip CSS class</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_removeEventListeners" returns="void">
              <description>Protected property
Removes all of the DOM event handlers from the HTML
element(s) that trigger the display of the tooltip.</description>
            </function>
            <function name="configContainer" returns="void">
              <description>The default event handler fired when the "container" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The CustomEvent arguments. For
configuration handlers, args[0] will equal the newly applied value
for the property.</description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>The CustomEvent arguments. For
configuration handlers, args[0] will equal the newly applied value
for the property.</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>The CustomEvent arguments. For
configuration handlers, args[0] will equal the newly applied value
for the property.</description>
                </param>
              </params>
            </function>
            <function name="configContext" returns="void">
              <description>The default event handler fired when the "context" property
is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>The scope object. For configuration handlers,
this will usually equal the owner.</description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>The scope object. For configuration handlers,
this will usually equal the owner.</description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>The scope object. For configuration handlers,
this will usually equal the owner.</description>
                </param>
              </params>
            </function>
            <function name="configText" returns="void">
              <description>The default event handler fired when the "text" property is changed.</description>
              <params>
                <param name="type" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="args" type="Object[]" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="destroy" returns="void">
              <description>Removes the Tooltip element from the DOM and sets all child
elements to null.</description>
            </function>
            <function name="doHide" returns="void">
              <description>Sets the timeout for the auto-dismiss delay, which by default is 5
seconds, meaning that a tooltip will automatically dismiss itself
after 5 seconds of being displayed.</description>
            </function>
            <function name="doShow" returns="Number">
              <description>Processes the showing of the Tooltip by setting the timeout delay
and offset of the Tooltip.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="context" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="forceUnderlayRedraw" returns="void">
              <description>Forces the underlay element to be repainted, through the application/removal
of a yui-force-redraw class to the underlay element.</description>
            </function>
            <function name="init" returns="void">
              <description>The Tooltip initialization method. This method is automatically
called by the constructor. A Tooltip is automatically rendered by
the init method, and it also is set to be invisible by default,
and constrained to viewport by default as well.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="initDefaultConfig" returns="void">
              <description>Initializes the class's configurable properties which can be
changed using the Overlay's Config object (cfg).</description>
            </function>
            <function name="initEvents" returns="void">
              <description>Initializes the custom events for Tooltip</description>
            </function>
            <function name="onContextMouseMove" returns="void">
              <description>The default event handler fired when the user moves the mouse while
over the context element.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onContextMouseOut" returns="void">
              <description>The default event handler fired when the user mouses out of
the context element.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onContextMouseOver" returns="void">
              <description>The default event handler fired when the user mouses over the
context element.</description>
              <params>
                <param name="e" type="DOMEvent" optional="False">
                  <description>
                  </description>
                </param>
                <param name="obj" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onRender" returns="void">
              <description>"render" event handler for the Tooltip.</description>
              <params>
                <param name="p_sType" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="p_aArgs" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="preventOverlay" returns="void">
              <description>Fired when the Tooltip is moved, this event handler is used to
prevent the Tooltip from overlapping with its context element.</description>
              <params>
                <param name="pageX" type="Number" optional="False">
                  <description>
                  </description>
                </param>
                <param name="pageY" type="Number" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="String">
              <description>Returns a string representation of the object.</description>
            </function>
            <function name="Tooltip" returns="YAHOO.widget.Tooltip">
              <description>Class YAHOO.widget.Tooltip constructor
Tooltip is an implementation of Overlay that behaves like an OS tooltip,
displaying when the user mouses over a particular element, and
disappearing on mouse out.</description>
              <params>
                <param name="el" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="userConfig" type="Object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TreeView" extends="Object" private="True">
          <description>Contains the tree view state data and the root node.</description>
          <attributes>
            <attribute name="_animCount" type="int" readonly="False">
              <description>Private property
The current number of animations that are executing</description>
            </attribute>
            <attribute name="_collapseAnim" type="string" readonly="False">
              <description>Private property
The animation to use for collapsing children, if any</description>
            </attribute>
            <attribute name="_currentlyHighlighted" type="YAHOO.widget.Node" readonly="False">
              <description>Private property
A reference to the Node that is currently highlighted.
It is only meaningful if singleNodeHighlight is enabled</description>
            </attribute>
            <attribute name="_dblClickTimer" type="window.timer object" readonly="False">
              <description>Private property
Stores the timer used to check for double clicks</description>
            </attribute>
            <attribute name="_el" type="HTMLelement" readonly="False">
              <description>Private property
The host element for this tree</description>
            </attribute>
            <attribute name="_expandAnim" type="string" readonly="False">
              <description>Private property
The animation to use for expanding children, if any</description>
            </attribute>
            <attribute name="_hasDblClickSubscriber" type="boolean" readonly="False">
              <description>Private property
Whether there is any subscriber to dblClickEvent</description>
            </attribute>
            <attribute name="_nodes" type="Node[]" readonly="False">
              <description>Private property
Flat collection of all nodes in this tree.  This is a sparse
array, so the length property can't be relied upon for a
node count for the tree.</description>
            </attribute>
            <attribute name="currentFocus" type="YAHOO.widget.Node" readonly="False">
              <description>A reference to the Node currently having the focus or null if none.</description>
            </attribute>
            <attribute name="editorData" type="object" readonly="False">
              <description>An object to store information used for in-line editing
for all Nodes of all TreeViews. It contains:

active {boolean}, whether there is an active cell editor
whoHasIt {YAHOO.widget.TreeView} TreeView instance that is currently using the editor
nodeType {string} value of static Node._type property, allows reuse of input element if node is of the same type.
editorPanel {HTMLelement (&lt;div&gt;)} element holding the in-line editor
inputContainer {HTMLelement (&lt;div&gt;)} element which will hold the type-specific input element(s) to be filled by the fillEditorContainer method
buttonsContainer {HTMLelement (&lt;div&gt;)} element which holds the &lt;button&gt; elements for Ok/Cancel.  If you don't want any of the buttons, hide it via CSS styles, don't destroy it
node {YAHOO.widget.Node} reference to the Node being edited
saveOnEnter {boolean}, whether the Enter key should be accepted as a Save command (Esc. is always taken as Cancel), disable for multi-line input elements

Editors are free to use this object to store additional data.</description>
            </attribute>
            <attribute name="id" type="String" readonly="False">
              <description>The id of tree container element</description>
            </attribute>
            <attribute name="locked" type="boolean" readonly="False">
              <description>We lock the tree control while waiting for the dynamic loader to return</description>
            </attribute>
            <attribute name="maxAnim" type="int" readonly="False">
              <description>The maximum number of animations to run at one time.</description>
            </attribute>
            <attribute name="singleNodeHighlight" type="boolean" readonly="False">
              <description>If true, only one Node can be highlighted at a time</description>
            </attribute>
            <attribute name="FOCUS_CLASS_NAME" type="String" readonly="False">
              <description>Class name assigned to elements that have the focus</description>
            </attribute>
            <attribute name="validator" type="object" readonly="False">
              <description>Validator function for edited data, called from the TreeView instance scope,
receives the arguments (newValue, oldValue, nodeInstance)
and returns either the validated (or type-converted) value or undefined.
An undefined return will prevent the editor from closing</description>
            </attribute>
            <attribute name="nodeCount" type="int" readonly="False">
              <description>Running count of all nodes created in all trees.  This is
used to provide unique identifies for all nodes.  Deleting
nodes does not change the nodeCount.</description>
            </attribute>
            <attribute name="trees" type="Array" readonly="False">
              <description>Private property
Global cache of tree instances</description>
            </attribute>
          </attributes>
          <functions>
            <function name="_closeEditor" returns="void">
              <description>Private property
Method to be called when the inline editing is finished and the editor is to be closed</description>
              <params>
                <param name="save" type="Boolean" optional="False">
                  <description>true if the edited value is to be saved, false if discarded</description>
                </param>
              </params>
            </function>
            <function name="_deleteNode" returns="void">
              <description>Private property
Deletes the node and recurses children</description>
            </function>
            <function name="_destroyEditor" returns="void">
              <description>Private property
Entry point for TreeView's destroy method to destroy whatever the editing plug-in has created</description>
            </function>
            <function name="_getEventTargetTdEl" returns="void">
              <description>Private property
Returns the TD element where the event has occurred</description>
            </function>
            <function name="_nodeEditing" returns="Boolean">
              <description>Private property
Entry point of the editing plug-in.
TreeView will call this method if it exists when a node label is clicked</description>
              <params>
                <param name="node" type="YAHOO.widget.Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="_onClickEvent" returns="void">
              <description>Private property
Event listener for click events</description>
            </function>
            <function name="_onDblClickEvent" returns="void">
              <description>Private property
Event listener for double-click events</description>
            </function>
            <function name="_onKeyDownEvent" returns="void">
              <description>Private property
Event listener for key down events</description>
            </function>
            <function name="_onMouseOutEvent" returns="void">
              <description>Private property
Event listener for mouse out events</description>
            </function>
            <function name="_onMouseOverEvent" returns="void">
              <description>Private property
Event listener for mouse over events</description>
            </function>
            <function name="_removeChildren_animComplete" returns="void">
              <description>Private property
wait until the animation is complete before deleting
to avoid javascript errors</description>
              <params>
                <param name="o" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="animateCollapse" returns="boolean">
              <description>Perform the collapse animation if configured, or just show the
element if not configured or too many animations are in progress</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="node" type="YAHOO.util.Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="animateExpand" returns="boolean">
              <description>Perform the expand animation if configured, or just show the
element if not configured or too many animations are in progress</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="node" type="YAHOO.util.Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="buildTreeFromMarkup" returns="void">
              <description>Builds the TreeView from existing markup.   Markup should consist of &lt;UL&gt; or &lt;OL&gt; elements containing &lt;LI&gt; elements.
Each &lt;LI&gt; can have one element used as label and a second optional element which is to be a &lt;UL&gt; or &lt;OL&gt;
containing nested nodes.
Depending on what the first element of the &lt;LI&gt; element is, the following Nodes will be created:
plain text:  a regular TextNode
anchor &lt;A&gt;: a TextNode with its href and target taken from the anchor
anything else: an HTMLNode
Only the first  outermost (un-)ordered list in the markup and its children will be parsed.
Nodes will be collapsed unless  an  &lt;LI&gt;  tag has a className called 'expanded'.
All other className attributes will be copied over to the Node className property.
If the &lt;LI&gt; element contains an attribute called yuiConfig, its contents should be a JSON-encoded object
as the one used in method buildTreeFromObject.</description>
              <params>
                <param name="id" type="string|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="buildTreeFromObject" returns="void">
              <description>Builds the TreeView from an object.
This is the method called by the constructor to build the tree when it has a second argument.
A tree can be described by an array of objects, each object corresponding to a node.
Node descriptions may contain values for any property of a node plus the following extra properties:
type:  can be one of the following:
 A shortname for a node type ('text','menu','html')
The name of a Node class under YAHOO.widget ('TextNode', 'MenuNode', 'DateNode', etc)
a reference to an actual class: YAHOO.widget.DateNode
children: an array containing further node definitions</description>
              <params>
                <param name="oConfig" type="Array" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="collapseAll" returns="void">
              <description>Collapses all expanded child nodes in the entire tree.</description>
            </function>
            <function name="collapseComplete" returns="void">
              <description>Function executed when the collapse animation completes</description>
            </function>
            <function name="destroy" returns="void">
              <description>Nulls out the entire TreeView instance and related objects, removes attached
event listeners, and clears out DOM elements inside the container. After
calling this method, the instance reference should be expliclitly nulled by
implementer, as in myDataTable = null. Use with caution!</description>
            </function>
            <function name="draw" returns="void">
              <description>Renders the tree boilerplate and visible nodes.
Alias for render</description>
            </function>
            <function name="expandAll" returns="void">
              <description>Expands all child nodes.  Note: this conflicts with the "multiExpand"
node property.  If expand all is called in a tree with nodes that
do not allow multiple siblings to be displayed, only the last sibling
will be expanded.</description>
            </function>
            <function name="expandComplete" returns="void">
              <description>Function executed when the expand animation completes</description>
            </function>
            <function name="getEl" returns="HTMLElement">
              <description>Returns the tree's host element</description>
            </function>
            <function name="getNodeByElement" returns="YAHOO.widget.Node">
              <description>Returns the treeview node reference for an anscestor element
of the node, or null if it is not contained within any node
in this tree.</description>
              <params>
                <param name="the" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNodeByIndex" returns="Node">
              <description>Returns a node in the tree that has the specified index (this index
is created internally, so this function probably will only be used
in html generated for a given node.)</description>
              <params>
                <param name="nodeIndex" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNodeByProperty" returns="Node">
              <description>Returns a node that has a matching property and value in the data
object that was passed into its constructor.</description>
              <params>
                <param name="property" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getNodeCount" returns="int">
              <description>Count of nodes in tree</description>
            </function>
            <function name="getNodesByProperty" returns="Array">
              <description>Returns a collection of nodes that have a matching property
and value in the data object that was passed into its constructor.</description>
              <params>
                <param name="property" type="object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getRoot" returns="Node">
              <description>Returns the root node of this tree</description>
            </function>
            <function name="getTreeDefinition" returns="Object | false">
              <description>Returns an object which could be used to rebuild the tree.
It can be passed to the tree constructor to reproduce the same tree.
It will return false if any node loads dynamically, regardless of whether it is loaded or not.</description>
            </function>
            <function name="init" returns="void">
              <description>Private property
Initializes the tree</description>
            </function>
            <function name="onCollapse" returns="void">
              <description>Abstract method that is executed when a node is collapsed.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventEditNode" returns="void">
              <description>Method to be associated with an event (clickEvent, dblClickEvent or enterKeyPressed) to pop up the contents editor
It calls the corresponding node editNode method.</description>
              <params>
                <param name="oArgs" type="object" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onEventToggleHighlight" returns="false">
              <description>Event listener to toggle node highlight.
Can be assigned as listener to clickEvent, dblClickEvent and enterKeyPressed.
It returns false to prevent the default action.</description>
              <params>
                <param name="oArgs" type="any" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="onExpand" returns="void">
              <description>Abstract method that is executed when a node is expanded</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="popNode" returns="void">
              <description>Removes the node from the tree, preserving the child collection
to make it possible to insert the branch into another part of the
tree, or another tree.</description>
              <params>
                <param name="the" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="regNode" returns="void">
              <description>Private property
Nodes register themselves with the tree instance when they are created.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeChildren" returns="void">
              <description>Deletes this nodes child collection, recursively.  Also collapses
the node, and resets the dynamic load flag.  The primary use for
this method is to purge a node and allow it to fetch its data
dynamically again.</description>
              <params>
                <param name="node" type="Node" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="removeNode" returns="boolean">
              <description>Removes the node and its children, and optionally refreshes the
branch of the tree that was affected.</description>
              <params>
                <param name="The" type="Node" optional="False">
                  <description>
                  </description>
                </param>
                <param name="autoRefresh" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="render" returns="void">
              <description>Renders the tree boilerplate and visible nodes</description>
            </function>
            <function name="setCollapseAnim" returns="void">
              <description>Sets up the animation for collapsing children</description>
              <params>
                <param name="the" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setDynamicLoad" returns="void">
              <description>Configures this tree to dynamically load all child data</description>
              <params>
                <param name="fnDataLoader" type="function" optional="False">
                  <description>
                  </description>
                </param>
                <param name="iconMode" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setExpandAnim" returns="void">
              <description>Sets up the animation for expanding children</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setNodesProperty" returns="void">
              <description>Sets the value of a property for all loaded nodes in the tree.</description>
              <params>
                <param name="name" type="string" optional="False">
                  <description>
                  </description>
                </param>
                <param name="value" type="any" optional="False">
                  <description>
                  </description>
                </param>
                <param name="refresh" type="boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="toString" returns="string">
              <description>TreeView instance toString</description>
            </function>
            <function name="getNode" returns="Node">
              <description>Global method for getting a node by its id.  Used in the generated
tree html.</description>
              <params>
                <param name="treeId" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="nodeIndex" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="getTree" returns="TreeView">
              <description>Global method for getting a tree by its id.  Used in the generated
tree html.</description>
              <params>
                <param name="treeId" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="preload" returns="void">
              <description>Attempts to preload the images defined in the styles used to draw the tree by
rendering off-screen elements that use the styles.</description>
              <params>
                <param name="prefix" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="TreeView" returns="YAHOO.widget.TreeView">
              <description>Class YAHOO.widget.TreeView constructor
Contains the tree view state data and the root node.</description>
              <params>
                <param name="id" type="string|HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="oConfig" type="Array|object|string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TVAnim" extends="Object" private="True">
          <description>A static factory class for tree view expand/collapse animations</description>
          <attributes>
            <attribute name="FADE_IN" type="string" readonly="False">
              <description>Constant for the fade in animation</description>
            </attribute>
            <attribute name="FADE_OUT" type="string" readonly="False">
              <description>Constant for the fade out animation</description>
            </attribute>
          </attributes>
          <functions>
            <function name="getAnim" returns="YAHOO.util.Animation">
              <description>Returns a ygAnim instance of the given type</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>the type of animation</description>
                </param>
                <param name="el" type="HTMLElement" optional="False">
                  <description>the type of animation</description>
                </param>
                <param name="callback" type="function" optional="False">
                  <description>the type of animation</description>
                </param>
              </params>
            </function>
            <function name="isValid" returns="boolean">
              <description>Returns true if the specified animation class is available</description>
              <params>
                <param name="type" type="string" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TVFadeIn" extends="Object" private="True">
          <description>A 1/2 second fade-in animation.</description>
          <attributes>
            <attribute name="callback" type="function" readonly="False">
              <description>the callback to invoke when the animation is complete</description>
            </attribute>
            <attribute name="el" type="HTMLElement" readonly="False">
              <description>The element to animate</description>
            </attribute>
          </attributes>
          <functions>
            <function name="animate" returns="void">
              <description>Performs the animation</description>
            </function>
            <function name="onComplete" returns="void">
              <description>Clean up and invoke callback</description>
            </function>
            <function name="toString" returns="string">
              <description>toString</description>
            </function>
            <function name="TVFadeIn" returns="YAHOO.widget.TVFadeIn">
              <description>Class YAHOO.widget.TVFadeIn constructor
A 1/2 second fade-in animation.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.TVFadeOut" extends="Object" private="True">
          <description>A 1/2 second fade out animation.</description>
          <attributes>
            <attribute name="callback" type="function" readonly="False">
              <description>the callback to invoke when the animation is complete</description>
            </attribute>
            <attribute name="el" type="HTMLElement" readonly="False">
              <description>The element to animate</description>
            </attribute>
          </attributes>
          <functions>
            <function name="animate" returns="void">
              <description>Performs the animation</description>
            </function>
            <function name="onComplete" returns="void">
              <description>Clean up and invoke callback</description>
            </function>
            <function name="toString" returns="string">
              <description>toString</description>
            </function>
            <function name="TVFadeOut" returns="YAHOO.widget.TVFadeOut">
              <description>Class YAHOO.widget.TVFadeOut constructor
A 1/2 second fade out animation.</description>
              <params>
                <param name="el" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="callback" type="Function" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO.widget.Uploader" extends="Object" private="True">
          <description>Uploader class for the YUI Uploader component.</description>
          <attributes>
            <attribute name="SWFURL" type="object" readonly="False">
              <description>Private property
Location of the Uploader SWF</description>
            </attribute>
          </attributes>
          <functions>
            <function name="cancel" returns="void">
              <description>Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled.</description>
              <params>
                <param name="fileID" type="String" optional="False">
                  <description>The ID of the file whose upload should be cancelled.</description>
                </param>
              </params>
            </function>
            <function name="clearFileList" returns="void">
              <description>Clears the list of files queued for upload.</description>
            </function>
            <function name="disable" returns="void">
              <description>Disables the mouse events on the Uploader.
If the uploader is being rendered as a button,
then the button's skin is set to "disabled"
(fourth section of the button skin sprite).</description>
            </function>
            <function name="enable" returns="void">
              <description>Enables the mouse events on the Uploader.
If the uploader is being rendered as a button,
then the button's skin is set to "up"
(first section of the button skin sprite).</description>
            </function>
            <function name="removeFile" returns="void">
              <description>Removes the specified file from the upload queue.</description>
              <params>
                <param name="fileID" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAllowLogging" returns="void">
              <description>Turns the logging functionality on.
Uses Flash internal trace logging, as well as YUI Logger, if available.</description>
              <params>
                <param name="allowLogging" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setAllowMultipleFiles" returns="void">
              <description>Sets the flag allowing users to select multiple files for the upload.</description>
              <params>
                <param name="allowMultipleFiles" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setFileFilters" returns="void">
              <description>Sets the file filters for the "Browse" dialog.</description>
              <params>
                <param name="newFilterArray" type="extensions: extensionString, description: descriptionString, [optional]macType: macTypeString" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="setSimUploadLimit" returns="void">
              <description>Sets the number of simultaneous uploads when using uploadAll()
The minimum value is 1, and maximum value is 5. The default value is 2.</description>
              <params>
                <param name="simUploadLimit" type="int" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="upload" returns="void">
              <description>Starts the upload of the file specified by fileID to the location specified by uploadScriptPath.</description>
              <params>
                <param name="fileID" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="uploadScriptPath" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="vars" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fieldName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="uploadAll" returns="void">
              <description>Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed.</description>
              <params>
                <param name="uploadScriptPath" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="method" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="vars" type="Object" optional="False">
                  <description>
                  </description>
                </param>
                <param name="fieldName" type="String" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
            <function name="Uploader" returns="YAHOO.widget.Uploader">
              <description>Class YAHOO.widget.Uploader constructor
Uploader class for the YUI Uploader component.</description>
              <params>
                <param name="containerId" type="HTMLElement" optional="False">
                  <description>
                  </description>
                </param>
                <param name="buttonSkin" type="String" optional="False">
                  <description>
                  </description>
                </param>
                <param name="forceTransparent" type="Boolean" optional="False">
                  <description>
                  </description>
                </param>
              </params>
            </function>
          </functions>
        </interface>
        <interface name="YAHOO_config" extends="Object" private="False">
          <description>YAHOO_config is not included as part of the library.  Instead it is an
object that can be defined by the implementer immediately before
including the YUI library.  The properties included in this object
will be used to configure global properties needed as soon as the
library begins to load.</description>
          <attributes>
            <attribute name="injecting" type="boolean" readonly="False">
              <description>Set to true if the library will be dynamically loaded after window.onload.
Defaults to false</description>
            </attribute>
            <attribute name="listener" type="Function" readonly="False">
              <description>A reference to a function that will be executed every time a YAHOO module
is loaded.  As parameter, this function will receive the version
information for the module. See
YAHOO.env.getVersion for the description of the version data structure.</description>
            </attribute>
            <attribute name="load" type="object" readonly="False">
              <description>Instructs the yuiloader component to dynamically load yui components and
their dependencies.  See the yuiloader documentation for more information
about dynamic loading</description>
            </attribute>
            <attribute name="locale" type="string" readonly="False">
              <description>Forces the use of the supplied locale where applicable in the library</description>
            </attribute>
          </attributes>
        </interface>
      </interfaces>
    </module>
  </modules>
</javascript>
